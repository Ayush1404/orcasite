/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 29);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__directives__ = __webpack_require__(35);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return __WEBPACK_IMPORTED_MODULE_0__directives__[\"a\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return __WEBPACK_IMPORTED_MODULE_0__directives__[\"b\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"A\", function() { return __WEBPACK_IMPORTED_MODULE_0__directives__[\"c\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fragments__ = __webpack_require__(36);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return __WEBPACK_IMPORTED_MODULE_1__fragments__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__getFromAST__ = __webpack_require__(14);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return __WEBPACK_IMPORTED_MODULE_2__getFromAST__[\"b\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return __WEBPACK_IMPORTED_MODULE_2__getFromAST__[\"c\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return __WEBPACK_IMPORTED_MODULE_2__getFromAST__[\"d\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return __WEBPACK_IMPORTED_MODULE_2__getFromAST__[\"e\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return __WEBPACK_IMPORTED_MODULE_2__getFromAST__[\"f\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return __WEBPACK_IMPORTED_MODULE_2__getFromAST__[\"g\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return __WEBPACK_IMPORTED_MODULE_2__getFromAST__[\"i\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return __WEBPACK_IMPORTED_MODULE_2__getFromAST__[\"j\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__transform__ = __webpack_require__(37);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_3__transform__[\"a\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return __WEBPACK_IMPORTED_MODULE_3__transform__[\"b\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__storeUtils__ = __webpack_require__(8);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return __WEBPACK_IMPORTED_MODULE_4__storeUtils__[\"a\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return __WEBPACK_IMPORTED_MODULE_4__storeUtils__[\"b\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return __WEBPACK_IMPORTED_MODULE_4__storeUtils__[\"c\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return __WEBPACK_IMPORTED_MODULE_4__storeUtils__[\"d\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return __WEBPACK_IMPORTED_MODULE_4__storeUtils__[\"e\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return __WEBPACK_IMPORTED_MODULE_4__storeUtils__[\"f\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"z\", function() { return __WEBPACK_IMPORTED_MODULE_4__storeUtils__[\"g\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"B\", function() { return __WEBPACK_IMPORTED_MODULE_4__storeUtils__[\"h\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"C\", function() { return __WEBPACK_IMPORTED_MODULE_4__storeUtils__[\"i\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_assign__ = __webpack_require__(15);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return __WEBPACK_IMPORTED_MODULE_5__util_assign__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_cloneDeep__ = __webpack_require__(16);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_environment__ = __webpack_require__(9);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return __WEBPACK_IMPORTED_MODULE_7__util_environment__[\"b\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return __WEBPACK_IMPORTED_MODULE_7__util_environment__[\"c\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__util_errorHandling__ = __webpack_require__(38);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return __WEBPACK_IMPORTED_MODULE_8__util_errorHandling__[\"a\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"D\", function() { return __WEBPACK_IMPORTED_MODULE_8__util_errorHandling__[\"b\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__util_isEqual__ = __webpack_require__(39);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return __WEBPACK_IMPORTED_MODULE_9__util_isEqual__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__util_maybeDeepFreeze__ = __webpack_require__(40);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return __WEBPACK_IMPORTED_MODULE_10__util_maybeDeepFreeze__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__util_warnOnce__ = __webpack_require__(41);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"E\", function() { return __WEBPACK_IMPORTED_MODULE_11__util_warnOnce__[\"a\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvaW5kZXguanM/ZmIzOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2RpcmVjdGl2ZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9mcmFnbWVudHMnO1xuZXhwb3J0ICogZnJvbSAnLi9nZXRGcm9tQVNUJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNmb3JtJztcbmV4cG9ydCAqIGZyb20gJy4vc3RvcmVVdGlscyc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWwvYXNzaWduJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbC9jbG9uZURlZXAnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlsL2Vudmlyb25tZW50JztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbC9lcnJvckhhbmRsaW5nJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbC9pc0VxdWFsJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbC9tYXliZURlZXBGcmVlemUnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlsL3dhcm5PbmNlJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby11dGlsaXRpZXMvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.print = print;\n\nvar _visitor = __webpack_require__(34);\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nfunction print(ast) {\n  return (0, _visitor.visit)(ast, { leave: printDocASTReducer });\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n\n  // Document\n\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet;\n    // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n\n\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue;\n    return variable + ': ' + type + wrap(' = ', defaultValue);\n  },\n\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n\n  // Fragments\n\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return 'fragment ' + name + ' on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ') + selectionSet;\n  },\n\n  // Value\n\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10) {\n    var value = _ref10.value;\n    return JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return JSON.stringify(value);\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n\n  // Directive\n\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n\n  // Type\n\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n\n  // Type System Definitions\n\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n\n  ScalarTypeDefinition: function ScalarTypeDefinition(_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  },\n\n  ObjectTypeDefinition: function ObjectTypeDefinition(_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ', ')), join(directives, ' '), block(fields)], ' ');\n  },\n\n  FieldDefinition: function FieldDefinition(_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));\n  },\n\n  InputValueDefinition: function InputValueDefinition(_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  },\n\n  InterfaceTypeDefinition: function InterfaceTypeDefinition(_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n\n  UnionTypeDefinition: function UnionTypeDefinition(_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), '= ' + join(types, ' | ')], ' ');\n  },\n\n  EnumTypeDefinition: function EnumTypeDefinition(_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  },\n\n  EnumValueDefinition: function EnumValueDefinition(_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  },\n\n  InputObjectTypeDefinition: function InputObjectTypeDefinition(_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  },\n\n  TypeExtensionDefinition: function TypeExtensionDefinition(_ref31) {\n    var definition = _ref31.definition;\n    return 'extend ' + definition;\n  },\n\n  DirectiveDefinition: function DirectiveDefinition(_ref32) {\n    var name = _ref32.name,\n        args = _ref32.arguments,\n        locations = _ref32.locations;\n    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');\n  }\n};\n\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\nfunction block(array) {\n  return array && array.length !== 0 ? indent('{\\n' + join(array, '\\n')) + '\\n}' : '{}';\n}\n\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && maybeString.replace(/\\n/g, '\\n  ');\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludGVyLmpzP2M0MmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDRCQUE0QjtBQUMvRCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGFBQWEsMkJBQTJCO0FBQ3hDLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxFQUFFO0FBQ2hCO0FBQ0E7QUFDQSxnREFBZ0QsK0JBQStCLE9BQU87QUFDdEY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnByaW50ID0gcHJpbnQ7XG5cbnZhciBfdmlzaXRvciA9IHJlcXVpcmUoJy4vdmlzaXRvcicpO1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIEFTVCBpbnRvIGEgc3RyaW5nLCB1c2luZyBvbmUgc2V0IG9mIHJlYXNvbmFibGVcbiAqIGZvcm1hdHRpbmcgcnVsZXMuXG4gKi9cbmZ1bmN0aW9uIHByaW50KGFzdCkge1xuICByZXR1cm4gKDAsIF92aXNpdG9yLnZpc2l0KShhc3QsIHsgbGVhdmU6IHByaW50RG9jQVNUUmVkdWNlciB9KTtcbn0gLyoqXG4gICAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICAgKlxuICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAgICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICAgKi9cblxudmFyIHByaW50RG9jQVNUUmVkdWNlciA9IHtcbiAgTmFtZTogZnVuY3Rpb24gTmFtZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gIH0sXG4gIFZhcmlhYmxlOiBmdW5jdGlvbiBWYXJpYWJsZShub2RlKSB7XG4gICAgcmV0dXJuICckJyArIG5vZGUubmFtZTtcbiAgfSxcblxuICAvLyBEb2N1bWVudFxuXG4gIERvY3VtZW50OiBmdW5jdGlvbiBEb2N1bWVudChub2RlKSB7XG4gICAgcmV0dXJuIGpvaW4obm9kZS5kZWZpbml0aW9ucywgJ1xcblxcbicpICsgJ1xcbic7XG4gIH0sXG5cbiAgT3BlcmF0aW9uRGVmaW5pdGlvbjogZnVuY3Rpb24gT3BlcmF0aW9uRGVmaW5pdGlvbihub2RlKSB7XG4gICAgdmFyIG9wID0gbm9kZS5vcGVyYXRpb247XG4gICAgdmFyIG5hbWUgPSBub2RlLm5hbWU7XG4gICAgdmFyIHZhckRlZnMgPSB3cmFwKCcoJywgam9pbihub2RlLnZhcmlhYmxlRGVmaW5pdGlvbnMsICcsICcpLCAnKScpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gam9pbihub2RlLmRpcmVjdGl2ZXMsICcgJyk7XG4gICAgdmFyIHNlbGVjdGlvblNldCA9IG5vZGUuc2VsZWN0aW9uU2V0O1xuICAgIC8vIEFub255bW91cyBxdWVyaWVzIHdpdGggbm8gZGlyZWN0aXZlcyBvciB2YXJpYWJsZSBkZWZpbml0aW9ucyBjYW4gdXNlXG4gICAgLy8gdGhlIHF1ZXJ5IHNob3J0IGZvcm0uXG4gICAgcmV0dXJuICFuYW1lICYmICFkaXJlY3RpdmVzICYmICF2YXJEZWZzICYmIG9wID09PSAncXVlcnknID8gc2VsZWN0aW9uU2V0IDogam9pbihbb3AsIGpvaW4oW25hbWUsIHZhckRlZnNdKSwgZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0XSwgJyAnKTtcbiAgfSxcblxuXG4gIFZhcmlhYmxlRGVmaW5pdGlvbjogZnVuY3Rpb24gVmFyaWFibGVEZWZpbml0aW9uKF9yZWYpIHtcbiAgICB2YXIgdmFyaWFibGUgPSBfcmVmLnZhcmlhYmxlLFxuICAgICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfcmVmLmRlZmF1bHRWYWx1ZTtcbiAgICByZXR1cm4gdmFyaWFibGUgKyAnOiAnICsgdHlwZSArIHdyYXAoJyA9ICcsIGRlZmF1bHRWYWx1ZSk7XG4gIH0sXG5cbiAgU2VsZWN0aW9uU2V0OiBmdW5jdGlvbiBTZWxlY3Rpb25TZXQoX3JlZjIpIHtcbiAgICB2YXIgc2VsZWN0aW9ucyA9IF9yZWYyLnNlbGVjdGlvbnM7XG4gICAgcmV0dXJuIGJsb2NrKHNlbGVjdGlvbnMpO1xuICB9LFxuXG4gIEZpZWxkOiBmdW5jdGlvbiBGaWVsZChfcmVmMykge1xuICAgIHZhciBhbGlhcyA9IF9yZWYzLmFsaWFzLFxuICAgICAgICBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgYXJncyA9IF9yZWYzLmFyZ3VtZW50cyxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYzLmRpcmVjdGl2ZXMsXG4gICAgICAgIHNlbGVjdGlvblNldCA9IF9yZWYzLnNlbGVjdGlvblNldDtcbiAgICByZXR1cm4gam9pbihbd3JhcCgnJywgYWxpYXMsICc6ICcpICsgbmFtZSArIHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIHNlbGVjdGlvblNldF0sICcgJyk7XG4gIH0sXG5cbiAgQXJndW1lbnQ6IGZ1bmN0aW9uIEFyZ3VtZW50KF9yZWY0KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmNC5uYW1lLFxuICAgICAgICB2YWx1ZSA9IF9yZWY0LnZhbHVlO1xuICAgIHJldHVybiBuYW1lICsgJzogJyArIHZhbHVlO1xuICB9LFxuXG4gIC8vIEZyYWdtZW50c1xuXG4gIEZyYWdtZW50U3ByZWFkOiBmdW5jdGlvbiBGcmFnbWVudFNwcmVhZChfcmVmNSkge1xuICAgIHZhciBuYW1lID0gX3JlZjUubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWY1LmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuICcuLi4nICsgbmFtZSArIHdyYXAoJyAnLCBqb2luKGRpcmVjdGl2ZXMsICcgJykpO1xuICB9LFxuXG4gIElubGluZUZyYWdtZW50OiBmdW5jdGlvbiBJbmxpbmVGcmFnbWVudChfcmVmNikge1xuICAgIHZhciB0eXBlQ29uZGl0aW9uID0gX3JlZjYudHlwZUNvbmRpdGlvbixcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWY2LmRpcmVjdGl2ZXMsXG4gICAgICAgIHNlbGVjdGlvblNldCA9IF9yZWY2LnNlbGVjdGlvblNldDtcbiAgICByZXR1cm4gam9pbihbJy4uLicsIHdyYXAoJ29uICcsIHR5cGVDb25kaXRpb24pLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIHNlbGVjdGlvblNldF0sICcgJyk7XG4gIH0sXG5cbiAgRnJhZ21lbnREZWZpbml0aW9uOiBmdW5jdGlvbiBGcmFnbWVudERlZmluaXRpb24oX3JlZjcpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWY3Lm5hbWUsXG4gICAgICAgIHR5cGVDb25kaXRpb24gPSBfcmVmNy50eXBlQ29uZGl0aW9uLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjcuZGlyZWN0aXZlcyxcbiAgICAgICAgc2VsZWN0aW9uU2V0ID0gX3JlZjcuc2VsZWN0aW9uU2V0O1xuICAgIHJldHVybiAnZnJhZ21lbnQgJyArIG5hbWUgKyAnIG9uICcgKyB0eXBlQ29uZGl0aW9uICsgJyAnICsgd3JhcCgnJywgam9pbihkaXJlY3RpdmVzLCAnICcpLCAnICcpICsgc2VsZWN0aW9uU2V0O1xuICB9LFxuXG4gIC8vIFZhbHVlXG5cbiAgSW50VmFsdWU6IGZ1bmN0aW9uIEludFZhbHVlKF9yZWY4KSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjgudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBGbG9hdFZhbHVlOiBmdW5jdGlvbiBGbG9hdFZhbHVlKF9yZWY5KSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjkudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBTdHJpbmdWYWx1ZTogZnVuY3Rpb24gU3RyaW5nVmFsdWUoX3JlZjEwKSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjEwLnZhbHVlO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gIH0sXG4gIEJvb2xlYW5WYWx1ZTogZnVuY3Rpb24gQm9vbGVhblZhbHVlKF9yZWYxMSkge1xuICAgIHZhciB2YWx1ZSA9IF9yZWYxMS52YWx1ZTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICB9LFxuICBOdWxsVmFsdWU6IGZ1bmN0aW9uIE51bGxWYWx1ZSgpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9LFxuICBFbnVtVmFsdWU6IGZ1bmN0aW9uIEVudW1WYWx1ZShfcmVmMTIpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmMTIudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBMaXN0VmFsdWU6IGZ1bmN0aW9uIExpc3RWYWx1ZShfcmVmMTMpIHtcbiAgICB2YXIgdmFsdWVzID0gX3JlZjEzLnZhbHVlcztcbiAgICByZXR1cm4gJ1snICsgam9pbih2YWx1ZXMsICcsICcpICsgJ10nO1xuICB9LFxuICBPYmplY3RWYWx1ZTogZnVuY3Rpb24gT2JqZWN0VmFsdWUoX3JlZjE0KSB7XG4gICAgdmFyIGZpZWxkcyA9IF9yZWYxNC5maWVsZHM7XG4gICAgcmV0dXJuICd7JyArIGpvaW4oZmllbGRzLCAnLCAnKSArICd9JztcbiAgfSxcbiAgT2JqZWN0RmllbGQ6IGZ1bmN0aW9uIE9iamVjdEZpZWxkKF9yZWYxNSkge1xuICAgIHZhciBuYW1lID0gX3JlZjE1Lm5hbWUsXG4gICAgICAgIHZhbHVlID0gX3JlZjE1LnZhbHVlO1xuICAgIHJldHVybiBuYW1lICsgJzogJyArIHZhbHVlO1xuICB9LFxuXG4gIC8vIERpcmVjdGl2ZVxuXG4gIERpcmVjdGl2ZTogZnVuY3Rpb24gRGlyZWN0aXZlKF9yZWYxNikge1xuICAgIHZhciBuYW1lID0gX3JlZjE2Lm5hbWUsXG4gICAgICAgIGFyZ3MgPSBfcmVmMTYuYXJndW1lbnRzO1xuICAgIHJldHVybiAnQCcgKyBuYW1lICsgd3JhcCgnKCcsIGpvaW4oYXJncywgJywgJyksICcpJyk7XG4gIH0sXG5cbiAgLy8gVHlwZVxuXG4gIE5hbWVkVHlwZTogZnVuY3Rpb24gTmFtZWRUeXBlKF9yZWYxNykge1xuICAgIHZhciBuYW1lID0gX3JlZjE3Lm5hbWU7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH0sXG4gIExpc3RUeXBlOiBmdW5jdGlvbiBMaXN0VHlwZShfcmVmMTgpIHtcbiAgICB2YXIgdHlwZSA9IF9yZWYxOC50eXBlO1xuICAgIHJldHVybiAnWycgKyB0eXBlICsgJ10nO1xuICB9LFxuICBOb25OdWxsVHlwZTogZnVuY3Rpb24gTm9uTnVsbFR5cGUoX3JlZjE5KSB7XG4gICAgdmFyIHR5cGUgPSBfcmVmMTkudHlwZTtcbiAgICByZXR1cm4gdHlwZSArICchJztcbiAgfSxcblxuICAvLyBUeXBlIFN5c3RlbSBEZWZpbml0aW9uc1xuXG4gIFNjaGVtYURlZmluaXRpb246IGZ1bmN0aW9uIFNjaGVtYURlZmluaXRpb24oX3JlZjIwKSB7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSBfcmVmMjAuZGlyZWN0aXZlcyxcbiAgICAgICAgb3BlcmF0aW9uVHlwZXMgPSBfcmVmMjAub3BlcmF0aW9uVHlwZXM7XG4gICAgcmV0dXJuIGpvaW4oWydzY2hlbWEnLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKG9wZXJhdGlvblR5cGVzKV0sICcgJyk7XG4gIH0sXG5cbiAgT3BlcmF0aW9uVHlwZURlZmluaXRpb246IGZ1bmN0aW9uIE9wZXJhdGlvblR5cGVEZWZpbml0aW9uKF9yZWYyMSkge1xuICAgIHZhciBvcGVyYXRpb24gPSBfcmVmMjEub3BlcmF0aW9uLFxuICAgICAgICB0eXBlID0gX3JlZjIxLnR5cGU7XG4gICAgcmV0dXJuIG9wZXJhdGlvbiArICc6ICcgKyB0eXBlO1xuICB9LFxuXG4gIFNjYWxhclR5cGVEZWZpbml0aW9uOiBmdW5jdGlvbiBTY2FsYXJUeXBlRGVmaW5pdGlvbihfcmVmMjIpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyMi5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjIyLmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuIGpvaW4oWydzY2FsYXInLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyldLCAnICcpO1xuICB9LFxuXG4gIE9iamVjdFR5cGVEZWZpbml0aW9uOiBmdW5jdGlvbiBPYmplY3RUeXBlRGVmaW5pdGlvbihfcmVmMjMpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyMy5uYW1lLFxuICAgICAgICBpbnRlcmZhY2VzID0gX3JlZjIzLmludGVyZmFjZXMsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjMuZGlyZWN0aXZlcyxcbiAgICAgICAgZmllbGRzID0gX3JlZjIzLmZpZWxkcztcbiAgICByZXR1cm4gam9pbihbJ3R5cGUnLCBuYW1lLCB3cmFwKCdpbXBsZW1lbnRzICcsIGpvaW4oaW50ZXJmYWNlcywgJywgJykpLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpO1xuICB9LFxuXG4gIEZpZWxkRGVmaW5pdGlvbjogZnVuY3Rpb24gRmllbGREZWZpbml0aW9uKF9yZWYyNCkge1xuICAgIHZhciBuYW1lID0gX3JlZjI0Lm5hbWUsXG4gICAgICAgIGFyZ3MgPSBfcmVmMjQuYXJndW1lbnRzLFxuICAgICAgICB0eXBlID0gX3JlZjI0LnR5cGUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjQuZGlyZWN0aXZlcztcbiAgICByZXR1cm4gbmFtZSArIHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpICsgJzogJyArIHR5cGUgKyB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKTtcbiAgfSxcblxuICBJbnB1dFZhbHVlRGVmaW5pdGlvbjogZnVuY3Rpb24gSW5wdXRWYWx1ZURlZmluaXRpb24oX3JlZjI1KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjUubmFtZSxcbiAgICAgICAgdHlwZSA9IF9yZWYyNS50eXBlLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfcmVmMjUuZGVmYXVsdFZhbHVlLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjI1LmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuIGpvaW4oW25hbWUgKyAnOiAnICsgdHlwZSwgd3JhcCgnPSAnLCBkZWZhdWx0VmFsdWUpLCBqb2luKGRpcmVjdGl2ZXMsICcgJyldLCAnICcpO1xuICB9LFxuXG4gIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiBmdW5jdGlvbiBJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbihfcmVmMjYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyNi5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjI2LmRpcmVjdGl2ZXMsXG4gICAgICAgIGZpZWxkcyA9IF9yZWYyNi5maWVsZHM7XG4gICAgcmV0dXJuIGpvaW4oWydpbnRlcmZhY2UnLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpO1xuICB9LFxuXG4gIFVuaW9uVHlwZURlZmluaXRpb246IGZ1bmN0aW9uIFVuaW9uVHlwZURlZmluaXRpb24oX3JlZjI3KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjcubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYyNy5kaXJlY3RpdmVzLFxuICAgICAgICB0eXBlcyA9IF9yZWYyNy50eXBlcztcbiAgICByZXR1cm4gam9pbihbJ3VuaW9uJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCAnPSAnICsgam9pbih0eXBlcywgJyB8ICcpXSwgJyAnKTtcbiAgfSxcblxuICBFbnVtVHlwZURlZmluaXRpb246IGZ1bmN0aW9uIEVudW1UeXBlRGVmaW5pdGlvbihfcmVmMjgpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyOC5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjI4LmRpcmVjdGl2ZXMsXG4gICAgICAgIHZhbHVlcyA9IF9yZWYyOC52YWx1ZXM7XG4gICAgcmV0dXJuIGpvaW4oWydlbnVtJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayh2YWx1ZXMpXSwgJyAnKTtcbiAgfSxcblxuICBFbnVtVmFsdWVEZWZpbml0aW9uOiBmdW5jdGlvbiBFbnVtVmFsdWVEZWZpbml0aW9uKF9yZWYyOSkge1xuICAgIHZhciBuYW1lID0gX3JlZjI5Lm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjkuZGlyZWN0aXZlcztcbiAgICByZXR1cm4gam9pbihbbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKTtcbiAgfSxcblxuICBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uOiBmdW5jdGlvbiBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uKF9yZWYzMCkge1xuICAgIHZhciBuYW1lID0gX3JlZjMwLm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMzAuZGlyZWN0aXZlcyxcbiAgICAgICAgZmllbGRzID0gX3JlZjMwLmZpZWxkcztcbiAgICByZXR1cm4gam9pbihbJ2lucHV0JywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhmaWVsZHMpXSwgJyAnKTtcbiAgfSxcblxuICBUeXBlRXh0ZW5zaW9uRGVmaW5pdGlvbjogZnVuY3Rpb24gVHlwZUV4dGVuc2lvbkRlZmluaXRpb24oX3JlZjMxKSB7XG4gICAgdmFyIGRlZmluaXRpb24gPSBfcmVmMzEuZGVmaW5pdGlvbjtcbiAgICByZXR1cm4gJ2V4dGVuZCAnICsgZGVmaW5pdGlvbjtcbiAgfSxcblxuICBEaXJlY3RpdmVEZWZpbml0aW9uOiBmdW5jdGlvbiBEaXJlY3RpdmVEZWZpbml0aW9uKF9yZWYzMikge1xuICAgIHZhciBuYW1lID0gX3JlZjMyLm5hbWUsXG4gICAgICAgIGFyZ3MgPSBfcmVmMzIuYXJndW1lbnRzLFxuICAgICAgICBsb2NhdGlvbnMgPSBfcmVmMzIubG9jYXRpb25zO1xuICAgIHJldHVybiAnZGlyZWN0aXZlIEAnICsgbmFtZSArIHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpICsgJyBvbiAnICsgam9pbihsb2NhdGlvbnMsICcgfCAnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHaXZlbiBtYXliZUFycmF5LCBwcmludCBhbiBlbXB0eSBzdHJpbmcgaWYgaXQgaXMgbnVsbCBvciBlbXB0eSwgb3RoZXJ3aXNlXG4gKiBwcmludCBhbGwgaXRlbXMgdG9nZXRoZXIgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvciBpZiBwcm92aWRlZFxuICovXG5mdW5jdGlvbiBqb2luKG1heWJlQXJyYXksIHNlcGFyYXRvcikge1xuICByZXR1cm4gbWF5YmVBcnJheSA/IG1heWJlQXJyYXkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0pLmpvaW4oc2VwYXJhdG9yIHx8ICcnKSA6ICcnO1xufVxuXG4vKipcbiAqIEdpdmVuIGFycmF5LCBwcmludCBlYWNoIGl0ZW0gb24gaXRzIG93biBsaW5lLCB3cmFwcGVkIGluIGFuXG4gKiBpbmRlbnRlZCBcInsgfVwiIGJsb2NrLlxuICovXG5mdW5jdGlvbiBibG9jayhhcnJheSkge1xuICByZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoICE9PSAwID8gaW5kZW50KCd7XFxuJyArIGpvaW4oYXJyYXksICdcXG4nKSkgKyAnXFxufScgOiAne30nO1xufVxuXG4vKipcbiAqIElmIG1heWJlU3RyaW5nIGlzIG5vdCBudWxsIG9yIGVtcHR5LCB0aGVuIHdyYXAgd2l0aCBzdGFydCBhbmQgZW5kLCBvdGhlcndpc2VcbiAqIHByaW50IGFuIGVtcHR5IHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gd3JhcChzdGFydCwgbWF5YmVTdHJpbmcsIGVuZCkge1xuICByZXR1cm4gbWF5YmVTdHJpbmcgPyBzdGFydCArIG1heWJlU3RyaW5nICsgKGVuZCB8fCAnJykgOiAnJztcbn1cblxuZnVuY3Rpb24gaW5kZW50KG1heWJlU3RyaW5nKSB7XG4gIHJldHVybiBtYXliZVN0cmluZyAmJiBtYXliZVN0cmluZy5yZXBsYWNlKC9cXG4vZywgJ1xcbiAgJyk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return NetworkStatus; });\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = isNetworkRequestInFlight;\nvar NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n//# sourceMappingURL=networkStatus.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC9jb3JlL25ldHdvcmtTdGF0dXMuanM/MjZmZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0NBQXNDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIE5ldHdvcmtTdGF0dXM7XG4oZnVuY3Rpb24gKE5ldHdvcmtTdGF0dXMpIHtcbiAgICBOZXR3b3JrU3RhdHVzW05ldHdvcmtTdGF0dXNbXCJsb2FkaW5nXCJdID0gMV0gPSBcImxvYWRpbmdcIjtcbiAgICBOZXR3b3JrU3RhdHVzW05ldHdvcmtTdGF0dXNbXCJzZXRWYXJpYWJsZXNcIl0gPSAyXSA9IFwic2V0VmFyaWFibGVzXCI7XG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wiZmV0Y2hNb3JlXCJdID0gM10gPSBcImZldGNoTW9yZVwiO1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInJlZmV0Y2hcIl0gPSA0XSA9IFwicmVmZXRjaFwiO1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInBvbGxcIl0gPSA2XSA9IFwicG9sbFwiO1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInJlYWR5XCJdID0gN10gPSBcInJlYWR5XCI7XG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wiZXJyb3JcIl0gPSA4XSA9IFwiZXJyb3JcIjtcbn0pKE5ldHdvcmtTdGF0dXMgfHwgKE5ldHdvcmtTdGF0dXMgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodChuZXR3b3JrU3RhdHVzKSB7XG4gICAgcmV0dXJuIG5ldHdvcmtTdGF0dXMgPCA3O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29ya1N0YXR1cy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tY2xpZW50L2NvcmUvbmV0d29ya1N0YXR1cy5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__link__ = __webpack_require__(42);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__link__[\"a\"]; });\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return __WEBPACK_IMPORTED_MODULE_0__link__[\"b\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__linkUtils__ = __webpack_require__(19);\n/* unused harmony reexport createOperation */\n/* unused harmony reexport makePromise */\n/* unused harmony reexport toPromise */\n/* unused harmony reexport fromPromise */\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return __WEBPACK_IMPORTED_MODULE_1__linkUtils__[\"c\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_zen_observable_ts__ = __webpack_require__(10);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return __WEBPACK_IMPORTED_MODULE_2_zen_observable_ts__[\"a\"]; });\n\n\n\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmsvbGliL2luZGV4LmpzP2I5ZTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUMyRTtBQUMzRTtBQUNRO0FBQ1IiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vbGluayc7XG5leHBvcnQgeyBjcmVhdGVPcGVyYXRpb24sIG1ha2VQcm9taXNlLCB0b1Byb21pc2UsIGZyb21Qcm9taXNlLCBmcm9tRXJyb3IsIH0gZnJvbSAnLi9saW5rVXRpbHMnO1xuaW1wb3J0IE9ic2VydmFibGUgZnJvbSAnemVuLW9ic2VydmFibGUtdHMnO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmsvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return FetchType; });\nvar FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n//# sourceMappingURL=types.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC9jb3JlL3R5cGVzLmpzPzUzNWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhCQUE4QjtBQUMvQiIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBGZXRjaFR5cGU7XG4oZnVuY3Rpb24gKEZldGNoVHlwZSkge1xuICAgIEZldGNoVHlwZVtGZXRjaFR5cGVbXCJub3JtYWxcIl0gPSAxXSA9IFwibm9ybWFsXCI7XG4gICAgRmV0Y2hUeXBlW0ZldGNoVHlwZVtcInJlZmV0Y2hcIl0gPSAyXSA9IFwicmVmZXRjaFwiO1xuICAgIEZldGNoVHlwZVtGZXRjaFR5cGVbXCJwb2xsXCJdID0gM10gPSBcInBvbGxcIjtcbn0pKEZldGNoVHlwZSB8fCAoRmV0Y2hUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby1jbGllbnQvY29yZS90eXBlcy5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzPzViNjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export hasError */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ObservableQuery; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_utilities__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__networkStatus__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_Observable__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__errors_ApolloError__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__types__ = __webpack_require__(5);\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\n\n\n\nvar hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue &&\n        ((storeValue.graphQLErrors &&\n            storeValue.graphQLErrors.length > 0 &&\n            policy === 'none') ||\n            storeValue.networkError);\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var scheduler = _a.scheduler, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.isCurrentlyPolling = false;\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = scheduler.queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        _this.scheduler = scheduler;\n        _this.queryManager = scheduler.queryManager;\n        _this.observers = [];\n        _this.subscriptionHandles = [];\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            var subscription;\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    if (!that.observers.some(function (obs) { return obs !== observer; })) {\n                        that.queryManager.removeQuery(that.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: function (error) {\n                    reject(error);\n                },\n            };\n            subscription = that.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        if (this.isTornDown) {\n            return {\n                data: this.lastError ? {} : this.lastResult ? this.lastResult.data : {},\n                error: this.lastError,\n                loading: false,\n                networkStatus: __WEBPACK_IMPORTED_MODULE_1__networkStatus__[\"a\" /* NetworkStatus */].error,\n            };\n        }\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        if (hasError(queryStoreValue, this.options.errorPolicy)) {\n            return {\n                data: {},\n                loading: false,\n                networkStatus: queryStoreValue.networkStatus,\n                error: new __WEBPACK_IMPORTED_MODULE_3__errors_ApolloError__[\"a\" /* ApolloError */]({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }),\n            };\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryLoading = !queryStoreValue ||\n            queryStoreValue.networkStatus === __WEBPACK_IMPORTED_MODULE_1__networkStatus__[\"a\" /* NetworkStatus */].loading;\n        var loading = (this.options.fetchPolicy === 'network-only' && queryLoading) ||\n            (partial && this.options.fetchPolicy !== 'cache-only');\n        var networkStatus;\n        if (queryStoreValue) {\n            networkStatus = queryStoreValue.networkStatus;\n        }\n        else {\n            networkStatus = loading ? __WEBPACK_IMPORTED_MODULE_1__networkStatus__[\"a\" /* NetworkStatus */].loading : __WEBPACK_IMPORTED_MODULE_1__networkStatus__[\"a\" /* NetworkStatus */].ready;\n        }\n        var result = {\n            data: data,\n            loading: Object(__WEBPACK_IMPORTED_MODULE_1__networkStatus__[\"b\" /* isNetworkRequestInFlight */])(networkStatus),\n            networkStatus: networkStatus,\n        };\n        if (queryStoreValue &&\n            queryStoreValue.graphQLErrors &&\n            this.options.errorPolicy === 'all') {\n            result.errors = queryStoreValue.graphQLErrors;\n        }\n        if (!partial) {\n            var stale = false;\n            this.lastResult = __assign({}, result, { stale: stale });\n        }\n        return __assign({}, result, { partial: partial });\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        if (this.options.fetchPolicy === 'cache-only') {\n            return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (!Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"q\" /* isEqual */])(this.variables, variables)) {\n            this.variables = __assign({}, this.variables, variables);\n        }\n        if (!Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"q\" /* isEqual */])(this.options.variables, this.variables)) {\n            this.options.variables = __assign({}, this.options.variables, this.variables);\n        }\n        var combinedOptions = __assign({}, this.options, { fetchPolicy: 'network-only' });\n        return this.queryManager\n            .fetchQuery(this.queryId, combinedOptions, __WEBPACK_IMPORTED_MODULE_4__types__[\"a\" /* FetchType */].refetch)\n            .then(function (result) { return Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"x\" /* maybeDeepFreeze */])(result); });\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        if (!fetchMoreOptions.updateQuery) {\n            throw new Error('updateQuery option is required. This function defines how to update the query data with the new results.');\n        }\n        return Promise.resolve()\n            .then(function () {\n            var qid = _this.queryManager.generateQueryId();\n            var combinedOptions;\n            if (fetchMoreOptions.query) {\n                combinedOptions = fetchMoreOptions;\n            }\n            else {\n                combinedOptions = __assign({}, _this.options, fetchMoreOptions, { variables: __assign({}, _this.variables, fetchMoreOptions.variables) });\n            }\n            combinedOptions.fetchPolicy = 'network-only';\n            return _this.queryManager.fetchQuery(qid, combinedOptions, __WEBPACK_IMPORTED_MODULE_4__types__[\"a\" /* FetchType */].normal, _this.queryId);\n        })\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult, _a) {\n                var variables = _a.variables;\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: variables,\n                });\n            });\n            return fetchMoreResult;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (data) {\n                if (options.updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return options.updateQuery(previous, {\n                            subscriptionData: data,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                console.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptionHandles.push(subscription);\n        return function () {\n            var i = _this.subscriptionHandles.indexOf(subscription);\n            if (i >= 0) {\n                _this.subscriptionHandles.splice(i, 1);\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldOptions = this.options;\n        this.options = __assign({}, this.options, opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var tryFetch = (oldOptions.fetchPolicy !== 'network-only' &&\n            opts.fetchPolicy === 'network-only') ||\n            (oldOptions.fetchPolicy === 'cache-only' &&\n                opts.fetchPolicy !== 'cache-only') ||\n            (oldOptions.fetchPolicy === 'standby' &&\n                opts.fetchPolicy !== 'standby') ||\n            false;\n        return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        var newVariables = __assign({}, this.variables, variables);\n        if (Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"q\" /* isEqual */])(newVariables, this.variables) && !tryFetch) {\n            if (this.observers.length === 0 || !fetchResults) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.result();\n        }\n        else {\n            this.lastVariables = this.variables;\n            this.variables = newVariables;\n            this.options.variables = newVariables;\n            if (this.observers.length === 0) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.queryManager\n                .fetchQuery(this.queryId, __assign({}, this.options, { variables: this.variables }))\n                .then(function (result) { return Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"x\" /* maybeDeepFreeze */])(result); });\n        }\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var _a = this.queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"D\" /* tryFunctionOrLogError */])(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            this.queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        if (this.isCurrentlyPolling) {\n            this.scheduler.stopPollingQuery(this.queryId);\n            this.options.pollInterval = undefined;\n            this.isCurrentlyPolling = false;\n        }\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        if (this.options.fetchPolicy === 'cache-first' ||\n            this.options.fetchPolicy === 'cache-only') {\n            throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n        }\n        if (this.isCurrentlyPolling) {\n            this.scheduler.stopPollingQuery(this.queryId);\n            this.isCurrentlyPolling = false;\n        }\n        this.options.pollInterval = pollInterval;\n        this.isCurrentlyPolling = true;\n        this.scheduler.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        if (observer._subscription &&\n            observer._subscription._observer &&\n            !observer._subscription._observer.error) {\n            observer._subscription._observer.error = function (error) {\n                console.error('Unhandled error', error.message, error.stack);\n            };\n        }\n        this.observers.push(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (this.observers.length === 1)\n            this.setUpQuery();\n        return function () {\n            _this.observers = _this.observers.filter(function (obs) { return obs !== observer; });\n            if (_this.observers.length === 0) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        if (this.shouldSubscribe) {\n            this.queryManager.addObservableQuery(this.queryId, this);\n        }\n        if (!!this.options.pollInterval) {\n            if (this.options.fetchPolicy === 'cache-first' ||\n                this.options.fetchPolicy === 'cache-only') {\n                throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n            }\n            this.isCurrentlyPolling = true;\n            this.scheduler.startPollingQuery(this.options, this.queryId);\n        }\n        var observer = {\n            next: function (result) {\n                _this.lastResult = result;\n                _this.observers.forEach(function (obs) { return obs.next && obs.next(result); });\n            },\n            error: function (error) {\n                _this.lastError = error;\n                _this.observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n        };\n        this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        this.isTornDown = true;\n        if (this.isCurrentlyPolling) {\n            this.scheduler.stopPollingQuery(this.queryId);\n            this.isCurrentlyPolling = false;\n        }\n        this.subscriptionHandles.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptionHandles = [];\n        this.queryManager.removeObservableQuery(this.queryId);\n        this.queryManager.stopQuery(this.queryId);\n        this.observers = [];\n    };\n    return ObservableQuery;\n}(__WEBPACK_IMPORTED_MODULE_2__util_Observable__[\"a\" /* Observable */]));\n\n//# sourceMappingURL=ObservableQuery.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC9jb3JlL09ic2VydmFibGVRdWVyeS5qcz9jNDI4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQUE7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCLHNDQUFzQyxpQkFBaUIsRUFBRTtBQUNuRix5QkFBeUIsdURBQXVEO0FBQ2hGO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMkQ7QUFDVDtBQUM3QjtBQUNDO0FBQ0Y7QUFDcEI7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCx5QkFBeUIsRUFBRTtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDhDQUE4QztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxXQUFXLGVBQWU7QUFDbkU7QUFDQSwwQkFBMEIsV0FBVyxtQkFBbUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0EseUNBQXlDLGlCQUFpQiw4QkFBOEI7QUFDeEY7QUFDQTtBQUNBLHFDQUFxQyxrR0FBZ0MsRUFBRTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLG9DQUFvQyx1QkFBdUIsZ0RBQWdEO0FBQ3hKO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxrQkFBa0I7QUFDcEQsc0NBQXNDLHFCQUFxQjtBQUMzRDtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0EsdURBQXVELGtCQUFrQixFQUFFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsa0JBQWtCLEVBQUU7QUFDM0U7QUFDQTtBQUNBLHFEQUFxRCxpQkFBaUIsNEJBQTRCO0FBQ2xHLHlDQUF5QyxrR0FBZ0MsRUFBRTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVCQUF1QjtBQUNqRSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLHlCQUF5QixFQUFFO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxxQ0FBcUMsRUFBRTtBQUMvRixhQUFhO0FBQ2I7QUFDQTtBQUNBLHdEQUF3RCxzQ0FBc0MsRUFBRTtBQUNoRyxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELDBCQUEwQixFQUFFO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTztBQUNSIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IHsgaXNFcXVhbCwgdHJ5RnVuY3Rpb25PckxvZ0Vycm9yLCBtYXliZURlZXBGcmVlemUsIH0gZnJvbSAnYXBvbGxvLXV0aWxpdGllcyc7XG5pbXBvcnQgeyBOZXR3b3JrU3RhdHVzLCBpc05ldHdvcmtSZXF1ZXN0SW5GbGlnaHQgfSBmcm9tICcuL25ldHdvcmtTdGF0dXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBBcG9sbG9FcnJvciB9IGZyb20gJy4uL2Vycm9ycy9BcG9sbG9FcnJvcic7XG5pbXBvcnQgeyBGZXRjaFR5cGUgfSBmcm9tICcuL3R5cGVzJztcbmV4cG9ydCB2YXIgaGFzRXJyb3IgPSBmdW5jdGlvbiAoc3RvcmVWYWx1ZSwgcG9saWN5KSB7XG4gICAgaWYgKHBvbGljeSA9PT0gdm9pZCAwKSB7IHBvbGljeSA9ICdub25lJzsgfVxuICAgIHJldHVybiBzdG9yZVZhbHVlICYmXG4gICAgICAgICgoc3RvcmVWYWx1ZS5ncmFwaFFMRXJyb3JzICYmXG4gICAgICAgICAgICBzdG9yZVZhbHVlLmdyYXBoUUxFcnJvcnMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgcG9saWN5ID09PSAnbm9uZScpIHx8XG4gICAgICAgICAgICBzdG9yZVZhbHVlLm5ldHdvcmtFcnJvcik7XG59O1xudmFyIE9ic2VydmFibGVRdWVyeSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9ic2VydmFibGVRdWVyeSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlUXVlcnkoX2EpIHtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlciwgb3B0aW9ucyA9IF9hLm9wdGlvbnMsIF9iID0gX2Euc2hvdWxkU3Vic2NyaWJlLCBzaG91bGRTdWJzY3JpYmUgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iO1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5vblN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgIH0pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzQ3VycmVudGx5UG9sbGluZyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1Rvcm5Eb3duID0gZmFsc2U7XG4gICAgICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBfdGhpcy52YXJpYWJsZXMgPSBvcHRpb25zLnZhcmlhYmxlcyB8fCB7fTtcbiAgICAgICAgX3RoaXMucXVlcnlJZCA9IHNjaGVkdWxlci5xdWVyeU1hbmFnZXIuZ2VuZXJhdGVRdWVyeUlkKCk7XG4gICAgICAgIF90aGlzLnNob3VsZFN1YnNjcmliZSA9IHNob3VsZFN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy5xdWVyeU1hbmFnZXIgPSBzY2hlZHVsZXIucXVlcnlNYW5hZ2VyO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9uSGFuZGxlcyA9IFtdO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUucmVzdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoYXQub2JzZXJ2ZXJzLnNvbWUoZnVuY3Rpb24gKG9icykgeyByZXR1cm4gb2JzICE9PSBvYnNlcnZlcjsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQucXVlcnlNYW5hZ2VyLnJlbW92ZVF1ZXJ5KHRoYXQucXVlcnlJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5jdXJyZW50UmVzdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1Rvcm5Eb3duKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMubGFzdEVycm9yID8ge30gOiB0aGlzLmxhc3RSZXN1bHQgPyB0aGlzLmxhc3RSZXN1bHQuZGF0YSA6IHt9LFxuICAgICAgICAgICAgICAgIGVycm9yOiB0aGlzLmxhc3RFcnJvcixcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrU3RhdHVzOiBOZXR3b3JrU3RhdHVzLmVycm9yLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcXVlcnlTdG9yZVZhbHVlID0gdGhpcy5xdWVyeU1hbmFnZXIucXVlcnlTdG9yZS5nZXQodGhpcy5xdWVyeUlkKTtcbiAgICAgICAgaWYgKGhhc0Vycm9yKHF1ZXJ5U3RvcmVWYWx1ZSwgdGhpcy5vcHRpb25zLmVycm9yUG9saWN5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrU3RhdHVzOiBxdWVyeVN0b3JlVmFsdWUubmV0d29ya1N0YXR1cyxcbiAgICAgICAgICAgICAgICBlcnJvcjogbmV3IEFwb2xsb0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhRTEVycm9yczogcXVlcnlTdG9yZVZhbHVlLmdyYXBoUUxFcnJvcnMsXG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcmtFcnJvcjogcXVlcnlTdG9yZVZhbHVlLm5ldHdvcmtFcnJvcixcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gdGhpcy5xdWVyeU1hbmFnZXIuZ2V0Q3VycmVudFF1ZXJ5UmVzdWx0KHRoaXMpLCBkYXRhID0gX2EuZGF0YSwgcGFydGlhbCA9IF9hLnBhcnRpYWw7XG4gICAgICAgIHZhciBxdWVyeUxvYWRpbmcgPSAhcXVlcnlTdG9yZVZhbHVlIHx8XG4gICAgICAgICAgICBxdWVyeVN0b3JlVmFsdWUubmV0d29ya1N0YXR1cyA9PT0gTmV0d29ya1N0YXR1cy5sb2FkaW5nO1xuICAgICAgICB2YXIgbG9hZGluZyA9ICh0aGlzLm9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09ICduZXR3b3JrLW9ubHknICYmIHF1ZXJ5TG9hZGluZykgfHxcbiAgICAgICAgICAgIChwYXJ0aWFsICYmIHRoaXMub3B0aW9ucy5mZXRjaFBvbGljeSAhPT0gJ2NhY2hlLW9ubHknKTtcbiAgICAgICAgdmFyIG5ldHdvcmtTdGF0dXM7XG4gICAgICAgIGlmIChxdWVyeVN0b3JlVmFsdWUpIHtcbiAgICAgICAgICAgIG5ldHdvcmtTdGF0dXMgPSBxdWVyeVN0b3JlVmFsdWUubmV0d29ya1N0YXR1cztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ldHdvcmtTdGF0dXMgPSBsb2FkaW5nID8gTmV0d29ya1N0YXR1cy5sb2FkaW5nIDogTmV0d29ya1N0YXR1cy5yZWFkeTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIGxvYWRpbmc6IGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodChuZXR3b3JrU3RhdHVzKSxcbiAgICAgICAgICAgIG5ldHdvcmtTdGF0dXM6IG5ldHdvcmtTdGF0dXMsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChxdWVyeVN0b3JlVmFsdWUgJiZcbiAgICAgICAgICAgIHF1ZXJ5U3RvcmVWYWx1ZS5ncmFwaFFMRXJyb3JzICYmXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZXJyb3JQb2xpY3kgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICByZXN1bHQuZXJyb3JzID0gcXVlcnlTdG9yZVZhbHVlLmdyYXBoUUxFcnJvcnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXJ0aWFsKSB7XG4gICAgICAgICAgICB2YXIgc3RhbGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMubGFzdFJlc3VsdCA9IF9fYXNzaWduKHt9LCByZXN1bHQsIHsgc3RhbGU6IHN0YWxlIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgcmVzdWx0LCB7IHBhcnRpYWw6IHBhcnRpYWwgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLmdldExhc3RSZXN1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RSZXN1bHQ7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLmdldExhc3RFcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdEVycm9yO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5yZXNldExhc3RSZXN1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxldGUgdGhpcy5sYXN0UmVzdWx0O1xuICAgICAgICBkZWxldGUgdGhpcy5sYXN0RXJyb3I7XG4gICAgICAgIHRoaXMuaXNUb3JuRG93biA9IGZhbHNlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5yZWZldGNoID0gZnVuY3Rpb24gKHZhcmlhYmxlcykge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZldGNoUG9saWN5ID09PSAnY2FjaGUtb25seScpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2NhY2hlLW9ubHkgZmV0Y2hQb2xpY3kgb3B0aW9uIHNob3VsZCBub3QgYmUgdXNlZCB0b2dldGhlciB3aXRoIHF1ZXJ5IHJlZmV0Y2guJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbCh0aGlzLnZhcmlhYmxlcywgdmFyaWFibGVzKSkge1xuICAgICAgICAgICAgdGhpcy52YXJpYWJsZXMgPSBfX2Fzc2lnbih7fSwgdGhpcy52YXJpYWJsZXMsIHZhcmlhYmxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VxdWFsKHRoaXMub3B0aW9ucy52YXJpYWJsZXMsIHRoaXMudmFyaWFibGVzKSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnZhcmlhYmxlcyA9IF9fYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMudmFyaWFibGVzLCB0aGlzLnZhcmlhYmxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbWJpbmVkT3B0aW9ucyA9IF9fYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIHsgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeU1hbmFnZXJcbiAgICAgICAgICAgIC5mZXRjaFF1ZXJ5KHRoaXMucXVlcnlJZCwgY29tYmluZWRPcHRpb25zLCBGZXRjaFR5cGUucmVmZXRjaClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIG1heWJlRGVlcEZyZWV6ZShyZXN1bHQpOyB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUuZmV0Y2hNb3JlID0gZnVuY3Rpb24gKGZldGNoTW9yZU9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCFmZXRjaE1vcmVPcHRpb25zLnVwZGF0ZVF1ZXJ5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VwZGF0ZVF1ZXJ5IG9wdGlvbiBpcyByZXF1aXJlZC4gVGhpcyBmdW5jdGlvbiBkZWZpbmVzIGhvdyB0byB1cGRhdGUgdGhlIHF1ZXJ5IGRhdGEgd2l0aCB0aGUgbmV3IHJlc3VsdHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcWlkID0gX3RoaXMucXVlcnlNYW5hZ2VyLmdlbmVyYXRlUXVlcnlJZCgpO1xuICAgICAgICAgICAgdmFyIGNvbWJpbmVkT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChmZXRjaE1vcmVPcHRpb25zLnF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgY29tYmluZWRPcHRpb25zID0gZmV0Y2hNb3JlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbWJpbmVkT3B0aW9ucyA9IF9fYXNzaWduKHt9LCBfdGhpcy5vcHRpb25zLCBmZXRjaE1vcmVPcHRpb25zLCB7IHZhcmlhYmxlczogX19hc3NpZ24oe30sIF90aGlzLnZhcmlhYmxlcywgZmV0Y2hNb3JlT3B0aW9ucy52YXJpYWJsZXMpIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tYmluZWRPcHRpb25zLmZldGNoUG9saWN5ID0gJ25ldHdvcmstb25seSc7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucXVlcnlNYW5hZ2VyLmZldGNoUXVlcnkocWlkLCBjb21iaW5lZE9wdGlvbnMsIEZldGNoVHlwZS5ub3JtYWwsIF90aGlzLnF1ZXJ5SWQpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGZldGNoTW9yZVJlc3VsdCkge1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlUXVlcnkoZnVuY3Rpb24gKHByZXZpb3VzUmVzdWx0LCBfYSkge1xuICAgICAgICAgICAgICAgIHZhciB2YXJpYWJsZXMgPSBfYS52YXJpYWJsZXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoTW9yZU9wdGlvbnMudXBkYXRlUXVlcnkocHJldmlvdXNSZXN1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hNb3JlUmVzdWx0OiBmZXRjaE1vcmVSZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmZXRjaE1vcmVSZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5zdWJzY3JpYmVUb01vcmUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5xdWVyeU1hbmFnZXJcbiAgICAgICAgICAgIC5zdGFydEdyYXBoUUxTdWJzY3JpcHRpb24oe1xuICAgICAgICAgICAgcXVlcnk6IG9wdGlvbnMuZG9jdW1lbnQsXG4gICAgICAgICAgICB2YXJpYWJsZXM6IG9wdGlvbnMudmFyaWFibGVzLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnVwZGF0ZVF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVF1ZXJ5KGZ1bmN0aW9uIChwcmV2aW91cywgX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YXJpYWJsZXMgPSBfYS52YXJpYWJsZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy51cGRhdGVRdWVyeShwcmV2aW91cywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbkRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMub25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgR3JhcGhRTCBzdWJzY3JpcHRpb24gZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uSGFuZGxlcy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaSA9IF90aGlzLnN1YnNjcmlwdGlvbkhhbmRsZXMuaW5kZXhPZihzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbkhhbmRsZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgICAgICAgdmFyIG9sZE9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IF9fYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIG9wdHMpO1xuICAgICAgICBpZiAob3B0cy5wb2xsSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRQb2xsaW5nKG9wdHMucG9sbEludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRzLnBvbGxJbnRlcnZhbCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wUG9sbGluZygpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0cnlGZXRjaCA9IChvbGRPcHRpb25zLmZldGNoUG9saWN5ICE9PSAnbmV0d29yay1vbmx5JyAmJlxuICAgICAgICAgICAgb3B0cy5mZXRjaFBvbGljeSA9PT0gJ25ldHdvcmstb25seScpIHx8XG4gICAgICAgICAgICAob2xkT3B0aW9ucy5mZXRjaFBvbGljeSA9PT0gJ2NhY2hlLW9ubHknICYmXG4gICAgICAgICAgICAgICAgb3B0cy5mZXRjaFBvbGljeSAhPT0gJ2NhY2hlLW9ubHknKSB8fFxuICAgICAgICAgICAgKG9sZE9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09ICdzdGFuZGJ5JyAmJlxuICAgICAgICAgICAgICAgIG9wdHMuZmV0Y2hQb2xpY3kgIT09ICdzdGFuZGJ5JykgfHxcbiAgICAgICAgICAgIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRWYXJpYWJsZXModGhpcy5vcHRpb25zLnZhcmlhYmxlcywgdHJ5RmV0Y2gsIG9wdHMuZmV0Y2hSZXN1bHRzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUuc2V0VmFyaWFibGVzID0gZnVuY3Rpb24gKHZhcmlhYmxlcywgdHJ5RmV0Y2gsIGZldGNoUmVzdWx0cykge1xuICAgICAgICBpZiAodHJ5RmV0Y2ggPT09IHZvaWQgMCkgeyB0cnlGZXRjaCA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChmZXRjaFJlc3VsdHMgPT09IHZvaWQgMCkgeyBmZXRjaFJlc3VsdHMgPSB0cnVlOyB9XG4gICAgICAgIHRoaXMuaXNUb3JuRG93biA9IGZhbHNlO1xuICAgICAgICB2YXIgbmV3VmFyaWFibGVzID0gX19hc3NpZ24oe30sIHRoaXMudmFyaWFibGVzLCB2YXJpYWJsZXMpO1xuICAgICAgICBpZiAoaXNFcXVhbChuZXdWYXJpYWJsZXMsIHRoaXMudmFyaWFibGVzKSAmJiAhdHJ5RmV0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9ic2VydmVycy5sZW5ndGggPT09IDAgfHwgIWZldGNoUmVzdWx0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gcmVzb2x2ZSgpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3VsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXN0VmFyaWFibGVzID0gdGhpcy52YXJpYWJsZXM7XG4gICAgICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IG5ld1ZhcmlhYmxlcztcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YXJpYWJsZXMgPSBuZXdWYXJpYWJsZXM7XG4gICAgICAgICAgICBpZiAodGhpcy5vYnNlcnZlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiByZXNvbHZlKCk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlNYW5hZ2VyXG4gICAgICAgICAgICAgICAgLmZldGNoUXVlcnkodGhpcy5xdWVyeUlkLCBfX2Fzc2lnbih7fSwgdGhpcy5vcHRpb25zLCB7IHZhcmlhYmxlczogdGhpcy52YXJpYWJsZXMgfSkpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gbWF5YmVEZWVwRnJlZXplKHJlc3VsdCk7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLnVwZGF0ZVF1ZXJ5ID0gZnVuY3Rpb24gKG1hcEZuKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucXVlcnlNYW5hZ2VyLmdldFF1ZXJ5V2l0aFByZXZpb3VzUmVzdWx0KHRoaXMucXVlcnlJZCksIHByZXZpb3VzUmVzdWx0ID0gX2EucHJldmlvdXNSZXN1bHQsIHZhcmlhYmxlcyA9IF9hLnZhcmlhYmxlcywgZG9jdW1lbnQgPSBfYS5kb2N1bWVudDtcbiAgICAgICAgdmFyIG5ld1Jlc3VsdCA9IHRyeUZ1bmN0aW9uT3JMb2dFcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwRm4ocHJldmlvdXNSZXN1bHQsIHsgdmFyaWFibGVzOiB2YXJpYWJsZXMgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobmV3UmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5TWFuYWdlci5kYXRhU3RvcmUubWFya1VwZGF0ZVF1ZXJ5UmVzdWx0KGRvY3VtZW50LCB2YXJpYWJsZXMsIG5ld1Jlc3VsdCk7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5TWFuYWdlci5icm9hZGNhc3RRdWVyaWVzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUuc3RvcFBvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ3VycmVudGx5UG9sbGluZykge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIuc3RvcFBvbGxpbmdRdWVyeSh0aGlzLnF1ZXJ5SWQpO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBvbGxJbnRlcnZhbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuaXNDdXJyZW50bHlQb2xsaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUuc3RhcnRQb2xsaW5nID0gZnVuY3Rpb24gKHBvbGxJbnRlcnZhbCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZldGNoUG9saWN5ID09PSAnY2FjaGUtZmlyc3QnIHx8XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09ICdjYWNoZS1vbmx5Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyaWVzIHRoYXQgc3BlY2lmeSB0aGUgY2FjaGUtZmlyc3QgYW5kIGNhY2hlLW9ubHkgZmV0Y2hQb2xpY2llcyBjYW5ub3QgYWxzbyBiZSBwb2xsaW5nIHF1ZXJpZXMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNDdXJyZW50bHlQb2xsaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlci5zdG9wUG9sbGluZ1F1ZXJ5KHRoaXMucXVlcnlJZCk7XG4gICAgICAgICAgICB0aGlzLmlzQ3VycmVudGx5UG9sbGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5wb2xsSW50ZXJ2YWwgPSBwb2xsSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMuaXNDdXJyZW50bHlQb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIuc3RhcnRQb2xsaW5nUXVlcnkodGhpcy5vcHRpb25zLCB0aGlzLnF1ZXJ5SWQpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5vblN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAob2JzZXJ2ZXIuX3N1YnNjcmlwdGlvbiAmJlxuICAgICAgICAgICAgb2JzZXJ2ZXIuX3N1YnNjcmlwdGlvbi5fb2JzZXJ2ZXIgJiZcbiAgICAgICAgICAgICFvYnNlcnZlci5fc3Vic2NyaXB0aW9uLl9vYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuX3N1YnNjcmlwdGlvbi5fb2JzZXJ2ZXIuZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgZXJyb3InLCBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjayk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCAmJiB0aGlzLmxhc3RSZXN1bHQpXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHRoaXMubGFzdFJlc3VsdCk7XG4gICAgICAgIGlmIChvYnNlcnZlci5lcnJvciAmJiB0aGlzLmxhc3RFcnJvcilcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKHRoaXMubGFzdEVycm9yKTtcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgIHRoaXMuc2V0VXBRdWVyeSgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMub2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnMgIT09IG9ic2VydmVyOyB9KTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vYnNlcnZlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudGVhckRvd25RdWVyeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5zZXRVcFF1ZXJ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5zaG91bGRTdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMucXVlcnlNYW5hZ2VyLmFkZE9ic2VydmFibGVRdWVyeSh0aGlzLnF1ZXJ5SWQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghIXRoaXMub3B0aW9ucy5wb2xsSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09ICdjYWNoZS1maXJzdCcgfHxcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09ICdjYWNoZS1vbmx5Jykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVlcmllcyB0aGF0IHNwZWNpZnkgdGhlIGNhY2hlLWZpcnN0IGFuZCBjYWNoZS1vbmx5IGZldGNoUG9saWNpZXMgY2Fubm90IGFsc28gYmUgcG9sbGluZyBxdWVyaWVzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pc0N1cnJlbnRseVBvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIuc3RhcnRQb2xsaW5nUXVlcnkodGhpcy5vcHRpb25zLCB0aGlzLnF1ZXJ5SWQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYnNlcnZlciA9IHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5sYXN0UmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIF90aGlzLm9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnMpIHsgcmV0dXJuIG9icy5uZXh0ICYmIG9icy5uZXh0KHJlc3VsdCk7IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5sYXN0RXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICBfdGhpcy5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnMuZXJyb3IgJiYgb2JzLmVycm9yKGVycm9yKTsgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnF1ZXJ5TWFuYWdlci5zdGFydFF1ZXJ5KHRoaXMucXVlcnlJZCwgdGhpcy5vcHRpb25zLCB0aGlzLnF1ZXJ5TWFuYWdlci5xdWVyeUxpc3RlbmVyRm9yT2JzZXJ2ZXIodGhpcy5xdWVyeUlkLCB0aGlzLm9wdGlvbnMsIG9ic2VydmVyKSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLnRlYXJEb3duUXVlcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNUb3JuRG93biA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmlzQ3VycmVudGx5UG9sbGluZykge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIuc3RvcFBvbGxpbmdRdWVyeSh0aGlzLnF1ZXJ5SWQpO1xuICAgICAgICAgICAgdGhpcy5pc0N1cnJlbnRseVBvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbkhhbmRsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIudW5zdWJzY3JpYmUoKTsgfSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uSGFuZGxlcyA9IFtdO1xuICAgICAgICB0aGlzLnF1ZXJ5TWFuYWdlci5yZW1vdmVPYnNlcnZhYmxlUXVlcnkodGhpcy5xdWVyeUlkKTtcbiAgICAgICAgdGhpcy5xdWVyeU1hbmFnZXIuc3RvcFF1ZXJ5KHRoaXMucXVlcnlJZCk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZVF1ZXJ5O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlUXVlcnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGVRdWVyeS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tY2xpZW50L2NvcmUvT2JzZXJ2YWJsZVF1ZXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export isScalarValue */\n/* unused harmony export isNumberValue */\n/* harmony export (immutable) */ __webpack_exports__[\"j\"] = valueToObjectRepresentation;\n/* harmony export (immutable) */ __webpack_exports__[\"h\"] = storeKeyNameFromField;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = getStoreKeyName;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = argumentsObjectFromField;\n/* harmony export (immutable) */ __webpack_exports__[\"g\"] = resultKeyNameFromField;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = isField;\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = isInlineFragment;\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = isIdValue;\n/* harmony export (immutable) */ __webpack_exports__[\"i\"] = toIdValue;\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = isJsonValue;\n/* unused harmony export valueFromNode */\nfunction isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nfunction isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw new Error(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\" is not supported.\\n                    Use variables instead of inline arguments to overcome this limitation.\");\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nfunction getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = JSON.stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nfunction isIdValue(idObject) {\n    return idObject && idObject.type === 'id';\n}\nfunction toIdValue(id, generated) {\n    if (generated === void 0) { generated = false; }\n    return {\n        type: 'id',\n        id: id,\n        generated: generated,\n    };\n}\nfunction isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw new Error(\"Variable nodes are not supported by valueFromNode\");\n}\nfunction valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n//# sourceMappingURL=storeUtils.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export getEnv */\n/* unused harmony export isEnv */\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = isProduction;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = isDevelopment;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = isTest;\nfunction getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    return 'development';\n}\nfunction isEnv(env) {\n    return getEnv() === env;\n}\nfunction isProduction() {\n    return isEnv('production') === true;\n}\nfunction isDevelopment() {\n    return isEnv('development') === true;\n}\nfunction isTest() {\n    return isEnv('test') === true;\n}\n//# sourceMappingURL=environment.js.map\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(6)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvdXRpbC9lbnZpcm9ubWVudC5qcz85OTI0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRFbnYoKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG4gICAgfVxuICAgIHJldHVybiAnZGV2ZWxvcG1lbnQnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRW52KGVudikge1xuICAgIHJldHVybiBnZXRFbnYoKSA9PT0gZW52O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvZHVjdGlvbigpIHtcbiAgICByZXR1cm4gaXNFbnYoJ3Byb2R1Y3Rpb24nKSA9PT0gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0RldmVsb3BtZW50KCkge1xuICAgIHJldHVybiBpc0VudignZGV2ZWxvcG1lbnQnKSA9PT0gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Rlc3QoKSB7XG4gICAgcmV0dXJuIGlzRW52KCd0ZXN0JykgPT09IHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnZpcm9ubWVudC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tdXRpbGl0aWVzL2xpYi91dGlsL2Vudmlyb25tZW50LmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__zenObservable__ = __webpack_require__(18);\n/* unused harmony namespace reexport */\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_0__zenObservable__[\"a\" /* Observable */]);\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUtdHMvbGliL2luZGV4LmpzPzliODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBcUI7QUFDckI7QUFDQTtBQUNBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vemVuT2JzZXJ2YWJsZSc7XG5leHBvcnQgKiBmcm9tICcuL3plbk9ic2VydmFibGUnO1xuZXhwb3J0IGRlZmF1bHQgT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3plbi1vYnNlcnZhYmxlLXRzL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"b\"] = isApolloError;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ApolloError; });\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nfunction isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\n//# sourceMappingURL=ApolloError.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC9lcnJvcnMvQXBvbGxvRXJyb3IuanM/N2FkYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQUNBO0FBQ0EsVUFBVSxnQkFBZ0Isc0NBQXNDLGlCQUFpQixFQUFFO0FBQ25GLHlCQUF5Qix1REFBdUQ7QUFDaEY7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTztBQUNSIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5leHBvcnQgZnVuY3Rpb24gaXNBcG9sbG9FcnJvcihlcnIpIHtcbiAgICByZXR1cm4gZXJyLmhhc093blByb3BlcnR5KCdncmFwaFFMRXJyb3JzJyk7XG59XG52YXIgZ2VuZXJhdGVFcnJvck1lc3NhZ2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnJztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlcnIuZ3JhcGhRTEVycm9ycykgJiYgZXJyLmdyYXBoUUxFcnJvcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGVyci5ncmFwaFFMRXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGdyYXBoUUxFcnJvcikge1xuICAgICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdyYXBoUUxFcnJvclxuICAgICAgICAgICAgICAgID8gZ3JhcGhRTEVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA6ICdFcnJvciBtZXNzYWdlIG5vdCBmb3VuZC4nO1xuICAgICAgICAgICAgbWVzc2FnZSArPSBcIkdyYXBoUUwgZXJyb3I6IFwiICsgZXJyb3JNZXNzYWdlICsgXCJcXG5cIjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChlcnIubmV0d29ya0Vycm9yKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gJ05ldHdvcmsgZXJyb3I6ICcgKyBlcnIubmV0d29ya0Vycm9yLm1lc3NhZ2UgKyAnXFxuJztcbiAgICB9XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZSgvXFxuJC8sICcnKTtcbiAgICByZXR1cm4gbWVzc2FnZTtcbn07XG52YXIgQXBvbGxvRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBcG9sbG9FcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBcG9sbG9FcnJvcihfYSkge1xuICAgICAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IF9hLmdyYXBoUUxFcnJvcnMsIG5ldHdvcmtFcnJvciA9IF9hLm5ldHdvcmtFcnJvciwgZXJyb3JNZXNzYWdlID0gX2EuZXJyb3JNZXNzYWdlLCBleHRyYUluZm8gPSBfYS5leHRyYUluZm87XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVycm9yTWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZ3JhcGhRTEVycm9ycyA9IGdyYXBoUUxFcnJvcnMgfHwgW107XG4gICAgICAgIF90aGlzLm5ldHdvcmtFcnJvciA9IG5ldHdvcmtFcnJvciB8fCBudWxsO1xuICAgICAgICBpZiAoIWVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgX3RoaXMubWVzc2FnZSA9IGdlbmVyYXRlRXJyb3JNZXNzYWdlKF90aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZXh0cmFJbmZvID0gZXh0cmFJbmZvO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBBcG9sbG9FcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEFwb2xsb0Vycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BcG9sbG9FcnJvci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tY2xpZW50L2Vycm9ycy9BcG9sbG9FcnJvci5qc1xuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ObjectCache; });\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = defaultNormalizedCacheFactory;\nvar ObjectCache = (function () {\n    function ObjectCache(data) {\n        if (data === void 0) { data = {}; }\n        this.data = data;\n    }\n    ObjectCache.prototype.toObject = function () {\n        return this.data;\n    };\n    ObjectCache.prototype.get = function (dataId) {\n        return this.data[dataId];\n    };\n    ObjectCache.prototype.set = function (dataId, value) {\n        this.data[dataId] = value;\n    };\n    ObjectCache.prototype.delete = function (dataId) {\n        this.data[dataId] = undefined;\n    };\n    ObjectCache.prototype.clear = function () {\n        this.data = {};\n    };\n    ObjectCache.prototype.replace = function (newData) {\n        this.data = newData || {};\n    };\n    return ObjectCache;\n}());\n\nfunction defaultNormalizedCacheFactory(seed) {\n    return new ObjectCache(seed);\n}\n//# sourceMappingURL=objectCache.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlLWlubWVtb3J5L2xpYi9vYmplY3RDYWNoZS5qcz8xM2Y0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUFBO0FBQ0E7QUFDQSw4QkFBOEIsV0FBVztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ087QUFDUjtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBPYmplY3RDYWNoZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JqZWN0Q2FjaGUoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdm9pZCAwKSB7IGRhdGEgPSB7fTsgfVxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBPYmplY3RDYWNoZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgfTtcbiAgICBPYmplY3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGRhdGFJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW2RhdGFJZF07XG4gICAgfTtcbiAgICBPYmplY3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGRhdGFJZCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5kYXRhW2RhdGFJZF0gPSB2YWx1ZTtcbiAgICB9O1xuICAgIE9iamVjdENhY2hlLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoZGF0YUlkKSB7XG4gICAgICAgIHRoaXMuZGF0YVtkYXRhSWRdID0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgT2JqZWN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICB9O1xuICAgIE9iamVjdENhY2hlLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gKG5ld0RhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3RGF0YSB8fCB7fTtcbiAgICB9O1xuICAgIHJldHVybiBPYmplY3RDYWNoZTtcbn0oKSk7XG5leHBvcnQgeyBPYmplY3RDYWNoZSB9O1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHROb3JtYWxpemVkQ2FjaGVGYWN0b3J5KHNlZWQpIHtcbiAgICByZXR1cm4gbmV3IE9iamVjdENhY2hlKHNlZWQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JqZWN0Q2FjaGUuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlLWlubWVtb3J5L2xpYi9vYmplY3RDYWNoZS5qc1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLError = GraphQLError;\n\nvar _location = __webpack_require__(28);\n\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\nfunction GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError) {\n  // Compute locations in the source for the given nodes/positions.\n  var _source = source;\n  if (!_source && nodes && nodes.length > 0) {\n    var node = nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n  if (!_positions && nodes) {\n    _positions = nodes.filter(function (node) {\n      return Boolean(node.loc);\n    }).map(function (node) {\n      return node.loc.start;\n    });\n  }\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations = void 0;\n  var _source2 = _source; // seems here Flow need a const to resolve type.\n  if (_source2 && _positions) {\n    _locations = _positions.map(function (pos) {\n      return (0, _location.getLocation)(_source2, pos);\n    });\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true\n    },\n    nodes: {\n      value: nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    }\n  });\n\n  // Include (non-enumerable) stack trace.\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: { value: GraphQLError },\n  name: { value: 'GraphQLError' }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9HcmFwaFFMRXJyb3IuanM/NDI2OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEMsU0FBUztBQUNULENBQUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkdyYXBoUUxFcnJvciA9IEdyYXBoUUxFcnJvcjtcblxudmFyIF9sb2NhdGlvbiA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2xvY2F0aW9uJyk7XG5cbi8qKlxuICogQSBHcmFwaFFMRXJyb3IgZGVzY3JpYmVzIGFuIEVycm9yIGZvdW5kIGR1cmluZyB0aGUgcGFyc2UsIHZhbGlkYXRlLCBvclxuICogZXhlY3V0ZSBwaGFzZXMgb2YgcGVyZm9ybWluZyBhIEdyYXBoUUwgb3BlcmF0aW9uLiBJbiBhZGRpdGlvbiB0byBhIG1lc3NhZ2VcbiAqIGFuZCBzdGFjayB0cmFjZSwgaXQgYWxzbyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbG9jYXRpb25zIGluIGFcbiAqIEdyYXBoUUwgZG9jdW1lbnQgYW5kL29yIGV4ZWN1dGlvbiByZXN1bHQgdGhhdCBjb3JyZXNwb25kIHRvIHRoZSBFcnJvci5cbiAqL1xuZnVuY3Rpb24gR3JhcGhRTEVycm9yKCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlZGVjbGFyZVxubWVzc2FnZSwgbm9kZXMsIHNvdXJjZSwgcG9zaXRpb25zLCBwYXRoLCBvcmlnaW5hbEVycm9yKSB7XG4gIC8vIENvbXB1dGUgbG9jYXRpb25zIGluIHRoZSBzb3VyY2UgZm9yIHRoZSBnaXZlbiBub2Rlcy9wb3NpdGlvbnMuXG4gIHZhciBfc291cmNlID0gc291cmNlO1xuICBpZiAoIV9zb3VyY2UgJiYgbm9kZXMgJiYgbm9kZXMubGVuZ3RoID4gMCkge1xuICAgIHZhciBub2RlID0gbm9kZXNbMF07XG4gICAgX3NvdXJjZSA9IG5vZGUgJiYgbm9kZS5sb2MgJiYgbm9kZS5sb2Muc291cmNlO1xuICB9XG5cbiAgdmFyIF9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gIGlmICghX3Bvc2l0aW9ucyAmJiBub2Rlcykge1xuICAgIF9wb3NpdGlvbnMgPSBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKG5vZGUubG9jKTtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmxvYy5zdGFydDtcbiAgICB9KTtcbiAgfVxuICBpZiAoX3Bvc2l0aW9ucyAmJiBfcG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgIF9wb3NpdGlvbnMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgX2xvY2F0aW9ucyA9IHZvaWQgMDtcbiAgdmFyIF9zb3VyY2UyID0gX3NvdXJjZTsgLy8gc2VlbXMgaGVyZSBGbG93IG5lZWQgYSBjb25zdCB0byByZXNvbHZlIHR5cGUuXG4gIGlmIChfc291cmNlMiAmJiBfcG9zaXRpb25zKSB7XG4gICAgX2xvY2F0aW9ucyA9IF9wb3NpdGlvbnMubWFwKGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHJldHVybiAoMCwgX2xvY2F0aW9uLmdldExvY2F0aW9uKShfc291cmNlMiwgcG9zKTtcbiAgICB9KTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICBtZXNzYWdlOiB7XG4gICAgICB2YWx1ZTogbWVzc2FnZSxcbiAgICAgIC8vIEJ5IGJlaW5nIGVudW1lcmFibGUsIEpTT04uc3RyaW5naWZ5IHdpbGwgaW5jbHVkZSBgbWVzc2FnZWAgaW4gdGhlXG4gICAgICAvLyByZXN1bHRpbmcgb3V0cHV0LiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgc2ltcGxlc3QgcG9zc2libGUgR3JhcGhRTFxuICAgICAgLy8gc2VydmljZSBhZGhlcmVzIHRvIHRoZSBzcGVjLlxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBsb2NhdGlvbnM6IHtcbiAgICAgIC8vIENvZXJjaW5nIGZhbHNleSB2YWx1ZXMgdG8gdW5kZWZpbmVkIGVuc3VyZXMgdGhleSB3aWxsIG5vdCBiZSBpbmNsdWRlZFxuICAgICAgLy8gaW4gSlNPTi5zdHJpbmdpZnkoKSB3aGVuIG5vdCBwcm92aWRlZC5cbiAgICAgIHZhbHVlOiBfbG9jYXRpb25zIHx8IHVuZGVmaW5lZCxcbiAgICAgIC8vIEJ5IGJlaW5nIGVudW1lcmFibGUsIEpTT04uc3RyaW5naWZ5IHdpbGwgaW5jbHVkZSBgbG9jYXRpb25zYCBpbiB0aGVcbiAgICAgIC8vIHJlc3VsdGluZyBvdXRwdXQuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBzaW1wbGVzdCBwb3NzaWJsZSBHcmFwaFFMXG4gICAgICAvLyBzZXJ2aWNlIGFkaGVyZXMgdG8gdGhlIHNwZWMuXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBwYXRoOiB7XG4gICAgICAvLyBDb2VyY2luZyBmYWxzZXkgdmFsdWVzIHRvIHVuZGVmaW5lZCBlbnN1cmVzIHRoZXkgd2lsbCBub3QgYmUgaW5jbHVkZWRcbiAgICAgIC8vIGluIEpTT04uc3RyaW5naWZ5KCkgd2hlbiBub3QgcHJvdmlkZWQuXG4gICAgICB2YWx1ZTogcGF0aCB8fCB1bmRlZmluZWQsXG4gICAgICAvLyBCeSBiZWluZyBlbnVtZXJhYmxlLCBKU09OLnN0cmluZ2lmeSB3aWxsIGluY2x1ZGUgYHBhdGhgIGluIHRoZVxuICAgICAgLy8gcmVzdWx0aW5nIG91dHB1dC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIHNpbXBsZXN0IHBvc3NpYmxlIEdyYXBoUUxcbiAgICAgIC8vIHNlcnZpY2UgYWRoZXJlcyB0byB0aGUgc3BlYy5cbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIG5vZGVzOiB7XG4gICAgICB2YWx1ZTogbm9kZXMgfHwgdW5kZWZpbmVkXG4gICAgfSxcbiAgICBzb3VyY2U6IHtcbiAgICAgIHZhbHVlOiBfc291cmNlIHx8IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgcG9zaXRpb25zOiB7XG4gICAgICB2YWx1ZTogX3Bvc2l0aW9ucyB8fCB1bmRlZmluZWRcbiAgICB9LFxuICAgIG9yaWdpbmFsRXJyb3I6IHtcbiAgICAgIHZhbHVlOiBvcmlnaW5hbEVycm9yXG4gICAgfVxuICB9KTtcblxuICAvLyBJbmNsdWRlIChub24tZW51bWVyYWJsZSkgc3RhY2sgdHJhY2UuXG4gIGlmIChvcmlnaW5hbEVycm9yICYmIG9yaWdpbmFsRXJyb3Iuc3RhY2spIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywge1xuICAgICAgdmFsdWU6IG9yaWdpbmFsRXJyb3Iuc3RhY2ssXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgR3JhcGhRTEVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywge1xuICAgICAgdmFsdWU6IEVycm9yKCkuc3RhY2ssXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG59IC8qKlxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAgICpcbiAgICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gICAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAgICpcbiAgICogXG4gICAqL1xuXG5HcmFwaFFMRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IHsgdmFsdWU6IEdyYXBoUUxFcnJvciB9LFxuICBuYW1lOiB7IHZhbHVlOiAnR3JhcGhRTEVycm9yJyB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL0dyYXBoUUxFcnJvci5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"f\"] = getMutationDefinition;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = checkDocument;\n/* harmony export (immutable) */ __webpack_exports__[\"g\"] = getOperationDefinition;\n/* harmony export (immutable) */ __webpack_exports__[\"h\"] = getOperationDefinitionOrDie;\n/* harmony export (immutable) */ __webpack_exports__[\"i\"] = getOperationName;\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = getFragmentDefinitions;\n/* harmony export (immutable) */ __webpack_exports__[\"j\"] = getQueryDefinition;\n/* unused harmony export getFragmentDefinition */\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = getMainDefinition;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = createFragmentMap;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = getDefaultValues;\n/* unused harmony export variablesInOperation */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_assign__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__storeUtils__ = __webpack_require__(8);\n\n\nfunction getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    if (!mutationDef) {\n        throw new Error('Must contain a mutation definition.');\n    }\n    return mutationDef;\n}\nfunction checkDocument(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw new Error(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    if (operations.length > 1) {\n        throw new Error(\"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    }\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nfunction getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    if (!def) {\n        throw new Error(\"GraphQL document is missing an operation\");\n    }\n    return def;\n}\nfunction getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    if (!queryDef || queryDef.operation !== 'query') {\n        throw new Error('Must contain a query definition.');\n    }\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    if (doc.definitions.length > 1) {\n        throw new Error('Fragment must have exactly one definition.');\n    }\n    var fragmentDef = doc.definitions[0];\n    if (fragmentDef.kind !== 'FragmentDefinition') {\n        throw new Error('Must be a fragment definition.');\n    }\n    return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw new Error('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            Object(__WEBPACK_IMPORTED_MODULE_1__storeUtils__[\"j\" /* valueToObjectRepresentation */])(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return __WEBPACK_IMPORTED_MODULE_0__util_assign__[\"a\" /* assign */].apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\nfunction variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n//# sourceMappingURL=getFromAST.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = assign;\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n//# sourceMappingURL=assign.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvdXRpbC9hc3NpZ24uanM/MWE0NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHNvdXJjZXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAndW5kZWZpbmVkJyB8fCBzb3VyY2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzc2lnbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tdXRpbGl0aWVzL2xpYi91dGlsL2Fzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = cloneDeep;\nfunction cloneDeep(value) {\n    if (Array.isArray(value)) {\n        return value.map(function (item) { return cloneDeep(item); });\n    }\n    if (value !== null && typeof value === 'object') {\n        var nextValue = {};\n        for (var key in value) {\n            if (value.hasOwnProperty(key)) {\n                nextValue[key] = cloneDeep(value[key]);\n            }\n        }\n        return nextValue;\n    }\n    return value;\n}\n//# sourceMappingURL=cloneDeep.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvdXRpbC9jbG9uZURlZXAuanM/MDg4NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBLDBDQUEwQyx3QkFBd0IsRUFBRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gY2xvbmVEZWVwKGl0ZW0pOyB9KTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIG5leHRWYWx1ZSA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbmV4dFZhbHVlW2tleV0gPSBjbG9uZURlZXAodmFsdWVba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvbmVEZWVwLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby11dGlsaXRpZXMvbGliL3V0aWwvY2xvbmVEZWVwLmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Observable; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_link__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_symbol_observable__ = __webpack_require__(46);\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar Observable = (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[__WEBPACK_IMPORTED_MODULE_1_symbol_observable__[\"a\" /* default */]] = function () {\n        return this;\n    };\n    return Observable;\n}(__WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"b\" /* Observable */]));\n\n//# sourceMappingURL=Observable.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC91dGlsL09ic2VydmFibGUuanM/N2EyNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCLHNDQUFzQyxpQkFBaUIsRUFBRTtBQUNuRix5QkFBeUIsdURBQXVEO0FBQ2hGO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ3NDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNPO0FBQ1IiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbmltcG9ydCB7IE9ic2VydmFibGUgYXMgTGlua09ic2VydmFibGUgfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KExpbmtPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby1jbGllbnQvdXRpbC9PYnNlcnZhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Observable; });\nvar Observable = __webpack_require__(43);\n//# sourceMappingURL=zenObservable.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUtdHMvbGliL3plbk9ic2VydmFibGUuanM/YjIxNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQSIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgT2JzZXJ2YWJsZSA9IHJlcXVpcmUoJ3plbi1vYnNlcnZhYmxlJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16ZW5PYnNlcnZhYmxlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3plbi1vYnNlcnZhYmxlLXRzL2xpYi96ZW5PYnNlcnZhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"f\"] = validateOperation;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LinkError; });\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = isTerminating;\n/* unused harmony export toPromise */\n/* unused harmony export makePromise */\n/* unused harmony export fromPromise */\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = fromError;\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = transformOperation;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = createOperation;\n/* unused harmony export getKey */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_utilities__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_zen_observable_ts__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_graphql_language_printer__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_graphql_language_printer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_graphql_language_printer__);\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw new Error(\"illegal argument: \" + key);\n        }\n    }\n    return operation;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\n\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    console.warn(\"Promise Wrapper does not support multiple results from Observable\");\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n    return new __WEBPACK_IMPORTED_MODULE_1_zen_observable_ts__[\"a\" /* default */](function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\nfunction fromError(errorValue) {\n    return new __WEBPACK_IMPORTED_MODULE_1_zen_observable_ts__[\"a\" /* default */](function (observer) {\n        observer.error(errorValue);\n    });\n}\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"l\" /* getOperationName */])(transformedOperation.query)\n                : '';\n    }\n    return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign({}, context, next(context));\n        }\n        else {\n            context = __assign({}, context, next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    Object.defineProperty(operation, 'toKey', {\n        enumerable: false,\n        value: function () { return getKey(operation); },\n    });\n    return operation;\n}\nfunction getKey(operation) {\n    return Object(__WEBPACK_IMPORTED_MODULE_2_graphql_language_printer__[\"print\"])(operation.query) + \"|\" + JSON.stringify(operation.variables) + \"|\" + operation.operationName;\n}\n//# sourceMappingURL=linkUtils.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmsvbGliL2xpbmtVdGlscy5qcz80NTM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0EsVUFBVSxnQkFBZ0Isc0NBQXNDLGlCQUFpQixFQUFFO0FBQ25GLHlCQUF5Qix1REFBdUQ7QUFDaEY7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDRDQUE0QyxPQUFPO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyQjtBQUMzQjtBQUNnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGdCQUFnQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ087QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxrQ0FBa0Msb0JBQW9CLFlBQVk7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsNEJBQTRCLDBCQUEwQixFQUFFO0FBQ3hELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IHsgZ2V0T3BlcmF0aW9uTmFtZSB9IGZyb20gJ2Fwb2xsby11dGlsaXRpZXMnO1xuaW1wb3J0IE9ic2VydmFibGUgZnJvbSAnemVuLW9ic2VydmFibGUtdHMnO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICdncmFwaHFsL2xhbmd1YWdlL3ByaW50ZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlT3BlcmF0aW9uKG9wZXJhdGlvbikge1xuICAgIHZhciBPUEVSQVRJT05fRklFTERTID0gW1xuICAgICAgICAncXVlcnknLFxuICAgICAgICAnb3BlcmF0aW9uTmFtZScsXG4gICAgICAgICd2YXJpYWJsZXMnLFxuICAgICAgICAnZXh0ZW5zaW9ucycsXG4gICAgICAgICdjb250ZXh0JyxcbiAgICBdO1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhvcGVyYXRpb24pOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICBpZiAoT1BFUkFUSU9OX0ZJRUxEUy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGFyZ3VtZW50OiBcIiArIGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGlvbjtcbn1cbnZhciBMaW5rRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMaW5rRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGlua0Vycm9yKG1lc3NhZ2UsIGxpbmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubGluayA9IGxpbms7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIExpbmtFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IExpbmtFcnJvciB9O1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGVybWluYXRpbmcobGluaykge1xuICAgIHJldHVybiBsaW5rLnJlcXVlc3QubGVuZ3RoIDw9IDE7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9Qcm9taXNlKG9ic2VydmFibGUpIHtcbiAgICB2YXIgY29tcGxldGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgb2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlByb21pc2UgV3JhcHBlciBkb2VzIG5vdCBzdXBwb3J0IG11bHRpcGxlIHJlc3VsdHMgZnJvbSBPYnNlcnZhYmxlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgdmFyIG1ha2VQcm9taXNlID0gdG9Qcm9taXNlO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21Qcm9taXNlKHByb21pc2UpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXJyb3IoZXJyb3JWYWx1ZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3JWYWx1ZSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtT3BlcmF0aW9uKG9wZXJhdGlvbikge1xuICAgIHZhciB0cmFuc2Zvcm1lZE9wZXJhdGlvbiA9IHtcbiAgICAgICAgdmFyaWFibGVzOiBvcGVyYXRpb24udmFyaWFibGVzIHx8IHt9LFxuICAgICAgICBleHRlbnNpb25zOiBvcGVyYXRpb24uZXh0ZW5zaW9ucyB8fCB7fSxcbiAgICAgICAgb3BlcmF0aW9uTmFtZTogb3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUsXG4gICAgICAgIHF1ZXJ5OiBvcGVyYXRpb24ucXVlcnksXG4gICAgfTtcbiAgICBpZiAoIXRyYW5zZm9ybWVkT3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgdHJhbnNmb3JtZWRPcGVyYXRpb24ub3BlcmF0aW9uTmFtZSA9XG4gICAgICAgICAgICB0eXBlb2YgdHJhbnNmb3JtZWRPcGVyYXRpb24ucXVlcnkgIT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBnZXRPcGVyYXRpb25OYW1lKHRyYW5zZm9ybWVkT3BlcmF0aW9uLnF1ZXJ5KVxuICAgICAgICAgICAgICAgIDogJyc7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2Zvcm1lZE9wZXJhdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRpb24oc3RhcnRpbmcsIG9wZXJhdGlvbikge1xuICAgIHZhciBjb250ZXh0ID0gX19hc3NpZ24oe30sIHN0YXJ0aW5nKTtcbiAgICB2YXIgc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29udGV4dCA9IF9fYXNzaWduKHt9LCBjb250ZXh0LCBuZXh0KGNvbnRleHQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSBfX2Fzc2lnbih7fSwgY29udGV4dCwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBnZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKF9fYXNzaWduKHt9LCBjb250ZXh0KSk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgJ3NldENvbnRleHQnLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc2V0Q29udGV4dCxcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3BlcmF0aW9uLCAnZ2V0Q29udGV4dCcsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBnZXRDb250ZXh0LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sICd0b0tleScsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXRLZXkob3BlcmF0aW9uKTsgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleShvcGVyYXRpb24pIHtcbiAgICByZXR1cm4gcHJpbnQob3BlcmF0aW9uLnF1ZXJ5KSArIFwifFwiICsgSlNPTi5zdHJpbmdpZnkob3BlcmF0aW9uLnZhcmlhYmxlcykgKyBcInxcIiArIG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlua1V0aWxzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby1saW5rL2xpYi9saW5rVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return HeuristicFragmentMatcher; });\n/* unused harmony export IntrospectionFragmentMatcher */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_utilities__ = __webpack_require__(0);\n\nvar haveWarned = false;\nvar HeuristicFragmentMatcher = (function () {\n    function HeuristicFragmentMatcher() {\n    }\n    HeuristicFragmentMatcher.prototype.ensureReady = function () {\n        return Promise.resolve();\n    };\n    HeuristicFragmentMatcher.prototype.canBypassInit = function () {\n        return true;\n    };\n    HeuristicFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n        var obj = context.store.get(idValue.id);\n        if (!obj) {\n            return false;\n        }\n        if (!obj.__typename) {\n            if (!haveWarned) {\n                console.warn(\"You're using fragments in your queries, but either don't have the addTypename:\\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\\n   can accurately match fragments.\");\n                console.warn('Could not find __typename on Fragment ', typeCondition, obj);\n                console.warn(\"DEPRECATION WARNING: using fragments without __typename is unsupported behavior \" +\n                    \"and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.\");\n                if (!Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"w\" /* isTest */])()) {\n                    haveWarned = true;\n                }\n            }\n            context.returnPartialData = true;\n            return true;\n        }\n        if (obj.__typename === typeCondition) {\n            return true;\n        }\n        Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"E\" /* warnOnceInDevelopment */])(\"You are using the simple (heuristic) fragment matcher, but your queries contain union or interface types.\\n     Apollo Client will not be able to able to accurately map fragments.\" +\n            \"To make this error go away, use the IntrospectionFragmentMatcher as described in the docs: \" +\n            \"https://www.apollographql.com/docs/react/recipes/fragment-matching.html\", 'error');\n        context.returnPartialData = true;\n        return true;\n    };\n    return HeuristicFragmentMatcher;\n}());\n\nvar IntrospectionFragmentMatcher = (function () {\n    function IntrospectionFragmentMatcher(options) {\n        if (options && options.introspectionQueryResultData) {\n            this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);\n            this.isReady = true;\n        }\n        else {\n            this.isReady = false;\n        }\n        this.match = this.match.bind(this);\n    }\n    IntrospectionFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n        if (!this.isReady) {\n            throw new Error('FragmentMatcher.match() was called before FragmentMatcher.init()');\n        }\n        var obj = context.store.get(idValue.id);\n        if (!obj) {\n            return false;\n        }\n        if (!obj.__typename) {\n            throw new Error(\"Cannot match fragment because __typename property is missing: \" + JSON.stringify(obj));\n        }\n        if (obj.__typename === typeCondition) {\n            return true;\n        }\n        var implementingTypes = this.possibleTypesMap[typeCondition];\n        if (implementingTypes && implementingTypes.indexOf(obj.__typename) > -1) {\n            return true;\n        }\n        return false;\n    };\n    IntrospectionFragmentMatcher.prototype.parseIntrospectionResult = function (introspectionResultData) {\n        var typeMap = {};\n        introspectionResultData.__schema.types.forEach(function (type) {\n            if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n                typeMap[type.name] = type.possibleTypes.map(function (implementingType) { return implementingType.name; });\n            }\n        });\n        return typeMap;\n    };\n    return IntrospectionFragmentMatcher;\n}());\n\n//# sourceMappingURL=fragmentMatcher.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlLWlubWVtb3J5L2xpYi9mcmFnbWVudE1hdGNoZXIuanM/NzJkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTztBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUYsOEJBQThCLEVBQUU7QUFDekg7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNPO0FBQ1IiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1Rlc3QsIHdhcm5PbmNlSW5EZXZlbG9wbWVudCB9IGZyb20gJ2Fwb2xsby11dGlsaXRpZXMnO1xudmFyIGhhdmVXYXJuZWQgPSBmYWxzZTtcbnZhciBIZXVyaXN0aWNGcmFnbWVudE1hdGNoZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEhldXJpc3RpY0ZyYWdtZW50TWF0Y2hlcigpIHtcbiAgICB9XG4gICAgSGV1cmlzdGljRnJhZ21lbnRNYXRjaGVyLnByb3RvdHlwZS5lbnN1cmVSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG4gICAgSGV1cmlzdGljRnJhZ21lbnRNYXRjaGVyLnByb3RvdHlwZS5jYW5CeXBhc3NJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIEhldXJpc3RpY0ZyYWdtZW50TWF0Y2hlci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiAoaWRWYWx1ZSwgdHlwZUNvbmRpdGlvbiwgY29udGV4dCkge1xuICAgICAgICB2YXIgb2JqID0gY29udGV4dC5zdG9yZS5nZXQoaWRWYWx1ZS5pZCk7XG4gICAgICAgIGlmICghb2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvYmouX190eXBlbmFtZSkge1xuICAgICAgICAgICAgaWYgKCFoYXZlV2FybmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiWW91J3JlIHVzaW5nIGZyYWdtZW50cyBpbiB5b3VyIHF1ZXJpZXMsIGJ1dCBlaXRoZXIgZG9uJ3QgaGF2ZSB0aGUgYWRkVHlwZW5hbWU6XFxuICB0cnVlIG9wdGlvbiBzZXQgaW4gQXBvbGxvIENsaWVudCwgb3IgeW91IGFyZSB0cnlpbmcgdG8gd3JpdGUgYSBmcmFnbWVudCB0byB0aGUgc3RvcmUgd2l0aG91dCB0aGUgX190eXBlbmFtZS5cXG4gICBQbGVhc2UgdHVybiBvbiB0aGUgYWRkVHlwZW5hbWUgb3B0aW9uIGFuZCBpbmNsdWRlIF9fdHlwZW5hbWUgd2hlbiB3cml0aW5nIGZyYWdtZW50cyBzbyB0aGF0IEFwb2xsbyBDbGllbnRcXG4gICBjYW4gYWNjdXJhdGVseSBtYXRjaCBmcmFnbWVudHMuXCIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGZpbmQgX190eXBlbmFtZSBvbiBGcmFnbWVudCAnLCB0eXBlQ29uZGl0aW9uLCBvYmopO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkRFUFJFQ0FUSU9OIFdBUk5JTkc6IHVzaW5nIGZyYWdtZW50cyB3aXRob3V0IF9fdHlwZW5hbWUgaXMgdW5zdXBwb3J0ZWQgYmVoYXZpb3IgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIEFwb2xsbyBjbGllbnQuIFlvdSBzaG91bGQgZml4IHRoaXMgYW5kIHNldCBhZGRUeXBlbmFtZSB0byB0cnVlIG5vdy5cIik7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1Rlc3QoKSkge1xuICAgICAgICAgICAgICAgICAgICBoYXZlV2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZXh0LnJldHVyblBhcnRpYWxEYXRhID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmouX190eXBlbmFtZSA9PT0gdHlwZUNvbmRpdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgd2Fybk9uY2VJbkRldmVsb3BtZW50KFwiWW91IGFyZSB1c2luZyB0aGUgc2ltcGxlIChoZXVyaXN0aWMpIGZyYWdtZW50IG1hdGNoZXIsIGJ1dCB5b3VyIHF1ZXJpZXMgY29udGFpbiB1bmlvbiBvciBpbnRlcmZhY2UgdHlwZXMuXFxuICAgICBBcG9sbG8gQ2xpZW50IHdpbGwgbm90IGJlIGFibGUgdG8gYWJsZSB0byBhY2N1cmF0ZWx5IG1hcCBmcmFnbWVudHMuXCIgK1xuICAgICAgICAgICAgXCJUbyBtYWtlIHRoaXMgZXJyb3IgZ28gYXdheSwgdXNlIHRoZSBJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyIGFzIGRlc2NyaWJlZCBpbiB0aGUgZG9jczogXCIgK1xuICAgICAgICAgICAgXCJodHRwczovL3d3dy5hcG9sbG9ncmFwaHFsLmNvbS9kb2NzL3JlYWN0L3JlY2lwZXMvZnJhZ21lbnQtbWF0Y2hpbmcuaHRtbFwiLCAnZXJyb3InKTtcbiAgICAgICAgY29udGV4dC5yZXR1cm5QYXJ0aWFsRGF0YSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgcmV0dXJuIEhldXJpc3RpY0ZyYWdtZW50TWF0Y2hlcjtcbn0oKSk7XG5leHBvcnQgeyBIZXVyaXN0aWNGcmFnbWVudE1hdGNoZXIgfTtcbnZhciBJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5pbnRyb3NwZWN0aW9uUXVlcnlSZXN1bHREYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnBvc3NpYmxlVHlwZXNNYXAgPSB0aGlzLnBhcnNlSW50cm9zcGVjdGlvblJlc3VsdChvcHRpb25zLmludHJvc3BlY3Rpb25RdWVyeVJlc3VsdERhdGEpO1xuICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWF0Y2ggPSB0aGlzLm1hdGNoLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIEludHJvc3BlY3Rpb25GcmFnbWVudE1hdGNoZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gKGlkVmFsdWUsIHR5cGVDb25kaXRpb24sIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRnJhZ21lbnRNYXRjaGVyLm1hdGNoKCkgd2FzIGNhbGxlZCBiZWZvcmUgRnJhZ21lbnRNYXRjaGVyLmluaXQoKScpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYmogPSBjb250ZXh0LnN0b3JlLmdldChpZFZhbHVlLmlkKTtcbiAgICAgICAgaWYgKCFvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9iai5fX3R5cGVuYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbWF0Y2ggZnJhZ21lbnQgYmVjYXVzZSBfX3R5cGVuYW1lIHByb3BlcnR5IGlzIG1pc3Npbmc6IFwiICsgSlNPTi5zdHJpbmdpZnkob2JqKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5fX3R5cGVuYW1lID09PSB0eXBlQ29uZGl0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW1wbGVtZW50aW5nVHlwZXMgPSB0aGlzLnBvc3NpYmxlVHlwZXNNYXBbdHlwZUNvbmRpdGlvbl07XG4gICAgICAgIGlmIChpbXBsZW1lbnRpbmdUeXBlcyAmJiBpbXBsZW1lbnRpbmdUeXBlcy5pbmRleE9mKG9iai5fX3R5cGVuYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyLnByb3RvdHlwZS5wYXJzZUludHJvc3BlY3Rpb25SZXN1bHQgPSBmdW5jdGlvbiAoaW50cm9zcGVjdGlvblJlc3VsdERhdGEpIHtcbiAgICAgICAgdmFyIHR5cGVNYXAgPSB7fTtcbiAgICAgICAgaW50cm9zcGVjdGlvblJlc3VsdERhdGEuX19zY2hlbWEudHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgaWYgKHR5cGUua2luZCA9PT0gJ1VOSU9OJyB8fCB0eXBlLmtpbmQgPT09ICdJTlRFUkZBQ0UnKSB7XG4gICAgICAgICAgICAgICAgdHlwZU1hcFt0eXBlLm5hbWVdID0gdHlwZS5wb3NzaWJsZVR5cGVzLm1hcChmdW5jdGlvbiAoaW1wbGVtZW50aW5nVHlwZSkgeyByZXR1cm4gaW1wbGVtZW50aW5nVHlwZS5uYW1lOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0eXBlTWFwO1xuICAgIH07XG4gICAgcmV0dXJuIEludHJvc3BlY3Rpb25GcmFnbWVudE1hdGNoZXI7XG59KCkpO1xuZXhwb3J0IHsgSW50cm9zcGVjdGlvbkZyYWdtZW50TWF0Y2hlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJhZ21lbnRNYXRjaGVyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby1jYWNoZS1pbm1lbW9yeS9saWIvZnJhZ21lbnRNYXRjaGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export WriteError */\n/* unused harmony export enhanceErrorWithDocument */\n/* unused harmony export writeQueryToStore */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = writeResultToStore;\n/* unused harmony export writeSelectionSetToStore */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_graphql_language_printer__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_graphql_language_printer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_graphql_language_printer__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_apollo_utilities__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__objectCache__ = __webpack_require__(12);\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\n\nvar WriteError = (function (_super) {\n    __extends(WriteError, _super);\n    function WriteError() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'WriteError';\n        return _this;\n    }\n    return WriteError;\n}(Error));\n\nfunction enhanceErrorWithDocument(error, document) {\n    var enhancedError = new WriteError(\"Error writing result to store for query:\\n \" + Object(__WEBPACK_IMPORTED_MODULE_0_graphql_language_printer__[\"print\"])(document));\n    enhancedError.message += '\\n' + error.message;\n    enhancedError.stack = error.stack;\n    return enhancedError;\n}\nfunction writeQueryToStore(_a) {\n    var result = _a.result, query = _a.query, _b = _a.storeFactory, storeFactory = _b === void 0 ? __WEBPACK_IMPORTED_MODULE_2__objectCache__[\"b\" /* defaultNormalizedCacheFactory */] : _b, _c = _a.store, store = _c === void 0 ? storeFactory() : _c, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, _d = _a.fragmentMap, fragmentMap = _d === void 0 ? {} : _d, fragmentMatcherFunction = _a.fragmentMatcherFunction;\n    var queryDefinition = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"m\" /* getQueryDefinition */])(query);\n    variables = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"c\" /* assign */])({}, Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"e\" /* getDefaultValues */])(queryDefinition), variables);\n    try {\n        return writeSelectionSetToStore({\n            dataId: 'ROOT_QUERY',\n            result: result,\n            selectionSet: queryDefinition.selectionSet,\n            context: {\n                store: store,\n                storeFactory: storeFactory,\n                processedData: {},\n                variables: variables,\n                dataIdFromObject: dataIdFromObject,\n                fragmentMap: fragmentMap,\n                fragmentMatcherFunction: fragmentMatcherFunction,\n            },\n        });\n    }\n    catch (e) {\n        throw enhanceErrorWithDocument(e, query);\n    }\n}\nfunction writeResultToStore(_a) {\n    var dataId = _a.dataId, result = _a.result, document = _a.document, _b = _a.storeFactory, storeFactory = _b === void 0 ? __WEBPACK_IMPORTED_MODULE_2__objectCache__[\"b\" /* defaultNormalizedCacheFactory */] : _b, _c = _a.store, store = _c === void 0 ? storeFactory() : _c, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMatcherFunction = _a.fragmentMatcherFunction;\n    var operationDefinition = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"k\" /* getOperationDefinition */])(document);\n    var selectionSet = operationDefinition.selectionSet;\n    var fragmentMap = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"d\" /* createFragmentMap */])(Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"g\" /* getFragmentDefinitions */])(document));\n    variables = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"c\" /* assign */])({}, Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"e\" /* getDefaultValues */])(operationDefinition), variables);\n    try {\n        return writeSelectionSetToStore({\n            result: result,\n            dataId: dataId,\n            selectionSet: selectionSet,\n            context: {\n                store: store,\n                storeFactory: storeFactory,\n                processedData: {},\n                variables: variables,\n                dataIdFromObject: dataIdFromObject,\n                fragmentMap: fragmentMap,\n                fragmentMatcherFunction: fragmentMatcherFunction,\n            },\n        });\n    }\n    catch (e) {\n        throw enhanceErrorWithDocument(e, document);\n    }\n}\nfunction writeSelectionSetToStore(_a) {\n    var result = _a.result, dataId = _a.dataId, selectionSet = _a.selectionSet, context = _a.context;\n    var variables = context.variables, store = context.store, fragmentMap = context.fragmentMap;\n    selectionSet.selections.forEach(function (selection) {\n        var included = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"A\" /* shouldInclude */])(selection, variables);\n        if (Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"r\" /* isField */])(selection)) {\n            var resultFieldKey = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"z\" /* resultKeyNameFromField */])(selection);\n            var value = result[resultFieldKey];\n            if (included) {\n                if (typeof value !== 'undefined') {\n                    writeFieldToStore({\n                        dataId: dataId,\n                        value: value,\n                        field: selection,\n                        context: context,\n                    });\n                }\n                else {\n                    var isDefered = selection.directives &&\n                        selection.directives.length &&\n                        selection.directives.some(function (directive) { return directive.name && directive.name.value === 'defer'; });\n                    if (!isDefered && context.fragmentMatcherFunction) {\n                        if (!Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"v\" /* isProduction */])()) {\n                            console.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            var fragment = void 0;\n            if (Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"t\" /* isInlineFragment */])(selection)) {\n                fragment = selection;\n            }\n            else {\n                fragment = (fragmentMap || {})[selection.name.value];\n                if (!fragment) {\n                    throw new Error(\"No fragment named \" + selection.name.value + \".\");\n                }\n            }\n            var matches = true;\n            if (context.fragmentMatcherFunction && fragment.typeCondition) {\n                var idValue = { type: 'id', id: 'self', generated: false };\n                var fakeContext = {\n                    store: new __WEBPACK_IMPORTED_MODULE_2__objectCache__[\"a\" /* ObjectCache */]({ self: result }),\n                    returnPartialData: false,\n                    hasMissingField: false,\n                    cacheRedirects: {},\n                };\n                matches = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);\n                if (!Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"v\" /* isProduction */])() && fakeContext.returnPartialData) {\n                    console.error('WARNING: heuristic fragment matching going on!');\n                }\n            }\n            if (included && matches) {\n                writeSelectionSetToStore({\n                    result: result,\n                    selectionSet: fragment.selectionSet,\n                    dataId: dataId,\n                    context: context,\n                });\n            }\n        }\n    });\n    return store;\n}\nfunction isGeneratedId(id) {\n    return id[0] === '$';\n}\nfunction mergeWithGenerated(generatedKey, realKey, cache) {\n    var generated = cache.get(generatedKey);\n    var real = cache.get(realKey);\n    Object.keys(generated).forEach(function (key) {\n        var value = generated[key];\n        var realValue = real[key];\n        if (Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"s\" /* isIdValue */])(value) && isGeneratedId(value.id) && Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"s\" /* isIdValue */])(realValue)) {\n            mergeWithGenerated(value.id, realValue.id, cache);\n        }\n        cache.delete(generatedKey);\n        cache.set(realKey, __assign({}, generated, real));\n    });\n}\nfunction isDataProcessed(dataId, field, processedData) {\n    if (!processedData) {\n        return false;\n    }\n    if (processedData[dataId]) {\n        if (processedData[dataId].indexOf(field) >= 0) {\n            return true;\n        }\n        else {\n            processedData[dataId].push(field);\n        }\n    }\n    else {\n        processedData[dataId] = [field];\n    }\n    return false;\n}\nfunction writeFieldToStore(_a) {\n    var field = _a.field, value = _a.value, dataId = _a.dataId, context = _a.context;\n    var variables = context.variables, dataIdFromObject = context.dataIdFromObject, store = context.store;\n    var storeValue;\n    var storeObject;\n    var storeFieldName = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"B\" /* storeKeyNameFromField */])(field, variables);\n    var shouldMerge = false;\n    var generatedKey = '';\n    if (!field.selectionSet || value === null) {\n        storeValue =\n            value != null && typeof value === 'object'\n                ?\n                    { type: 'json', json: value }\n                :\n                    value;\n    }\n    else if (Array.isArray(value)) {\n        var generatedId = dataId + \".\" + storeFieldName;\n        storeValue = processArrayValue(value, generatedId, field.selectionSet, context);\n    }\n    else {\n        var valueDataId = dataId + \".\" + storeFieldName;\n        var generated = true;\n        if (!isGeneratedId(valueDataId)) {\n            valueDataId = '$' + valueDataId;\n        }\n        if (dataIdFromObject) {\n            var semanticId = dataIdFromObject(value);\n            if (semanticId && isGeneratedId(semanticId)) {\n                throw new Error('IDs returned by dataIdFromObject cannot begin with the \"$\" character.');\n            }\n            if (semanticId) {\n                valueDataId = semanticId;\n                generated = false;\n            }\n        }\n        if (!isDataProcessed(valueDataId, field, context.processedData)) {\n            writeSelectionSetToStore({\n                dataId: valueDataId,\n                result: value,\n                selectionSet: field.selectionSet,\n                context: context,\n            });\n        }\n        storeValue = {\n            type: 'id',\n            id: valueDataId,\n            generated: generated,\n        };\n        storeObject = store.get(dataId);\n        if (storeObject && storeObject[storeFieldName] !== storeValue) {\n            var escapedId = storeObject[storeFieldName];\n            if (Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"s\" /* isIdValue */])(storeValue) &&\n                storeValue.generated &&\n                Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"s\" /* isIdValue */])(escapedId) &&\n                !escapedId.generated) {\n                throw new Error(\"Store error: the application attempted to write an object with no provided id\" +\n                    (\" but the store already contains an id of \" + escapedId.id + \" for this object. The selectionSet\") +\n                    \" that was trying to be written is:\\n\" +\n                    Object(__WEBPACK_IMPORTED_MODULE_0_graphql_language_printer__[\"print\"])(field));\n            }\n            if (Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"s\" /* isIdValue */])(escapedId) && escapedId.generated) {\n                generatedKey = escapedId.id;\n                shouldMerge = true;\n            }\n        }\n    }\n    var newStoreObj = __assign({}, store.get(dataId), (_b = {}, _b[storeFieldName] = storeValue, _b));\n    if (shouldMerge) {\n        mergeWithGenerated(generatedKey, storeValue.id, store);\n    }\n    storeObject = store.get(dataId);\n    if (!storeObject || storeValue !== storeObject[storeFieldName]) {\n        store.set(dataId, newStoreObj);\n    }\n    var _b;\n}\nfunction processArrayValue(value, generatedId, selectionSet, context) {\n    return value.map(function (item, index) {\n        if (item === null) {\n            return null;\n        }\n        var itemDataId = generatedId + \".\" + index;\n        if (Array.isArray(item)) {\n            return processArrayValue(item, itemDataId, selectionSet, context);\n        }\n        var generated = true;\n        if (context.dataIdFromObject) {\n            var semanticId = context.dataIdFromObject(item);\n            if (semanticId) {\n                itemDataId = semanticId;\n                generated = false;\n            }\n        }\n        if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n            writeSelectionSetToStore({\n                dataId: itemDataId,\n                result: item,\n                selectionSet: selectionSet,\n                context: context,\n            });\n        }\n        var idStoreValue = {\n            type: 'id',\n            id: itemDataId,\n            generated: generated,\n        };\n        return idStoreValue;\n    });\n}\n//# sourceMappingURL=writeToStore.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export ID_KEY */\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = readQueryFromStore;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = diffQueryAgainstStore;\n/* unused harmony export assertIdValue */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_graphql_anywhere__ = __webpack_require__(65);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_apollo_utilities__ = __webpack_require__(0);\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\nvar ID_KEY = typeof Symbol !== 'undefined' ? Symbol('id') : '@@id';\nfunction readQueryFromStore(options) {\n    var optsPatch = { returnPartialData: false };\n    return diffQueryAgainstStore(__assign({}, options, optsPatch)).result;\n}\nvar readStoreResolver = function (fieldName, idValue, args, context, _a) {\n    var resultKey = _a.resultKey, directives = _a.directives;\n    assertIdValue(idValue);\n    var objId = idValue.id;\n    var obj = context.store.get(objId);\n    var storeKeyName = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"n\" /* getStoreKeyName */])(fieldName, args, directives);\n    var fieldValue = (obj || {})[storeKeyName];\n    if (typeof fieldValue === 'undefined') {\n        if (context.cacheRedirects &&\n            obj &&\n            (obj.__typename || objId === 'ROOT_QUERY')) {\n            var typename = obj.__typename || 'Query';\n            var type = context.cacheRedirects[typename];\n            if (type) {\n                var resolver = type[fieldName];\n                if (resolver) {\n                    fieldValue = resolver(obj, args, {\n                        getCacheKey: function (obj) {\n                            return Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"C\" /* toIdValue */])(context.dataIdFromObject(obj));\n                        },\n                    });\n                }\n            }\n        }\n    }\n    if (typeof fieldValue === 'undefined') {\n        if (!context.returnPartialData) {\n            throw new Error(\"Can't find field \" + storeKeyName + \" on object (\" + objId + \") \" + JSON.stringify(obj, null, 2) + \".\");\n        }\n        context.hasMissingField = true;\n        return fieldValue;\n    }\n    if (Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"u\" /* isJsonValue */])(fieldValue)) {\n        if (idValue.previousResult &&\n            Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"q\" /* isEqual */])(idValue.previousResult[resultKey], fieldValue.json)) {\n            return idValue.previousResult[resultKey];\n        }\n        return fieldValue.json;\n    }\n    if (idValue.previousResult) {\n        fieldValue = addPreviousResultToIdValues(fieldValue, idValue.previousResult[resultKey]);\n    }\n    return fieldValue;\n};\nfunction diffQueryAgainstStore(_a) {\n    var store = _a.store, query = _a.query, variables = _a.variables, previousResult = _a.previousResult, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? true : _b, _c = _a.rootId, rootId = _c === void 0 ? 'ROOT_QUERY' : _c, fragmentMatcherFunction = _a.fragmentMatcherFunction, config = _a.config;\n    var queryDefinition = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"m\" /* getQueryDefinition */])(query);\n    variables = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"c\" /* assign */])({}, Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"e\" /* getDefaultValues */])(queryDefinition), variables);\n    var context = {\n        store: store,\n        returnPartialData: returnPartialData,\n        dataIdFromObject: (config && config.dataIdFromObject) || null,\n        cacheRedirects: (config && config.cacheRedirects) || {},\n        hasMissingField: false,\n    };\n    var rootIdValue = {\n        type: 'id',\n        id: rootId,\n        previousResult: previousResult,\n    };\n    var result = Object(__WEBPACK_IMPORTED_MODULE_0_graphql_anywhere__[\"a\" /* default */])(readStoreResolver, query, rootIdValue, context, variables, {\n        fragmentMatcher: fragmentMatcherFunction,\n        resultMapper: resultMapper,\n    });\n    return {\n        result: result,\n        complete: !context.hasMissingField,\n    };\n}\nfunction assertIdValue(idValue) {\n    if (!Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"s\" /* isIdValue */])(idValue)) {\n        throw new Error(\"Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.\");\n    }\n}\nfunction addPreviousResultToIdValues(value, previousResult) {\n    if (Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"s\" /* isIdValue */])(value)) {\n        return __assign({}, value, { previousResult: previousResult });\n    }\n    else if (Array.isArray(value)) {\n        var idToPreviousResult_1 = new Map();\n        if (Array.isArray(previousResult)) {\n            previousResult.forEach(function (item) {\n                if (item && item[ID_KEY]) {\n                    idToPreviousResult_1.set(item[ID_KEY], item);\n                }\n            });\n        }\n        return value.map(function (item, i) {\n            var itemPreviousResult = previousResult && previousResult[i];\n            if (Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"s\" /* isIdValue */])(item)) {\n                itemPreviousResult =\n                    idToPreviousResult_1.get(item.id) || itemPreviousResult;\n            }\n            return addPreviousResultToIdValues(item, itemPreviousResult);\n        });\n    }\n    return value;\n}\nfunction resultMapper(resultFields, idValue) {\n    if (idValue.previousResult) {\n        var currentResultKeys_1 = Object.keys(resultFields);\n        var sameAsPreviousResult = Object.keys(idValue.previousResult).reduce(function (sameKeys, key) { return sameKeys && currentResultKeys_1.indexOf(key) > -1; }, true) &&\n            currentResultKeys_1.every(function (key) {\n                return areNestedArrayItemsStrictlyEqual(resultFields[key], idValue.previousResult[key]);\n            });\n        if (sameAsPreviousResult) {\n            return idValue.previousResult;\n        }\n    }\n    Object.defineProperty(resultFields, ID_KEY, {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n        value: idValue.id,\n    });\n    return resultFields;\n}\nfunction areNestedArrayItemsStrictlyEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b) || a.length !== b.length) {\n        return false;\n    }\n    return a.every(function (item, i) { return areNestedArrayItemsStrictlyEqual(item, b[i]); });\n}\n//# sourceMappingURL=readFromStore.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = graphql;\n/* unused harmony export merge */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_utilities__ = __webpack_require__(0);\n\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"i\" /* getMainDefinition */])(document);\n    var fragments = Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"g\" /* getFragmentDefinitions */])(document);\n    var fragmentMap = Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"d\" /* createFragmentMap */])(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n    var result = {};\n    selectionSet.selections.forEach(function (selection) {\n        if (!Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"A\" /* shouldInclude */])(selection, variables)) {\n            return;\n        }\n        if (Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"r\" /* isField */])(selection)) {\n            var fieldResult = executeField(selection, rootValue, execContext);\n            var resultFieldKey = Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"z\" /* resultKeyNameFromField */])(selection);\n            if (fieldResult !== undefined) {\n                if (result[resultFieldKey] === undefined) {\n                    result[resultFieldKey] = fieldResult;\n                }\n                else {\n                    merge(result[resultFieldKey], fieldResult);\n                }\n            }\n        }\n        else {\n            var fragment = void 0;\n            if (Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"t\" /* isInlineFragment */])(selection)) {\n                fragment = selection;\n            }\n            else {\n                fragment = fragmentMap[selection.name.value];\n                if (!fragment) {\n                    throw new Error(\"No fragment named \" + selection.name.value);\n                }\n            }\n            var typeCondition = fragment.typeCondition.name.value;\n            if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {\n                var fragmentResult = executeSelectionSet(fragment.selectionSet, rootValue, execContext);\n                merge(result, fragmentResult);\n            }\n        }\n    });\n    if (execContext.resultMapper) {\n        return execContext.resultMapper(result, rootValue);\n    }\n    return result;\n}\nfunction executeField(field, rootValue, execContext) {\n    var variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n    var fieldName = field.name.value;\n    var args = Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"b\" /* argumentsObjectFromField */])(field, variables);\n    var info = {\n        isLeaf: !field.selectionSet,\n        resultKey: Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"z\" /* resultKeyNameFromField */])(field),\n        directives: Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"f\" /* getDirectiveInfoFromField */])(field, variables),\n    };\n    var result = resolver(fieldName, rootValue, args, contextValue, info);\n    if (!field.selectionSet) {\n        return result;\n    }\n    if (result == null) {\n        return result;\n    }\n    if (Array.isArray(result)) {\n        return executeSubSelectedArray(field, result, execContext);\n    }\n    return executeSelectionSet(field.selectionSet, result, execContext);\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    });\n}\nfunction merge(dest, src) {\n    if (src === null || typeof src !== 'object') {\n        return src;\n    }\n    Object.keys(dest).forEach(function (destKey) {\n        if (src.hasOwnProperty(destKey)) {\n            merge(dest[destKey], src[destKey]);\n        }\n    });\n    Object.keys(src).forEach(function (srcKey) {\n        if (!dest.hasOwnProperty(srcKey)) {\n            dest[srcKey] = src[srcKey];\n        }\n    });\n}\n//# sourceMappingURL=graphql.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1hbnl3aGVyZS9saWIvZ3JhcGhxbC5qcz82ZjI3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUErTDtBQUMvTDtBQUNBLGlDQUFpQyxrQkFBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsYUFBYSxFQUFFO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRNYWluRGVmaW5pdGlvbiwgZ2V0RnJhZ21lbnREZWZpbml0aW9ucywgY3JlYXRlRnJhZ21lbnRNYXAsIHNob3VsZEluY2x1ZGUsIGdldERpcmVjdGl2ZUluZm9Gcm9tRmllbGQsIGlzRmllbGQsIGlzSW5saW5lRnJhZ21lbnQsIHJlc3VsdEtleU5hbWVGcm9tRmllbGQsIGFyZ3VtZW50c09iamVjdEZyb21GaWVsZCwgfSBmcm9tICdhcG9sbG8tdXRpbGl0aWVzJztcbmV4cG9ydCBmdW5jdGlvbiBncmFwaHFsKHJlc29sdmVyLCBkb2N1bWVudCwgcm9vdFZhbHVlLCBjb250ZXh0VmFsdWUsIHZhcmlhYmxlVmFsdWVzLCBleGVjT3B0aW9ucykge1xuICAgIGlmIChleGVjT3B0aW9ucyA9PT0gdm9pZCAwKSB7IGV4ZWNPcHRpb25zID0ge307IH1cbiAgICB2YXIgbWFpbkRlZmluaXRpb24gPSBnZXRNYWluRGVmaW5pdGlvbihkb2N1bWVudCk7XG4gICAgdmFyIGZyYWdtZW50cyA9IGdldEZyYWdtZW50RGVmaW5pdGlvbnMoZG9jdW1lbnQpO1xuICAgIHZhciBmcmFnbWVudE1hcCA9IGNyZWF0ZUZyYWdtZW50TWFwKGZyYWdtZW50cyk7XG4gICAgdmFyIHJlc3VsdE1hcHBlciA9IGV4ZWNPcHRpb25zLnJlc3VsdE1hcHBlcjtcbiAgICB2YXIgZnJhZ21lbnRNYXRjaGVyID0gZXhlY09wdGlvbnMuZnJhZ21lbnRNYXRjaGVyIHx8IChmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9KTtcbiAgICB2YXIgZXhlY0NvbnRleHQgPSB7XG4gICAgICAgIGZyYWdtZW50TWFwOiBmcmFnbWVudE1hcCxcbiAgICAgICAgY29udGV4dFZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgICAgIHZhcmlhYmxlVmFsdWVzOiB2YXJpYWJsZVZhbHVlcyxcbiAgICAgICAgcmVzdWx0TWFwcGVyOiByZXN1bHRNYXBwZXIsXG4gICAgICAgIHJlc29sdmVyOiByZXNvbHZlcixcbiAgICAgICAgZnJhZ21lbnRNYXRjaGVyOiBmcmFnbWVudE1hdGNoZXIsXG4gICAgfTtcbiAgICByZXR1cm4gZXhlY3V0ZVNlbGVjdGlvblNldChtYWluRGVmaW5pdGlvbi5zZWxlY3Rpb25TZXQsIHJvb3RWYWx1ZSwgZXhlY0NvbnRleHQpO1xufVxuZnVuY3Rpb24gZXhlY3V0ZVNlbGVjdGlvblNldChzZWxlY3Rpb25TZXQsIHJvb3RWYWx1ZSwgZXhlY0NvbnRleHQpIHtcbiAgICB2YXIgZnJhZ21lbnRNYXAgPSBleGVjQ29udGV4dC5mcmFnbWVudE1hcCwgY29udGV4dFZhbHVlID0gZXhlY0NvbnRleHQuY29udGV4dFZhbHVlLCB2YXJpYWJsZXMgPSBleGVjQ29udGV4dC52YXJpYWJsZVZhbHVlcztcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIGlmICghc2hvdWxkSW5jbHVkZShzZWxlY3Rpb24sIHZhcmlhYmxlcykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGaWVsZChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRSZXN1bHQgPSBleGVjdXRlRmllbGQoc2VsZWN0aW9uLCByb290VmFsdWUsIGV4ZWNDb250ZXh0KTtcbiAgICAgICAgICAgIHZhciByZXN1bHRGaWVsZEtleSA9IHJlc3VsdEtleU5hbWVGcm9tRmllbGQoc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIGlmIChmaWVsZFJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdFtyZXN1bHRGaWVsZEtleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0RmllbGRLZXldID0gZmllbGRSZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZShyZXN1bHRbcmVzdWx0RmllbGRLZXldLCBmaWVsZFJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKGlzSW5saW5lRnJhZ21lbnQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gc2VsZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBmcmFnbWVudE1hcFtzZWxlY3Rpb24ubmFtZS52YWx1ZV07XG4gICAgICAgICAgICAgICAgaWYgKCFmcmFnbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBmcmFnbWVudCBuYW1lZCBcIiArIHNlbGVjdGlvbi5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdHlwZUNvbmRpdGlvbiA9IGZyYWdtZW50LnR5cGVDb25kaXRpb24ubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChleGVjQ29udGV4dC5mcmFnbWVudE1hdGNoZXIocm9vdFZhbHVlLCB0eXBlQ29uZGl0aW9uLCBjb250ZXh0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZyYWdtZW50UmVzdWx0ID0gZXhlY3V0ZVNlbGVjdGlvblNldChmcmFnbWVudC5zZWxlY3Rpb25TZXQsIHJvb3RWYWx1ZSwgZXhlY0NvbnRleHQpO1xuICAgICAgICAgICAgICAgIG1lcmdlKHJlc3VsdCwgZnJhZ21lbnRSZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGV4ZWNDb250ZXh0LnJlc3VsdE1hcHBlcikge1xuICAgICAgICByZXR1cm4gZXhlY0NvbnRleHQucmVzdWx0TWFwcGVyKHJlc3VsdCwgcm9vdFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGV4ZWN1dGVGaWVsZChmaWVsZCwgcm9vdFZhbHVlLCBleGVjQ29udGV4dCkge1xuICAgIHZhciB2YXJpYWJsZXMgPSBleGVjQ29udGV4dC52YXJpYWJsZVZhbHVlcywgY29udGV4dFZhbHVlID0gZXhlY0NvbnRleHQuY29udGV4dFZhbHVlLCByZXNvbHZlciA9IGV4ZWNDb250ZXh0LnJlc29sdmVyO1xuICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZC5uYW1lLnZhbHVlO1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkKGZpZWxkLCB2YXJpYWJsZXMpO1xuICAgIHZhciBpbmZvID0ge1xuICAgICAgICBpc0xlYWY6ICFmaWVsZC5zZWxlY3Rpb25TZXQsXG4gICAgICAgIHJlc3VsdEtleTogcmVzdWx0S2V5TmFtZUZyb21GaWVsZChmaWVsZCksXG4gICAgICAgIGRpcmVjdGl2ZXM6IGdldERpcmVjdGl2ZUluZm9Gcm9tRmllbGQoZmllbGQsIHZhcmlhYmxlcyksXG4gICAgfTtcbiAgICB2YXIgcmVzdWx0ID0gcmVzb2x2ZXIoZmllbGROYW1lLCByb290VmFsdWUsIGFyZ3MsIGNvbnRleHRWYWx1ZSwgaW5mbyk7XG4gICAgaWYgKCFmaWVsZC5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVTdWJTZWxlY3RlZEFycmF5KGZpZWxkLCByZXN1bHQsIGV4ZWNDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGV4ZWN1dGVTZWxlY3Rpb25TZXQoZmllbGQuc2VsZWN0aW9uU2V0LCByZXN1bHQsIGV4ZWNDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGV4ZWN1dGVTdWJTZWxlY3RlZEFycmF5KGZpZWxkLCByZXN1bHQsIGV4ZWNDb250ZXh0KSB7XG4gICAgcmV0dXJuIHJlc3VsdC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXkoZmllbGQsIGl0ZW0sIGV4ZWNDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhlY3V0ZVNlbGVjdGlvblNldChmaWVsZC5zZWxlY3Rpb25TZXQsIGl0ZW0sIGV4ZWNDb250ZXh0KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZShkZXN0LCBzcmMpIHtcbiAgICBpZiAoc3JjID09PSBudWxsIHx8IHR5cGVvZiBzcmMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBzcmM7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKGRlc3QpLmZvckVhY2goZnVuY3Rpb24gKGRlc3RLZXkpIHtcbiAgICAgICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShkZXN0S2V5KSkge1xuICAgICAgICAgICAgbWVyZ2UoZGVzdFtkZXN0S2V5XSwgc3JjW2Rlc3RLZXldKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaChmdW5jdGlvbiAoc3JjS2V5KSB7XG4gICAgICAgIGlmICghZGVzdC5oYXNPd25Qcm9wZXJ0eShzcmNLZXkpKSB7XG4gICAgICAgICAgICBkZXN0W3NyY0tleV0gPSBzcmNbc3JjS2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhcGhxbC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ncmFwaHFsLWFueXdoZXJlL2xpYi9ncmFwaHFsLmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export RecordingCache */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = record;\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar RecordingCache = (function () {\n    function RecordingCache(data) {\n        if (data === void 0) { data = {}; }\n        this.data = data;\n        this.recordedData = {};\n    }\n    RecordingCache.prototype.record = function (transaction) {\n        transaction(this);\n        var recordedData = this.recordedData;\n        this.recordedData = {};\n        return recordedData;\n    };\n    RecordingCache.prototype.toObject = function () {\n        return __assign({}, this.data, this.recordedData);\n    };\n    RecordingCache.prototype.get = function (dataId) {\n        if (this.recordedData.hasOwnProperty(dataId)) {\n            return this.recordedData[dataId];\n        }\n        return this.data[dataId];\n    };\n    RecordingCache.prototype.set = function (dataId, value) {\n        if (this.get(dataId) !== value) {\n            this.recordedData[dataId] = value;\n        }\n    };\n    RecordingCache.prototype.delete = function (dataId) {\n        this.recordedData[dataId] = undefined;\n    };\n    RecordingCache.prototype.clear = function () {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) { return _this.delete(dataId); });\n        this.recordedData = {};\n    };\n    RecordingCache.prototype.replace = function (newData) {\n        this.clear();\n        this.recordedData = __assign({}, newData);\n    };\n    return RecordingCache;\n}());\n\nfunction record(startingState, transaction) {\n    var recordingCache = new RecordingCache(startingState);\n    return recordingCache.record(transaction);\n}\n//# sourceMappingURL=recordingCache.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlLWlubWVtb3J5L2xpYi9yZWNvcmRpbmdDYWNoZS5qcz80OWNhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUFBO0FBQ0EsNENBQTRDLE9BQU87QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixXQUFXO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsNkJBQTZCLEVBQUU7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBLENBQUM7QUFDTztBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgfVxuICAgIHJldHVybiB0O1xufTtcbnZhciBSZWNvcmRpbmdDYWNoZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVjb3JkaW5nQ2FjaGUoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdm9pZCAwKSB7IGRhdGEgPSB7fTsgfVxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnJlY29yZGVkRGF0YSA9IHt9O1xuICAgIH1cbiAgICBSZWNvcmRpbmdDYWNoZS5wcm90b3R5cGUucmVjb3JkID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uKHRoaXMpO1xuICAgICAgICB2YXIgcmVjb3JkZWREYXRhID0gdGhpcy5yZWNvcmRlZERhdGE7XG4gICAgICAgIHRoaXMucmVjb3JkZWREYXRhID0ge307XG4gICAgICAgIHJldHVybiByZWNvcmRlZERhdGE7XG4gICAgfTtcbiAgICBSZWNvcmRpbmdDYWNoZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgdGhpcy5kYXRhLCB0aGlzLnJlY29yZGVkRGF0YSk7XG4gICAgfTtcbiAgICBSZWNvcmRpbmdDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGRhdGFJZCkge1xuICAgICAgICBpZiAodGhpcy5yZWNvcmRlZERhdGEuaGFzT3duUHJvcGVydHkoZGF0YUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjb3JkZWREYXRhW2RhdGFJZF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVtkYXRhSWRdO1xuICAgIH07XG4gICAgUmVjb3JkaW5nQ2FjaGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChkYXRhSWQsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmdldChkYXRhSWQpICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZWNvcmRlZERhdGFbZGF0YUlkXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBSZWNvcmRpbmdDYWNoZS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGRhdGFJZCkge1xuICAgICAgICB0aGlzLnJlY29yZGVkRGF0YVtkYXRhSWRdID0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgUmVjb3JkaW5nQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmRhdGEpLmZvckVhY2goZnVuY3Rpb24gKGRhdGFJZCkgeyByZXR1cm4gX3RoaXMuZGVsZXRlKGRhdGFJZCk7IH0pO1xuICAgICAgICB0aGlzLnJlY29yZGVkRGF0YSA9IHt9O1xuICAgIH07XG4gICAgUmVjb3JkaW5nQ2FjaGUucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAobmV3RGF0YSkge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMucmVjb3JkZWREYXRhID0gX19hc3NpZ24oe30sIG5ld0RhdGEpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlY29yZGluZ0NhY2hlO1xufSgpKTtcbmV4cG9ydCB7IFJlY29yZGluZ0NhY2hlIH07XG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkKHN0YXJ0aW5nU3RhdGUsIHRyYW5zYWN0aW9uKSB7XG4gICAgdmFyIHJlY29yZGluZ0NhY2hlID0gbmV3IFJlY29yZGluZ0NhY2hlKHN0YXJ0aW5nU3RhdGUpO1xuICAgIHJldHVybiByZWNvcmRpbmdDYWNoZS5yZWNvcmQodHJhbnNhY3Rpb24pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVjb3JkaW5nQ2FjaGUuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlLWlubWVtb3J5L2xpYi9yZWNvcmRpbmdDYWNoZS5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_graphql_tag__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_graphql_tag___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_graphql_tag__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_shaka_player_dist_shaka_player_compiled_debug__ = __webpack_require__(88);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_shaka_player_dist_shaka_player_compiled_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_shaka_player_dist_shaka_player_compiled_debug__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'app',\n  data() {\n    return {\n      msg: 'Welcome to Your Vue.js & Phoenix & GraphQL App',\n      timestamp: '',\n      timestampURI: 'https://s3-us-west-2.amazonaws.com/dev-streaming-orcasound-net/rpi_seattle/latest.txt'\n    };\n  },\n  mounted() {\n    document.addEventListener('DOMContentLoaded', this.initApp);\n    console.log(this);\n  },\n  computed: {\n    manifestUri: function () {\n      return `https://s3-us-west-2.amazonaws.com/dev-streaming-orcasound-net/rpi_seattle/dash/${this.timestamp}/live.mpd`;\n    },\n    awsConsoleUri: function () {\n      return `https://s3.console.aws.amazon.com/s3/buckets/dev-streaming-orcasound-net/rpi_seattle/dash/${this.timestamp}/`;\n    }\n  },\n  methods: {\n    initApp: function () {\n      // Install built-in polyfills to patch browser incompatibilities.\n      __WEBPACK_IMPORTED_MODULE_1_shaka_player_dist_shaka_player_compiled_debug__[\"shaka\"].polyfill.installAll();\n\n      // Check to see if the browser supports the basic APIs Shaka needs.\n      if (__WEBPACK_IMPORTED_MODULE_1_shaka_player_dist_shaka_player_compiled_debug__[\"shaka\"].Player.isBrowserSupported()) {\n        // Everything looks good!\n        this.initPlayer();\n      } else {\n        // This browser does not have the minimum set of APIs we need.\n        console.error('Browser not supported!');\n        // TODO: Falback to HLS\n      }\n    },\n    initPlayer: function () {\n      // Create a Player instance.\n      var video = document.getElementById('video');\n      var player = new __WEBPACK_IMPORTED_MODULE_1_shaka_player_dist_shaka_player_compiled_debug__[\"shaka\"].Player(video);\n\n      // Attach player to the window to make it easy to access in the JS console.\n      window.player = player;\n      this.player = player;\n\n      // Listen for error events.\n      player.addEventListener('error', this.onErrorEvent);\n\n      player.configure({\n        manifest: {\n          retryParameters: {\n            timeout: 60000,\n            baseDelay: 1000,\n            maxAttempts: 5\n          }\n        },\n        streaming: {\n          bufferBehind: 300,\n          bufferingGoal: 300,\n          rebufferingGoal: 5,\n          retryParameters: {\n            timeout: 60000,\n            baseDelay: 1000,\n            maxAttempts: 30\n          }\n        }\n      });\n\n      this.fetchTimestamp();\n      setInterval(this.fetchTimestamp, 10000);\n    },\n    loadManifest: function () {\n      // Try to load a manifest.\n      // This is an asynchronous process.\n      this.player.load(this.manifestUri).then(function () {\n        // This runs if the asynchronous load is successful.\n        console.log('The video has now been loaded!');\n      }).catch(this.onLoadError); // onLoadError is executed if the asynchronous load fails.\n    },\n    onErrorEvent: function (event) {\n      // Extract the shaka.util.Error object from the event.\n      this.onError(event.detail);\n    },\n    onLoadError: function (error) {\n      this.onError(error);\n      setTimeout(this.loadManifest, 5000);\n    },\n    onError: function (error) {\n      // Log the error.\n      console.error('Error code', error.code, 'object', error);\n    },\n    fetchTimestamp: function () {\n      var xhr = new XMLHttpRequest();\n      var self = this;\n      xhr.open('GET', this.timestampURI);\n      xhr.onload = function () {\n        var timestamp = xhr.responseText.trim();\n        console.log(\"Latest timestamp: \" + timestamp);\n        if (timestamp != self.timestamp) {\n          self.timestamp = timestamp;\n          console.log(\"New stream instance: \" + self.manifestUri);\n          self.loadManifest();\n        }\n      };\n      xhr.send();\n    }\n  },\n  apollo: {\n    // Apollo specific options\n    // Here, we use gql to describe the data we want: a user with ID 1, and \n    // Apollo will assign the result of that query to the 'user' key in data.\n    user: __WEBPACK_IMPORTED_MODULE_0_graphql_tag___default.a`{\n      user(id: \"1\"){ \n        name\n      }\n    }`\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwcC52dWU/ZWE5OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQWFBO0FBQ0E7QUFDQTtRQUVBO1NBQ0E7O1dBRUE7aUJBQ0E7b0JBRUE7QUFKQTtBQUtBO1lBQ0E7dURBQ0E7Z0JBQ0E7QUFDQTs7NkJBRUE7OEdBQ0E7QUFDQTsrQkFDQTt3SEFDQTtBQUVBO0FBUEE7O3lCQVNBO0FBQ0E7b0dBRUE7O0FBQ0E7NEhBQ0E7QUFDQTthQUNBO2FBQ0E7QUFDQTtzQkFDQTtBQUNBO0FBQ0E7QUFDQTs0QkFDQTtBQUNBOzBDQUNBO21IQUVBOztBQUNBO3NCQUNBO29CQUVBOztBQUNBOzRDQUVBOzs7OztxQkFJQTt1QkFDQTt5QkFHQTtBQUxBO0FBREE7O3dCQVFBO3lCQUNBOzJCQUNBOztxQkFFQTt1QkFDQTt5QkFLQTtBQVBBO0FBSkE7QUFSQTs7V0FvQkE7dUNBQ0E7QUFDQTs4QkFDQTtBQUNBO0FBQ0E7MERBQ0E7QUFDQTtvQkFDQTtrQ0FDQTtBQUNBO21DQUNBO0FBQ0E7eUJBQ0E7QUFDQTtrQ0FDQTttQkFDQTtvQ0FDQTtBQUNBOzhCQUNBO0FBQ0E7d0RBQ0E7QUFDQTtnQ0FDQTtvQkFDQTtpQkFDQTsyQkFDQTsrQkFDQTt5Q0FDQTsyQ0FDQTt5Q0FDQTsyQkFDQTtxREFDQTtlQUNBO0FBQ0E7QUFDQTtVQUNBO0FBRUE7QUFyRkE7O0FBdUZBO0FBQ0E7QUFDQTs2REFNQTs7Ozs7QUFUQTtBQTNHQSIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cImFwcFwiPlxuICAgIDxoMT57eyB0aW1lc3RhbXAgfX08L2gxPlxuICAgIDxoMz48YSB2LWJpbmQ6aHJlZj1cIm1hbmlmZXN0VXJpXCI+e3sgbWFuaWZlc3RVcmkgfX08L2E+PC9oMz5cbiAgICA8aDM+PGEgdi1iaW5kOmhyZWY9XCJhd3NDb25zb2xlVXJpXCI+e3sgYXdzQ29uc29sZVVyaSB9fTwvYT48L2gzPlxuICAgIDx2aWRlbyBpZD1cInZpZGVvXCJcbiAgICAgICAgICAgd2lkdGg9XCI2NDBcIlxuICAgICAgICAgICBjb250cm9scyBhdXRvcGxheT5cbiAgICA8L3ZpZGVvPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJ1xuaW1wb3J0IHsgc2hha2EgfSBmcm9tICdzaGFrYS1wbGF5ZXIvZGlzdC9zaGFrYS1wbGF5ZXIuY29tcGlsZWQuZGVidWcnXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHAnLFxuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbXNnOiAnV2VsY29tZSB0byBZb3VyIFZ1ZS5qcyAmIFBob2VuaXggJiBHcmFwaFFMIEFwcCcsXG4gICAgICB0aW1lc3RhbXA6ICcnLFxuICAgICAgdGltZXN0YW1wVVJJOiAnaHR0cHM6Ly9zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9kZXYtc3RyZWFtaW5nLW9yY2Fzb3VuZC1uZXQvcnBpX3NlYXR0bGUvbGF0ZXN0LnR4dCdcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRoaXMuaW5pdEFwcCk7XG4gICAgY29uc29sZS5sb2codGhpcyk7XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgbWFuaWZlc3RVcmk6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBgaHR0cHM6Ly9zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9kZXYtc3RyZWFtaW5nLW9yY2Fzb3VuZC1uZXQvcnBpX3NlYXR0bGUvZGFzaC8ke3RoaXMudGltZXN0YW1wfS9saXZlLm1wZGA7XG4gICAgfSxcbiAgICBhd3NDb25zb2xlVXJpOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYGh0dHBzOi8vczMuY29uc29sZS5hd3MuYW1hem9uLmNvbS9zMy9idWNrZXRzL2Rldi1zdHJlYW1pbmctb3JjYXNvdW5kLW5ldC9ycGlfc2VhdHRsZS9kYXNoLyR7dGhpcy50aW1lc3RhbXB9L2A7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgaW5pdEFwcDogZnVuY3Rpb24gKCkge1xuICAgICAgLy8gSW5zdGFsbCBidWlsdC1pbiBwb2x5ZmlsbHMgdG8gcGF0Y2ggYnJvd3NlciBpbmNvbXBhdGliaWxpdGllcy5cbiAgICAgIHNoYWthLnBvbHlmaWxsLmluc3RhbGxBbGwoKTtcblxuICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBiYXNpYyBBUElzIFNoYWthIG5lZWRzLlxuICAgICAgaWYgKHNoYWthLlBsYXllci5pc0Jyb3dzZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgICAvLyBFdmVyeXRoaW5nIGxvb2tzIGdvb2QhXG4gICAgICAgIHRoaXMuaW5pdFBsYXllcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBicm93c2VyIGRvZXMgbm90IGhhdmUgdGhlIG1pbmltdW0gc2V0IG9mIEFQSXMgd2UgbmVlZC5cbiAgICAgICAgY29uc29sZS5lcnJvcignQnJvd3NlciBub3Qgc3VwcG9ydGVkIScpO1xuICAgICAgICAvLyBUT0RPOiBGYWxiYWNrIHRvIEhMU1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdFBsYXllcjogZnVuY3Rpb24gKCkge1xuICAgICAgLy8gQ3JlYXRlIGEgUGxheWVyIGluc3RhbmNlLlxuICAgICAgdmFyIHZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvJyk7XG4gICAgICB2YXIgcGxheWVyID0gbmV3IHNoYWthLlBsYXllcih2aWRlbyk7XG5cbiAgICAgIC8vIEF0dGFjaCBwbGF5ZXIgdG8gdGhlIHdpbmRvdyB0byBtYWtlIGl0IGVhc3kgdG8gYWNjZXNzIGluIHRoZSBKUyBjb25zb2xlLlxuICAgICAgd2luZG93LnBsYXllciA9IHBsYXllcjtcbiAgICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuXG4gICAgICAvLyBMaXN0ZW4gZm9yIGVycm9yIGV2ZW50cy5cbiAgICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMub25FcnJvckV2ZW50KTtcblxuICAgICAgcGxheWVyLmNvbmZpZ3VyZSh7XG4gICAgICAgIG1hbmlmZXN0OiB7XG4gICAgICAgICAgcmV0cnlQYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICB0aW1lb3V0OiA2MDAwMCxcbiAgICAgICAgICAgIGJhc2VEZWxheTogMTAwMCxcbiAgICAgICAgICAgIG1heEF0dGVtcHRzOiA1XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdHJlYW1pbmc6IHtcbiAgICAgICAgICBidWZmZXJCZWhpbmQ6IDMwMCxcbiAgICAgICAgICBidWZmZXJpbmdHb2FsOiAzMDAsXG4gICAgICAgICAgcmVidWZmZXJpbmdHb2FsOiA1LFxuICAgICAgICAgIHJldHJ5UGFyYW1ldGVyczoge1xuICAgICAgICAgICAgdGltZW91dDogNjAwMDAsXG4gICAgICAgICAgICBiYXNlRGVsYXk6IDEwMDAsXG4gICAgICAgICAgICBtYXhBdHRlbXB0czogMzBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmZldGNoVGltZXN0YW1wKCk7XG4gICAgICBzZXRJbnRlcnZhbCh0aGlzLmZldGNoVGltZXN0YW1wLCAxMDAwMCk7XG4gICAgfSxcbiAgICBsb2FkTWFuaWZlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFRyeSB0byBsb2FkIGEgbWFuaWZlc3QuXG4gICAgICAvLyBUaGlzIGlzIGFuIGFzeW5jaHJvbm91cyBwcm9jZXNzLlxuICAgICAgdGhpcy5wbGF5ZXIubG9hZCh0aGlzLm1hbmlmZXN0VXJpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBUaGlzIHJ1bnMgaWYgdGhlIGFzeW5jaHJvbm91cyBsb2FkIGlzIHN1Y2Nlc3NmdWwuXG4gICAgICAgIGNvbnNvbGUubG9nKCdUaGUgdmlkZW8gaGFzIG5vdyBiZWVuIGxvYWRlZCEnKTtcbiAgICAgIH0pLmNhdGNoKHRoaXMub25Mb2FkRXJyb3IpOyAgLy8gb25Mb2FkRXJyb3IgaXMgZXhlY3V0ZWQgaWYgdGhlIGFzeW5jaHJvbm91cyBsb2FkIGZhaWxzLlxuICAgIH0sXG4gICAgb25FcnJvckV2ZW50OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIEV4dHJhY3QgdGhlIHNoYWthLnV0aWwuRXJyb3Igb2JqZWN0IGZyb20gdGhlIGV2ZW50LlxuICAgICAgdGhpcy5vbkVycm9yKGV2ZW50LmRldGFpbCk7XG4gICAgfSxcbiAgICBvbkxvYWRFcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB0aGlzLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgc2V0VGltZW91dCh0aGlzLmxvYWRNYW5pZmVzdCwgNTAwMCk7XG4gICAgfSxcbiAgICBvbkVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIC8vIExvZyB0aGUgZXJyb3IuXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb2RlJywgZXJyb3IuY29kZSwgJ29iamVjdCcsIGVycm9yKTsgICAgICBcbiAgICB9LFxuICAgIGZldGNoVGltZXN0YW1wOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcbiAgICAgIHZhciBzZWxmID0gdGhpc1xuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHRoaXMudGltZXN0YW1wVVJJKVxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRpbWVzdGFtcCA9IHhoci5yZXNwb25zZVRleHQudHJpbSgpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkxhdGVzdCB0aW1lc3RhbXA6IFwiICsgdGltZXN0YW1wKTtcbiAgICAgICAgaWYgKHRpbWVzdGFtcCAhPSBzZWxmLnRpbWVzdGFtcCkge1xuICAgICAgICAgIHNlbGYudGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiTmV3IHN0cmVhbSBpbnN0YW5jZTogXCIgKyBzZWxmLm1hbmlmZXN0VXJpKVxuICAgICAgICAgIHNlbGYubG9hZE1hbmlmZXN0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHhoci5zZW5kKClcbiAgICB9XG4gIH0sXG4gIGFwb2xsbzoge1xuICAgIC8vIEFwb2xsbyBzcGVjaWZpYyBvcHRpb25zXG4gICAgLy8gSGVyZSwgd2UgdXNlIGdxbCB0byBkZXNjcmliZSB0aGUgZGF0YSB3ZSB3YW50OiBhIHVzZXIgd2l0aCBJRCAxLCBhbmQgXG4gICAgLy8gQXBvbGxvIHdpbGwgYXNzaWduIHRoZSByZXN1bHQgb2YgdGhhdCBxdWVyeSB0byB0aGUgJ3VzZXInIGtleSBpbiBkYXRhLlxuICAgIHVzZXI6IGdxbGB7XG4gICAgICB1c2VyKGlkOiBcIjFcIil7IFxuICAgICAgICBuYW1lXG4gICAgICB9XG4gICAgfWAsXG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbiNhcHAge1xuICBmb250LWZhbWlseTogJ0F2ZW5pcicsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjMmMzZTUwO1xuICBtYXJnaW4tdG9wOiA2MHB4O1xufVxuaDEsIGgyIHtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbn1cbnVsIHtcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICBwYWRkaW5nOiAwO1xufVxubGkge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbjogMCAxMHB4O1xufVxuYSB7XG4gIGNvbG9yOiAjNDJiOTgzO1xufVxuPC9zdHlsZT5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL0FwcC52dWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = invariant;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2ludmFyaWFudC5qcz8yNjIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGludmFyaWFudDtcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pbnZhcmlhbnQuanNcbi8vIG1vZHVsZSBpZCA9IDI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _GraphQLError = __webpack_require__(13);\n\nObject.defineProperty(exports, 'GraphQLError', {\n  enumerable: true,\n  get: function get() {\n    return _GraphQLError.GraphQLError;\n  }\n});\n\nvar _syntaxError = __webpack_require__(81);\n\nObject.defineProperty(exports, 'syntaxError', {\n  enumerable: true,\n  get: function get() {\n    return _syntaxError.syntaxError;\n  }\n});\n\nvar _locatedError = __webpack_require__(82);\n\nObject.defineProperty(exports, 'locatedError', {\n  enumerable: true,\n  get: function get() {\n    return _locatedError.locatedError;\n  }\n});\n\nvar _formatError = __webpack_require__(83);\n\nObject.defineProperty(exports, 'formatError', {\n  enumerable: true,\n  get: function get() {\n    return _formatError.formatError;\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9pbmRleC5qcz80MjE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4vR3JhcGhRTEVycm9yJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnR3JhcGhRTEVycm9yJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3I7XG4gIH1cbn0pO1xuXG52YXIgX3N5bnRheEVycm9yID0gcmVxdWlyZSgnLi9zeW50YXhFcnJvcicpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3N5bnRheEVycm9yJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3N5bnRheEVycm9yLnN5bnRheEVycm9yO1xuICB9XG59KTtcblxudmFyIF9sb2NhdGVkRXJyb3IgPSByZXF1aXJlKCcuL2xvY2F0ZWRFcnJvcicpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2xvY2F0ZWRFcnJvcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9sb2NhdGVkRXJyb3IubG9jYXRlZEVycm9yO1xuICB9XG59KTtcblxudmFyIF9mb3JtYXRFcnJvciA9IHJlcXVpcmUoJy4vZm9ybWF0RXJyb3InKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdmb3JtYXRFcnJvcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9mb3JtYXRFcnJvci5mb3JtYXRFcnJvcjtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocation = getLocation;\n\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match = void 0;\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n  return { line: line, column: column };\n}\n\n/**\n * Represents a location in a Source.\n */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9sb2NhdGlvbi5qcz8zNmY2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6IjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGdldExvY2F0aW9uO1xuXG5cbi8qKlxuICogVGFrZXMgYSBTb3VyY2UgYW5kIGEgVVRGLTggY2hhcmFjdGVyIG9mZnNldCwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGxpbmUgYW5kIGNvbHVtbiBhcyBhIFNvdXJjZUxvY2F0aW9uLlxuICovXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIGdldExvY2F0aW9uKHNvdXJjZSwgcG9zaXRpb24pIHtcbiAgdmFyIGxpbmVSZWdleHAgPSAvXFxyXFxufFtcXG5cXHJdL2c7XG4gIHZhciBsaW5lID0gMTtcbiAgdmFyIGNvbHVtbiA9IHBvc2l0aW9uICsgMTtcbiAgdmFyIG1hdGNoID0gdm9pZCAwO1xuICB3aGlsZSAoKG1hdGNoID0gbGluZVJlZ2V4cC5leGVjKHNvdXJjZS5ib2R5KSkgJiYgbWF0Y2guaW5kZXggPCBwb3NpdGlvbikge1xuICAgIGxpbmUgKz0gMTtcbiAgICBjb2x1bW4gPSBwb3NpdGlvbiArIDEgLSAobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuICB9XG4gIHJldHVybiB7IGxpbmU6IGxpbmUsIGNvbHVtbjogY29sdW1uIH07XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGxvY2F0aW9uIGluIGEgU291cmNlLlxuICovXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9sb2NhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_apollo_client__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_apollo_cache_inmemory__ = __webpack_require__(58);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_apollo_link_http__ = __webpack_require__(67);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_apollo__ = __webpack_require__(70);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__App_vue__ = __webpack_require__(71);\n// First we import the various pieces of Vue and Apollo.\n\n\n\n\n\n\n// Import our main app component, the top-level container for our app. \n\n\n// Create the link the Apollo Client will manage between our frontend client and GraphQL server. \n// Note that this is setup for development/demo - deployment will require your real URL.\nconst httpLink = new __WEBPACK_IMPORTED_MODULE_3_apollo_link_http__[\"a\" /* HttpLink */]({\n  // You should use an absolute URL here\n  uri: 'http://localhost:4000/graphql'\n});\n\n// Create the apollo client, with the Apollo caching. \nconst apolloClient = new __WEBPACK_IMPORTED_MODULE_1_apollo_client__[\"a\" /* ApolloClient */]({\n  link: httpLink,\n  cache: new __WEBPACK_IMPORTED_MODULE_2_apollo_cache_inmemory__[\"a\" /* InMemoryCache */](),\n  connectToDevTools: true\n});\n\n// Install the vue plugin for VueApollo\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_4_vue_apollo__[\"a\" /* default */]);\n\nconst apolloProvider = new __WEBPACK_IMPORTED_MODULE_4_vue_apollo__[\"a\" /* default */]({\n  defaultClient: apolloClient\n});\n\n// Bootstrap the new Vue app. It grabs onto the div with id=\"app that we created in the Phoenix HTML.\n// We pass the apolloProvider instance to it, so our components can all use the same connection.\nnew __WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */]({\n  el: '#app',\n  apolloProvider,\n  render: h => h(__WEBPACK_IMPORTED_MODULE_5__App_vue__[\"a\" /* default */])\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzPzdhYzkiXSwibmFtZXMiOlsiaHR0cExpbmsiLCJ1cmkiLCJhcG9sbG9DbGllbnQiLCJsaW5rIiwiY2FjaGUiLCJjb25uZWN0VG9EZXZUb29scyIsIlZ1ZSIsInVzZSIsImFwb2xsb1Byb3ZpZGVyIiwiZGVmYXVsdENsaWVudCIsImVsIiwicmVuZGVyIiwiaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTUEsV0FBVyxJQUFJLGtFQUFKLENBQWE7QUFDNUI7QUFDQUMsT0FBSztBQUZ1QixDQUFiLENBQWpCOztBQUtBO0FBQ0EsTUFBTUMsZUFBZSxJQUFJLG1FQUFKLENBQWlCO0FBQ3BDQyxRQUFNSCxRQUQ4QjtBQUVwQ0ksU0FBTyxJQUFJLDRFQUFKLEVBRjZCO0FBR3BDQyxxQkFBbUI7QUFIaUIsQ0FBakIsQ0FBckI7O0FBTUE7QUFDQSxvREFBQUMsQ0FBSUMsR0FBSixDQUFRLDJEQUFSOztBQUVBLE1BQU1DLGlCQUFpQixJQUFJLDJEQUFKLENBQWM7QUFDbkNDLGlCQUFlUDtBQURvQixDQUFkLENBQXZCOztBQUlBO0FBQ0E7QUFDQSxJQUFJLG9EQUFKLENBQVE7QUFDTlEsTUFBSSxNQURFO0FBRU5GLGdCQUZNO0FBR05HLFVBQVFDLEtBQUtBLEVBQUUseURBQUY7QUFIUCxDQUFSIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlyc3Qgd2UgaW1wb3J0IHRoZSB2YXJpb3VzIHBpZWNlcyBvZiBWdWUgYW5kIEFwb2xsby5cbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IHsgQXBvbGxvQ2xpZW50IH0gZnJvbSAnYXBvbGxvLWNsaWVudCdcbmltcG9ydCB7IEluTWVtb3J5Q2FjaGUgfSBmcm9tICdhcG9sbG8tY2FjaGUtaW5tZW1vcnknXG5pbXBvcnQgeyBIdHRwTGluayB9IGZyb20gJ2Fwb2xsby1saW5rLWh0dHAnXG5pbXBvcnQgVnVlQXBvbGxvIGZyb20gJ3Z1ZS1hcG9sbG8nXG5cblxuLy8gSW1wb3J0IG91ciBtYWluIGFwcCBjb21wb25lbnQsIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciBvdXIgYXBwLiBcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xuXG4vLyBDcmVhdGUgdGhlIGxpbmsgdGhlIEFwb2xsbyBDbGllbnQgd2lsbCBtYW5hZ2UgYmV0d2VlbiBvdXIgZnJvbnRlbmQgY2xpZW50IGFuZCBHcmFwaFFMIHNlcnZlci4gXG4vLyBOb3RlIHRoYXQgdGhpcyBpcyBzZXR1cCBmb3IgZGV2ZWxvcG1lbnQvZGVtbyAtIGRlcGxveW1lbnQgd2lsbCByZXF1aXJlIHlvdXIgcmVhbCBVUkwuXG5jb25zdCBodHRwTGluayA9IG5ldyBIdHRwTGluayh7XG4gIC8vIFlvdSBzaG91bGQgdXNlIGFuIGFic29sdXRlIFVSTCBoZXJlXG4gIHVyaTogJ2h0dHA6Ly9sb2NhbGhvc3Q6NDAwMC9ncmFwaHFsJyxcbn0pXG5cbi8vIENyZWF0ZSB0aGUgYXBvbGxvIGNsaWVudCwgd2l0aCB0aGUgQXBvbGxvIGNhY2hpbmcuIFxuY29uc3QgYXBvbGxvQ2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gIGxpbms6IGh0dHBMaW5rLFxuICBjYWNoZTogbmV3IEluTWVtb3J5Q2FjaGUoKSxcbiAgY29ubmVjdFRvRGV2VG9vbHM6IHRydWUsXG59KVxuXG4vLyBJbnN0YWxsIHRoZSB2dWUgcGx1Z2luIGZvciBWdWVBcG9sbG9cblZ1ZS51c2UoVnVlQXBvbGxvKVxuXG5jb25zdCBhcG9sbG9Qcm92aWRlciA9IG5ldyBWdWVBcG9sbG8oe1xuICBkZWZhdWx0Q2xpZW50OiBhcG9sbG9DbGllbnQsXG59KVxuXG4vLyBCb290c3RyYXAgdGhlIG5ldyBWdWUgYXBwLiBJdCBncmFicyBvbnRvIHRoZSBkaXYgd2l0aCBpZD1cImFwcCB0aGF0IHdlIGNyZWF0ZWQgaW4gdGhlIFBob2VuaXggSFRNTC5cbi8vIFdlIHBhc3MgdGhlIGFwb2xsb1Byb3ZpZGVyIGluc3RhbmNlIHRvIGl0LCBzbyBvdXIgY29tcG9uZW50cyBjYW4gYWxsIHVzZSB0aGUgc2FtZSBjb25uZWN0aW9uLlxubmV3IFZ1ZSh7XG4gIGVsOiAnI2FwcCcsXG4gIGFwb2xsb1Byb3ZpZGVyLFxuICByZW5kZXI6IGggPT4gaChBcHApXG59KVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9hcHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global, setImmediate) {/*!\n * Vue.js v2.5.13\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode, deep) {\n  var componentOptions = vnode.componentOptions;\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  if (deep) {\n    if (vnode.children) {\n      cloned.children = cloneVNodes(vnode.children, true);\n    }\n    if (componentOptions && componentOptions.children) {\n      componentOptions.children = cloneVNodes(componentOptions.children, true);\n    }\n  }\n  return cloned\n}\n\nfunction cloneVNodes (vnodes, deep) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i], deep);\n  }\n  return res\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && process.env.NODE_ENV !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    // skip validation for weex recycle-list child component props\n    !(false && isObject(value) && ('@binding' in value))\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (process.env.NODE_ENV !== 'production') {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both micro and macro tasks.\n// In < 2.4 we used micro tasks everywhere, but there are some scenarios where\n// micro tasks have too high a priority and fires in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using macro tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use micro task by default, but expose a way to force macro task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) Task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine MicroTask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a Task instead of a MicroTask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  keyOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(keyOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    observerState.shouldConvert = false;\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    observerState.shouldConvert = true;\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (process.env.NODE_ENV !== 'production') {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (process.env.NODE_ENV !== 'production' && slotNodes._rendered) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias,\n  eventKeyName\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (keyCodes) {\n    if (Array.isArray(keyCodes)) {\n      return keyCodes.indexOf(eventKeyCode) === -1\n    } else {\n      return keyCodes !== eventKeyCode\n    }\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm = Object.create(parent);\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    vnode.fnContext = contextVm;\n    vnode.fnOptions = options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // if the parent didn't update, the slot nodes will be the ones from\n      // last render. They need to be cloned to ensure \"freshness\" for this render.\n      for (var key in vm.$slots) {\n        var slot = vm.$slots[key];\n        // _rendered is a flag added by renderSlot, but may not be present\n        // if the slot is passed from manually written render functions\n        if (slot._rendered || (slot[0] && slot[0].elm)) {\n          vm.$slots[key] = cloneVNodes(slot, true /* deep */);\n        }\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue$3)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.5.13';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (process.env.NODE_ENV !== 'production') {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setAttribute(vnode.elm, i, '');\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (process.env.NODE_ENV !== 'production') {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // #7138: IE10 & 11 fires input event when setting placeholder on\n      // <textarea>... block the first input event and remove the blocker\n      // immediately.\n      /* istanbul ignore if */\n      if (\n        isIE && !isIE9 &&\n        el.tagName === 'TEXTAREA' &&\n        key === 'placeholder' && !el.__ieph\n      ) {\n        var blocker = function (e) {\n          e.stopImmediatePropagation();\n          el.removeEventListener('input', blocker);\n        };\n        el.addEventListener('input', blocker);\n        // $flow-disable-line\n        el.__ieph = true; /* IE placeholder patched */\n      }\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value) {\n  el.attrsMap[name] = value;\n  el.attrsList.push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  el.plain = false;\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    process.env.NODE_ENV !== 'production' && warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (name === 'click') {\n    if (modifiers.right) {\n      name = 'contextmenu';\n      delete modifiers.right;\n    } else if (modifiers.middle) {\n      name = 'mouseup';\n    }\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = { value: value };\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + value + \"=$$a.concat([$$v]))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  if (process.env.NODE_ENV !== 'production') {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    if (value$1) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally'\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nVue$3.nextTick(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function closeElement (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        // element-scope stuff\n        processElement(element, options);\n      }\n\n      function checkRootConstraints (el) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      closeElement(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var res;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (element, options) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = !element.key && !element.attrsList.length;\n\n  processRef(element);\n  processSlot(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n    }\n  }\n}\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '');\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotScope;\n    if (el.tag === 'template') {\n      slotScope = getAndRemoveAttr(el, 'scope');\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && slotScope) {\n        warn$2(\n          \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n          \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n          \"can also be used on plain elements in addition to <template> to \" +\n          \"denote scoped slots.\",\n          true\n        );\n      }\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && el.attrsMap['v-for']) {\n        warn$2(\n          \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n          \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n          \"scoped slot to make it clearer.\",\n          true\n        );\n      }\n      el.slotScope = slotScope;\n    }\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      // only for non-scoped slots.\n      if (el.tag !== 'template' && !el.slotScope) {\n        addAttr(el, 'slot', slotTarget);\n      }\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true');\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\n/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model=\"data[type]\" :type=\"type\">\n * into this:\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\n */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (map['v-model'] && (map['v-bind:type'] || map[':type'])) {\n      var typeBinding = getBindingAttr(el, 'type');\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$2 = {\n  preTransformNode: preTransformNode\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$2\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    /* istanbul ignore if */\n    return (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    /* istanbul ignore if */\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var code = keyCodes[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(code)) + \",\" +\n    \"$event.key)\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (process.env.NODE_ENV !== 'production' && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (process.env.NODE_ENV !== 'production' &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (\n    el.children.length !== 1 || ast.type !== 1\n  )) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  var fn = \"function(\" + (String(el.slotScope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if\n        ? ((el.if) + \"?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  return (\"{key:\" + key + \",fn:\" + fn + \"}\")\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    /* istanbul ignore if */\n    {\n      res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n    }\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  errors\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n    }\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim())\n      );\n    } else {\n      errors.push(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\"\n      );\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (process.env.NODE_ENV !== 'production') {\n      if (compiled.errors && compiled.errors.length) {\n        warn$$1(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (process.env.NODE_ENV !== 'production') {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue$3);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(6), __webpack_require__(1), __webpack_require__(31).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(32);\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz9kN2FkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1laWRhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(6)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_graphql_language_printer__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_graphql_language_printer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_graphql_language_printer__);\n/* unused harmony reexport printAST */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_ObservableQuery__ = __webpack_require__(7);\n/* unused harmony reexport ObservableQuery */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_networkStatus__ = __webpack_require__(3);\n/* unused harmony reexport NetworkStatus */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_types__ = __webpack_require__(5);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__errors_ApolloError__ = __webpack_require__(11);\n/* unused harmony reexport ApolloError */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ApolloClient__ = __webpack_require__(49);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_5__ApolloClient__[\"a\"]; });\n\n\n\n\n\n\n\n/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_5__ApolloClient__[\"a\" /* default */]);\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC9pbmRleC5qcz9iYjVmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBNEI7QUFDRDtBQUNIO0FBQ3hCO0FBQ3NCO0FBQ3RCO0FBQ1E7QUFDUjtBQUNBIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgcHJpbnQgYXMgcHJpbnRBU1QgfSBmcm9tICdncmFwaHFsL2xhbmd1YWdlL3ByaW50ZXInO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZVF1ZXJ5LCB9IGZyb20gJy4vY29yZS9PYnNlcnZhYmxlUXVlcnknO1xuZXhwb3J0IHsgTmV0d29ya1N0YXR1cyB9IGZyb20gJy4vY29yZS9uZXR3b3JrU3RhdHVzJztcbmV4cG9ydCAqIGZyb20gJy4vY29yZS90eXBlcyc7XG5leHBvcnQgeyBBcG9sbG9FcnJvciB9IGZyb20gJy4vZXJyb3JzL0Fwb2xsb0Vycm9yJztcbmltcG9ydCBBcG9sbG9DbGllbnQgZnJvbSAnLi9BcG9sbG9DbGllbnQnO1xuZXhwb3J0IHsgQXBvbGxvQ2xpZW50IH07XG5leHBvcnQgZGVmYXVsdCBBcG9sbG9DbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tY2xpZW50L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visit = visit;\nexports.visitInParallel = visitInParallel;\nexports.visitWithTypeInfo = visitWithTypeInfo;\nexports.getVisitFn = getVisitFn;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar QueryDocumentKeys = exports.QueryDocumentKeys = {\n  Name: [],\n\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', 'typeCondition', 'directives', 'selectionSet'],\n\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n\n  Directive: ['name', 'arguments'],\n\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n\n  ScalarTypeDefinition: ['name', 'directives'],\n  ObjectTypeDefinition: ['name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['name', 'directives', 'fields'],\n  UnionTypeDefinition: ['name', 'directives', 'types'],\n  EnumTypeDefinition: ['name', 'directives', 'values'],\n  EnumValueDefinition: ['name', 'directives'],\n  InputObjectTypeDefinition: ['name', 'directives', 'fields'],\n\n  TypeExtensionDefinition: ['definition'],\n\n  DirectiveDefinition: ['name', 'arguments', 'locations']\n};\n\nvar BREAK = exports.BREAK = {};\n\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\nfunction visit(root, visitor, keyMap) {\n  var visitorKeys = keyMap || QueryDocumentKeys;\n\n  var stack = void 0;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var parent = void 0;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var key = void 0;\n    var node = void 0;\n    var isEdited = isLeaving && edits.length !== 0;\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path.pop();\n      node = parent;\n      parent = ancestors.pop();\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n          for (var k in node) {\n            if (node.hasOwnProperty(k)) {\n              clone[k] = node[k];\n            }\n          }\n          node = clone;\n        }\n        var editOffset = 0;\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n          if (inArray) {\n            editKey -= editOffset;\n          }\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n      if (node === null || node === undefined) {\n        continue;\n      }\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + JSON.stringify(node));\n      }\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (!isLeaving) {\n      stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n      if (parent) {\n        ancestors.push(parent);\n      }\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return maybeNode && typeof maybeNode.kind === 'string';\n}\n\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\nfunction visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\nfunction visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n        if (result !== undefined) {\n          typeInfo.leave(node);\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);\n      var result = void 0;\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\nfunction getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n      var specificKindVisitor = specificVisitor[kind];\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = getDirectiveInfoFromField;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = shouldInclude;\n/* unused harmony export flattenSelections */\n/* unused harmony export getDirectiveNames */\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = hasDirectives;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__storeUtils__ = __webpack_require__(8);\n\nfunction getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = Object(__WEBPACK_IMPORTED_MODULE_0__storeUtils__[\"a\" /* argumentsObjectFromField */])(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nfunction shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    if (!selection.directives) {\n        return true;\n    }\n    var res = true;\n    selection.directives.forEach(function (directive) {\n        if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\n            return;\n        }\n        var directiveArguments = directive.arguments || [];\n        var directiveName = directive.name.value;\n        if (directiveArguments.length !== 1) {\n            throw new Error(\"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        }\n        var ifArgument = directiveArguments[0];\n        if (!ifArgument.name || ifArgument.name.value !== 'if') {\n            throw new Error(\"Invalid argument for the @\" + directiveName + \" directive.\");\n        }\n        var ifValue = directiveArguments[0].value;\n        var evaledValue = false;\n        if (!ifValue || ifValue.kind !== 'BooleanValue') {\n            if (ifValue.kind !== 'Variable') {\n                throw new Error(\"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n            }\n            else {\n                evaledValue = variables[ifValue.name.value];\n                if (evaledValue === undefined) {\n                    throw new Error(\"Invalid variable referenced in @\" + directiveName + \" directive.\");\n                }\n            }\n        }\n        else {\n            evaledValue = ifValue.value;\n        }\n        if (directiveName === 'skip') {\n            evaledValue = !evaledValue;\n        }\n        if (!evaledValue) {\n            res = false;\n        }\n    });\n    return res;\n}\nfunction flattenSelections(selection) {\n    if (!selection.selectionSet ||\n        !(selection.selectionSet.selections.length > 0))\n        return [selection];\n    return [selection].concat(selection.selectionSet.selections\n        .map(function (selectionNode) {\n        return [selectionNode].concat(flattenSelections(selectionNode));\n    })\n        .reduce(function (selections, selected) { return selections.concat(selected); }, []));\n}\nvar added = new Map();\nfunction getDirectiveNames(doc) {\n    var cached = added.get(doc);\n    if (cached)\n        return cached;\n    var directives = doc.definitions\n        .filter(function (definition) {\n        return definition.selectionSet && definition.selectionSet.selections;\n    })\n        .map(function (x) { return flattenSelections(x); })\n        .reduce(function (selections, selected) { return selections.concat(selected); }, [])\n        .filter(function (selection) {\n        return selection.directives && selection.directives.length > 0;\n    })\n        .map(function (selection) { return selection.directives; })\n        .reduce(function (directives, directive) { return directives.concat(directive); }, [])\n        .map(function (directive) { return directive.name.value; });\n    added.set(doc, directives);\n    return directives;\n}\nfunction hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\n//# sourceMappingURL=directives.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvZGlyZWN0aXZlcy5qcz9kOGMxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsZ0JBQWdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaURBQWlELG9DQUFvQyxFQUFFO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwyQkFBMkIsNkJBQTZCLEVBQUU7QUFDMUQsaURBQWlELG9DQUFvQyxFQUFFO0FBQ3ZGO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsbUNBQW1DLDZCQUE2QixFQUFFO0FBQ2xFLGtEQUFrRCxxQ0FBcUMsRUFBRTtBQUN6RixtQ0FBbUMsNkJBQTZCLEVBQUU7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsaUNBQWlDLEVBQUU7QUFDM0Y7QUFDQSIsImZpbGUiOiIzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFyZ3VtZW50c09iamVjdEZyb21GaWVsZCB9IGZyb20gJy4vc3RvcmVVdGlscyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlyZWN0aXZlSW5mb0Zyb21GaWVsZChmaWVsZCwgdmFyaWFibGVzKSB7XG4gICAgaWYgKGZpZWxkLmRpcmVjdGl2ZXMgJiYgZmllbGQuZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGRpcmVjdGl2ZU9ial8xID0ge307XG4gICAgICAgIGZpZWxkLmRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICBkaXJlY3RpdmVPYmpfMVtkaXJlY3RpdmUubmFtZS52YWx1ZV0gPSBhcmd1bWVudHNPYmplY3RGcm9tRmllbGQoZGlyZWN0aXZlLCB2YXJpYWJsZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZU9ial8xO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRJbmNsdWRlKHNlbGVjdGlvbiwgdmFyaWFibGVzKSB7XG4gICAgaWYgKHZhcmlhYmxlcyA9PT0gdm9pZCAwKSB7IHZhcmlhYmxlcyA9IHt9OyB9XG4gICAgaWYgKCFzZWxlY3Rpb24uZGlyZWN0aXZlcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IHRydWU7XG4gICAgc2VsZWN0aW9uLmRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgIGlmIChkaXJlY3RpdmUubmFtZS52YWx1ZSAhPT0gJ3NraXAnICYmIGRpcmVjdGl2ZS5uYW1lLnZhbHVlICE9PSAnaW5jbHVkZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGlyZWN0aXZlQXJndW1lbnRzID0gZGlyZWN0aXZlLmFyZ3VtZW50cyB8fCBbXTtcbiAgICAgICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZS52YWx1ZTtcbiAgICAgICAgaWYgKGRpcmVjdGl2ZUFyZ3VtZW50cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzIGZvciB0aGUgQFwiICsgZGlyZWN0aXZlTmFtZSArIFwiIGRpcmVjdGl2ZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlmQXJndW1lbnQgPSBkaXJlY3RpdmVBcmd1bWVudHNbMF07XG4gICAgICAgIGlmICghaWZBcmd1bWVudC5uYW1lIHx8IGlmQXJndW1lbnQubmFtZS52YWx1ZSAhPT0gJ2lmJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBmb3IgdGhlIEBcIiArIGRpcmVjdGl2ZU5hbWUgKyBcIiBkaXJlY3RpdmUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZlZhbHVlID0gZGlyZWN0aXZlQXJndW1lbnRzWzBdLnZhbHVlO1xuICAgICAgICB2YXIgZXZhbGVkVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFpZlZhbHVlIHx8IGlmVmFsdWUua2luZCAhPT0gJ0Jvb2xlYW5WYWx1ZScpIHtcbiAgICAgICAgICAgIGlmIChpZlZhbHVlLmtpbmQgIT09ICdWYXJpYWJsZScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCBmb3IgdGhlIEBcIiArIGRpcmVjdGl2ZU5hbWUgKyBcIiBkaXJlY3RpdmUgbXVzdCBiZSBhIHZhcmlhYmxlIG9yIGEgYm9vbGVhbiB2YWx1ZS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBldmFsZWRWYWx1ZSA9IHZhcmlhYmxlc1tpZlZhbHVlLm5hbWUudmFsdWVdO1xuICAgICAgICAgICAgICAgIGlmIChldmFsZWRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFyaWFibGUgcmVmZXJlbmNlZCBpbiBAXCIgKyBkaXJlY3RpdmVOYW1lICsgXCIgZGlyZWN0aXZlLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBldmFsZWRWYWx1ZSA9IGlmVmFsdWUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGl2ZU5hbWUgPT09ICdza2lwJykge1xuICAgICAgICAgICAgZXZhbGVkVmFsdWUgPSAhZXZhbGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFldmFsZWRWYWx1ZSkge1xuICAgICAgICAgICAgcmVzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW5TZWxlY3Rpb25zKHNlbGVjdGlvbikge1xuICAgIGlmICghc2VsZWN0aW9uLnNlbGVjdGlvblNldCB8fFxuICAgICAgICAhKHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5sZW5ndGggPiAwKSlcbiAgICAgICAgcmV0dXJuIFtzZWxlY3Rpb25dO1xuICAgIHJldHVybiBbc2VsZWN0aW9uXS5jb25jYXQoc2VsZWN0aW9uLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHNlbGVjdGlvbk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIFtzZWxlY3Rpb25Ob2RlXS5jb25jYXQoZmxhdHRlblNlbGVjdGlvbnMoc2VsZWN0aW9uTm9kZSkpO1xuICAgIH0pXG4gICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHNlbGVjdGlvbnMsIHNlbGVjdGVkKSB7IHJldHVybiBzZWxlY3Rpb25zLmNvbmNhdChzZWxlY3RlZCk7IH0sIFtdKSk7XG59XG52YXIgYWRkZWQgPSBuZXcgTWFwKCk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlyZWN0aXZlTmFtZXMoZG9jKSB7XG4gICAgdmFyIGNhY2hlZCA9IGFkZGVkLmdldChkb2MpO1xuICAgIGlmIChjYWNoZWQpXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSBkb2MuZGVmaW5pdGlvbnNcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbi5zZWxlY3Rpb25TZXQgJiYgZGVmaW5pdGlvbi5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucztcbiAgICB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiBmbGF0dGVuU2VsZWN0aW9ucyh4KTsgfSlcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoc2VsZWN0aW9ucywgc2VsZWN0ZWQpIHsgcmV0dXJuIHNlbGVjdGlvbnMuY29uY2F0KHNlbGVjdGVkKTsgfSwgW10pXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uLmRpcmVjdGl2ZXMgJiYgc2VsZWN0aW9uLmRpcmVjdGl2ZXMubGVuZ3RoID4gMDtcbiAgICB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHsgcmV0dXJuIHNlbGVjdGlvbi5kaXJlY3RpdmVzOyB9KVxuICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChkaXJlY3RpdmVzLCBkaXJlY3RpdmUpIHsgcmV0dXJuIGRpcmVjdGl2ZXMuY29uY2F0KGRpcmVjdGl2ZSk7IH0sIFtdKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChkaXJlY3RpdmUpIHsgcmV0dXJuIGRpcmVjdGl2ZS5uYW1lLnZhbHVlOyB9KTtcbiAgICBhZGRlZC5zZXQoZG9jLCBkaXJlY3RpdmVzKTtcbiAgICByZXR1cm4gZGlyZWN0aXZlcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNEaXJlY3RpdmVzKG5hbWVzLCBkb2MpIHtcbiAgICByZXR1cm4gZ2V0RGlyZWN0aXZlTmFtZXMoZG9jKS5zb21lKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBuYW1lcy5pbmRleE9mKG5hbWUpID4gLTE7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlcy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tdXRpbGl0aWVzL2xpYi9kaXJlY3RpdmVzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = getFragmentQueryDocument;\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nfunction getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw new Error(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        if (fragments.length !== 1) {\n            throw new Error(\"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        }\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n//# sourceMappingURL=fragments.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvZnJhZ21lbnRzLmpzP2M5N2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBLDRDQUE0QyxPQUFPO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGFBQWE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3Qix5QkFBeUI7QUFDekI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnRRdWVyeURvY3VtZW50KGRvY3VtZW50LCBmcmFnbWVudE5hbWUpIHtcbiAgICB2YXIgYWN0dWFsRnJhZ21lbnROYW1lID0gZnJhZ21lbnROYW1lO1xuICAgIHZhciBmcmFnbWVudHMgPSBbXTtcbiAgICBkb2N1bWVudC5kZWZpbml0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgICAgIGlmIChkZWZpbml0aW9uLmtpbmQgPT09ICdPcGVyYXRpb25EZWZpbml0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRm91bmQgYSBcIiArIGRlZmluaXRpb24ub3BlcmF0aW9uICsgXCIgb3BlcmF0aW9uXCIgKyAoZGVmaW5pdGlvbi5uYW1lID8gXCIgbmFtZWQgJ1wiICsgZGVmaW5pdGlvbi5uYW1lLnZhbHVlICsgXCInXCIgOiAnJykgKyBcIi4gXCIgK1xuICAgICAgICAgICAgICAgICdObyBvcGVyYXRpb25zIGFyZSBhbGxvd2VkIHdoZW4gdXNpbmcgYSBmcmFnbWVudCBhcyBhIHF1ZXJ5LiBPbmx5IGZyYWdtZW50cyBhcmUgYWxsb3dlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5pdGlvbi5raW5kID09PSAnRnJhZ21lbnREZWZpbml0aW9uJykge1xuICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2goZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGFjdHVhbEZyYWdtZW50TmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKGZyYWdtZW50cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZvdW5kIFwiICsgZnJhZ21lbnRzLmxlbmd0aCArIFwiIGZyYWdtZW50cy4gYGZyYWdtZW50TmFtZWAgbXVzdCBiZSBwcm92aWRlZCB3aGVuIHRoZXJlIGlzIG5vdCBleGFjdGx5IDEgZnJhZ21lbnQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGFjdHVhbEZyYWdtZW50TmFtZSA9IGZyYWdtZW50c1swXS5uYW1lLnZhbHVlO1xuICAgIH1cbiAgICB2YXIgcXVlcnkgPSBfX2Fzc2lnbih7fSwgZG9jdW1lbnQsIHsgZGVmaW5pdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBraW5kOiAnT3BlcmF0aW9uRGVmaW5pdGlvbicsXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvblNldDoge1xuICAgICAgICAgICAgICAgICAgICBraW5kOiAnU2VsZWN0aW9uU2V0JyxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdGcmFnbWVudFNwcmVhZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhY3R1YWxGcmFnbWVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgXS5jb25jYXQoZG9jdW1lbnQuZGVmaW5pdGlvbnMpIH0pO1xuICAgIHJldHVybiBxdWVyeTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyYWdtZW50cy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tdXRpbGl0aWVzL2xpYi9mcmFnbWVudHMuanNcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export removeDirectivesFromDocument */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = addTypenameToDocument;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = removeConnectionDirectiveFromDocument;\n/* unused harmony export getDirectivesFromDocument */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_cloneDeep__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getFromAST__ = __webpack_require__(14);\n\n\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isNotEmpty(op, fragments) {\n    return (op.selectionSet.selections.filter(function (selectionSet) {\n        return !(selectionSet &&\n            selectionSet.kind === 'FragmentSpread' &&\n            !isNotEmpty(fragments[selectionSet.name.value], fragments));\n    }).length > 0);\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            if (dir.name && dir.name === directive.name.value)\n                return true;\n            if (dir.test && dir.test(directive))\n                return true;\n            return false;\n        });\n    };\n}\nfunction addTypenameToSelectionSet(selectionSet, isRoot) {\n    if (isRoot === void 0) { isRoot = false; }\n    if (selectionSet.selections) {\n        if (!isRoot) {\n            var alreadyHasThisField = selectionSet.selections.some(function (selection) {\n                return (selection.kind === 'Field' &&\n                    selection.name.value === '__typename');\n            });\n            if (!alreadyHasThisField) {\n                selectionSet.selections.push(TYPENAME_FIELD);\n            }\n        }\n        selectionSet.selections.forEach(function (selection) {\n            if (selection.kind === 'Field') {\n                if (selection.name.value.lastIndexOf('__', 0) !== 0 &&\n                    selection.selectionSet) {\n                    addTypenameToSelectionSet(selection.selectionSet);\n                }\n            }\n            else if (selection.kind === 'InlineFragment') {\n                if (selection.selectionSet) {\n                    addTypenameToSelectionSet(selection.selectionSet);\n                }\n            }\n        });\n    }\n}\nfunction removeDirectivesFromSelectionSet(directives, selectionSet) {\n    if (!selectionSet.selections)\n        return selectionSet;\n    var agressiveRemove = directives.some(function (dir) { return dir.remove; });\n    selectionSet.selections = selectionSet.selections\n        .map(function (selection) {\n        if (selection.kind !== 'Field' ||\n            !selection ||\n            !selection.directives)\n            return selection;\n        var directiveMatcher = getDirectiveMatcher(directives);\n        var remove;\n        selection.directives = selection.directives.filter(function (directive) {\n            var shouldKeep = !directiveMatcher(directive);\n            if (!remove && !shouldKeep && agressiveRemove)\n                remove = true;\n            return shouldKeep;\n        });\n        return remove ? null : selection;\n    })\n        .filter(function (x) { return !!x; });\n    selectionSet.selections.forEach(function (selection) {\n        if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            removeDirectivesFromSelectionSet(directives, selection.selectionSet);\n        }\n    });\n    return selectionSet;\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    var docClone = Object(__WEBPACK_IMPORTED_MODULE_0__util_cloneDeep__[\"a\" /* cloneDeep */])(doc);\n    docClone.definitions.forEach(function (definition) {\n        removeDirectivesFromSelectionSet(directives, definition.selectionSet);\n    });\n    var operation = Object(__WEBPACK_IMPORTED_MODULE_1__getFromAST__[\"h\" /* getOperationDefinitionOrDie */])(docClone);\n    var fragments = Object(__WEBPACK_IMPORTED_MODULE_1__getFromAST__[\"b\" /* createFragmentMap */])(Object(__WEBPACK_IMPORTED_MODULE_1__getFromAST__[\"d\" /* getFragmentDefinitions */])(docClone));\n    return isNotEmpty(operation, fragments) ? docClone : null;\n}\nvar added = new Map();\nfunction addTypenameToDocument(doc) {\n    Object(__WEBPACK_IMPORTED_MODULE_1__getFromAST__[\"a\" /* checkDocument */])(doc);\n    var cached = added.get(doc);\n    if (cached)\n        return cached;\n    var docClone = Object(__WEBPACK_IMPORTED_MODULE_0__util_cloneDeep__[\"a\" /* cloneDeep */])(doc);\n    docClone.definitions.forEach(function (definition) {\n        var isRoot = definition.kind === 'OperationDefinition';\n        addTypenameToSelectionSet(definition.selectionSet, isRoot);\n    });\n    added.set(doc, docClone);\n    return docClone;\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                console.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nvar removed = new Map();\nfunction removeConnectionDirectiveFromDocument(doc) {\n    Object(__WEBPACK_IMPORTED_MODULE_1__getFromAST__[\"a\" /* checkDocument */])(doc);\n    var cached = removed.get(doc);\n    if (cached)\n        return cached;\n    var docClone = removeDirectivesFromDocument([connectionRemoveConfig], doc);\n    removed.set(doc, docClone);\n    return docClone;\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!(selectionSet && selectionSet.selections)) {\n        return false;\n    }\n    var matchedSelections = selectionSet.selections.filter(function (selection) {\n        return hasDirectivesInSelection(directives, selection, nestedCheck);\n    });\n    return matchedSelections.length > 0;\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (selection.kind !== 'Field' || !selection) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var matchedDirectives = selection.directives.filter(directiveMatcher);\n    return (matchedDirectives.length > 0 ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromSelectionSet(directives, selectionSet) {\n    selectionSet.selections = selectionSet.selections\n        .filter(function (selection) {\n        return hasDirectivesInSelection(directives, selection, true);\n    })\n        .map(function (selection) {\n        if (hasDirectivesInSelection(directives, selection, false)) {\n            return selection;\n        }\n        if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            selection.selectionSet = getDirectivesFromSelectionSet(directives, selection.selectionSet);\n        }\n        return selection;\n    });\n    return selectionSet;\n}\nfunction getDirectivesFromDocument(directives, doc) {\n    Object(__WEBPACK_IMPORTED_MODULE_1__getFromAST__[\"a\" /* checkDocument */])(doc);\n    var docClone = Object(__WEBPACK_IMPORTED_MODULE_0__util_cloneDeep__[\"a\" /* cloneDeep */])(doc);\n    docClone.definitions = docClone.definitions.map(function (definition) {\n        if ((definition.kind === 'OperationDefinition' ||\n            definition.kind === 'FragmentDefinition') &&\n            definition.selectionSet) {\n            definition.selectionSet = getDirectivesFromSelectionSet(directives, definition.selectionSet);\n        }\n        return definition;\n    });\n    var operation = Object(__WEBPACK_IMPORTED_MODULE_1__getFromAST__[\"h\" /* getOperationDefinitionOrDie */])(docClone);\n    var fragments = Object(__WEBPACK_IMPORTED_MODULE_1__getFromAST__[\"b\" /* createFragmentMap */])(Object(__WEBPACK_IMPORTED_MODULE_1__getFromAST__[\"d\" /* getFragmentDefinitions */])(docClone));\n    return isNotEmpty(operation, fragments) ? docClone : null;\n}\n//# sourceMappingURL=transform.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvdHJhbnNmb3JtLmpzP2ZlMmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9CO0FBQzZFO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxtQkFBbUIsRUFBRTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCw4QkFBOEIsWUFBWSxFQUFFO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxpQ0FBaUMsRUFBRTtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxvQkFBb0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsb0JBQW9CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJy4vdXRpbC9jbG9uZURlZXAnO1xuaW1wb3J0IHsgY2hlY2tEb2N1bWVudCwgZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbk9yRGllLCBnZXRGcmFnbWVudERlZmluaXRpb25zLCBjcmVhdGVGcmFnbWVudE1hcCwgfSBmcm9tICcuL2dldEZyb21BU1QnO1xudmFyIFRZUEVOQU1FX0ZJRUxEID0ge1xuICAgIGtpbmQ6ICdGaWVsZCcsXG4gICAgbmFtZToge1xuICAgICAgICBraW5kOiAnTmFtZScsXG4gICAgICAgIHZhbHVlOiAnX190eXBlbmFtZScsXG4gICAgfSxcbn07XG5mdW5jdGlvbiBpc05vdEVtcHR5KG9wLCBmcmFnbWVudHMpIHtcbiAgICByZXR1cm4gKG9wLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zLmZpbHRlcihmdW5jdGlvbiAoc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgIHJldHVybiAhKHNlbGVjdGlvblNldCAmJlxuICAgICAgICAgICAgc2VsZWN0aW9uU2V0LmtpbmQgPT09ICdGcmFnbWVudFNwcmVhZCcgJiZcbiAgICAgICAgICAgICFpc05vdEVtcHR5KGZyYWdtZW50c1tzZWxlY3Rpb25TZXQubmFtZS52YWx1ZV0sIGZyYWdtZW50cykpO1xuICAgIH0pLmxlbmd0aCA+IDApO1xufVxuZnVuY3Rpb24gZ2V0RGlyZWN0aXZlTWF0Y2hlcihkaXJlY3RpdmVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRpcmVjdGl2ZU1hdGNoZXIoZGlyZWN0aXZlKSB7XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmVzLnNvbWUoZnVuY3Rpb24gKGRpcikge1xuICAgICAgICAgICAgaWYgKGRpci5uYW1lICYmIGRpci5uYW1lID09PSBkaXJlY3RpdmUubmFtZS52YWx1ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChkaXIudGVzdCAmJiBkaXIudGVzdChkaXJlY3RpdmUpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYWRkVHlwZW5hbWVUb1NlbGVjdGlvblNldChzZWxlY3Rpb25TZXQsIGlzUm9vdCkge1xuICAgIGlmIChpc1Jvb3QgPT09IHZvaWQgMCkgeyBpc1Jvb3QgPSBmYWxzZTsgfVxuICAgIGlmIChzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucykge1xuICAgICAgICBpZiAoIWlzUm9vdCkge1xuICAgICAgICAgICAgdmFyIGFscmVhZHlIYXNUaGlzRmllbGQgPSBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5zb21lKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNlbGVjdGlvbi5raW5kID09PSAnRmllbGQnICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5uYW1lLnZhbHVlID09PSAnX190eXBlbmFtZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWFscmVhZHlIYXNUaGlzRmllbGQpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5wdXNoKFRZUEVOQU1FX0ZJRUxEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gJ0ZpZWxkJykge1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24ubmFtZS52YWx1ZS5sYXN0SW5kZXhPZignX18nLCAwKSAhPT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFR5cGVuYW1lVG9TZWxlY3Rpb25TZXQoc2VsZWN0aW9uLnNlbGVjdGlvblNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0aW9uLmtpbmQgPT09ICdJbmxpbmVGcmFnbWVudCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uLnNlbGVjdGlvblNldCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRUeXBlbmFtZVRvU2VsZWN0aW9uU2V0KHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlRGlyZWN0aXZlc0Zyb21TZWxlY3Rpb25TZXQoZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0KSB7XG4gICAgaWYgKCFzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvblNldDtcbiAgICB2YXIgYWdyZXNzaXZlUmVtb3ZlID0gZGlyZWN0aXZlcy5zb21lKGZ1bmN0aW9uIChkaXIpIHsgcmV0dXJuIGRpci5yZW1vdmU7IH0pO1xuICAgIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zID0gc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnNcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb24ua2luZCAhPT0gJ0ZpZWxkJyB8fFxuICAgICAgICAgICAgIXNlbGVjdGlvbiB8fFxuICAgICAgICAgICAgIXNlbGVjdGlvbi5kaXJlY3RpdmVzKVxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgICAgICAgdmFyIGRpcmVjdGl2ZU1hdGNoZXIgPSBnZXREaXJlY3RpdmVNYXRjaGVyKGRpcmVjdGl2ZXMpO1xuICAgICAgICB2YXIgcmVtb3ZlO1xuICAgICAgICBzZWxlY3Rpb24uZGlyZWN0aXZlcyA9IHNlbGVjdGlvbi5kaXJlY3RpdmVzLmZpbHRlcihmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICB2YXIgc2hvdWxkS2VlcCA9ICFkaXJlY3RpdmVNYXRjaGVyKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICBpZiAoIXJlbW92ZSAmJiAhc2hvdWxkS2VlcCAmJiBhZ3Jlc3NpdmVSZW1vdmUpXG4gICAgICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBzaG91bGRLZWVwO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlbW92ZSA/IG51bGwgOiBzZWxlY3Rpb247XG4gICAgfSlcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4gISF4OyB9KTtcbiAgICBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgaWYgKChzZWxlY3Rpb24ua2luZCA9PT0gJ0ZpZWxkJyB8fCBzZWxlY3Rpb24ua2luZCA9PT0gJ0lubGluZUZyYWdtZW50JykgJiZcbiAgICAgICAgICAgIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgIHJlbW92ZURpcmVjdGl2ZXNGcm9tU2VsZWN0aW9uU2V0KGRpcmVjdGl2ZXMsIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGVjdGlvblNldDtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVEaXJlY3RpdmVzRnJvbURvY3VtZW50KGRpcmVjdGl2ZXMsIGRvYykge1xuICAgIHZhciBkb2NDbG9uZSA9IGNsb25lRGVlcChkb2MpO1xuICAgIGRvY0Nsb25lLmRlZmluaXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgcmVtb3ZlRGlyZWN0aXZlc0Zyb21TZWxlY3Rpb25TZXQoZGlyZWN0aXZlcywgZGVmaW5pdGlvbi5zZWxlY3Rpb25TZXQpO1xuICAgIH0pO1xuICAgIHZhciBvcGVyYXRpb24gPSBnZXRPcGVyYXRpb25EZWZpbml0aW9uT3JEaWUoZG9jQ2xvbmUpO1xuICAgIHZhciBmcmFnbWVudHMgPSBjcmVhdGVGcmFnbWVudE1hcChnZXRGcmFnbWVudERlZmluaXRpb25zKGRvY0Nsb25lKSk7XG4gICAgcmV0dXJuIGlzTm90RW1wdHkob3BlcmF0aW9uLCBmcmFnbWVudHMpID8gZG9jQ2xvbmUgOiBudWxsO1xufVxudmFyIGFkZGVkID0gbmV3IE1hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFR5cGVuYW1lVG9Eb2N1bWVudChkb2MpIHtcbiAgICBjaGVja0RvY3VtZW50KGRvYyk7XG4gICAgdmFyIGNhY2hlZCA9IGFkZGVkLmdldChkb2MpO1xuICAgIGlmIChjYWNoZWQpXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgdmFyIGRvY0Nsb25lID0gY2xvbmVEZWVwKGRvYyk7XG4gICAgZG9jQ2xvbmUuZGVmaW5pdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoZGVmaW5pdGlvbikge1xuICAgICAgICB2YXIgaXNSb290ID0gZGVmaW5pdGlvbi5raW5kID09PSAnT3BlcmF0aW9uRGVmaW5pdGlvbic7XG4gICAgICAgIGFkZFR5cGVuYW1lVG9TZWxlY3Rpb25TZXQoZGVmaW5pdGlvbi5zZWxlY3Rpb25TZXQsIGlzUm9vdCk7XG4gICAgfSk7XG4gICAgYWRkZWQuc2V0KGRvYywgZG9jQ2xvbmUpO1xuICAgIHJldHVybiBkb2NDbG9uZTtcbn1cbnZhciBjb25uZWN0aW9uUmVtb3ZlQ29uZmlnID0ge1xuICAgIHRlc3Q6IGZ1bmN0aW9uIChkaXJlY3RpdmUpIHtcbiAgICAgICAgdmFyIHdpbGxSZW1vdmUgPSBkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gJ2Nvbm5lY3Rpb24nO1xuICAgICAgICBpZiAod2lsbFJlbW92ZSkge1xuICAgICAgICAgICAgaWYgKCFkaXJlY3RpdmUuYXJndW1lbnRzIHx8XG4gICAgICAgICAgICAgICAgIWRpcmVjdGl2ZS5hcmd1bWVudHMuc29tZShmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBhcmcubmFtZS52YWx1ZSA9PT0gJ2tleSc7IH0pKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdSZW1vdmluZyBhbiBAY29ubmVjdGlvbiBkaXJlY3RpdmUgZXZlbiB0aG91Z2ggaXQgZG9lcyBub3QgaGF2ZSBhIGtleS4gJyArXG4gICAgICAgICAgICAgICAgICAgICdZb3UgbWF5IHdhbnQgdG8gdXNlIHRoZSBrZXkgcGFyYW1ldGVyIHRvIHNwZWNpZnkgYSBzdG9yZSBrZXkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpbGxSZW1vdmU7XG4gICAgfSxcbn07XG52YXIgcmVtb3ZlZCA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDb25uZWN0aW9uRGlyZWN0aXZlRnJvbURvY3VtZW50KGRvYykge1xuICAgIGNoZWNrRG9jdW1lbnQoZG9jKTtcbiAgICB2YXIgY2FjaGVkID0gcmVtb3ZlZC5nZXQoZG9jKTtcbiAgICBpZiAoY2FjaGVkKVxuICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgIHZhciBkb2NDbG9uZSA9IHJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQoW2Nvbm5lY3Rpb25SZW1vdmVDb25maWddLCBkb2MpO1xuICAgIHJlbW92ZWQuc2V0KGRvYywgZG9jQ2xvbmUpO1xuICAgIHJldHVybiBkb2NDbG9uZTtcbn1cbmZ1bmN0aW9uIGhhc0RpcmVjdGl2ZXNJblNlbGVjdGlvblNldChkaXJlY3RpdmVzLCBzZWxlY3Rpb25TZXQsIG5lc3RlZENoZWNrKSB7XG4gICAgaWYgKG5lc3RlZENoZWNrID09PSB2b2lkIDApIHsgbmVzdGVkQ2hlY2sgPSB0cnVlOyB9XG4gICAgaWYgKCEoc2VsZWN0aW9uU2V0ICYmIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBtYXRjaGVkU2VsZWN0aW9ucyA9IHNlbGVjdGlvblNldC5zZWxlY3Rpb25zLmZpbHRlcihmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb24oZGlyZWN0aXZlcywgc2VsZWN0aW9uLCBuZXN0ZWRDaGVjayk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hdGNoZWRTZWxlY3Rpb25zLmxlbmd0aCA+IDA7XG59XG5mdW5jdGlvbiBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb24oZGlyZWN0aXZlcywgc2VsZWN0aW9uLCBuZXN0ZWRDaGVjaykge1xuICAgIGlmIChuZXN0ZWRDaGVjayA9PT0gdm9pZCAwKSB7IG5lc3RlZENoZWNrID0gdHJ1ZTsgfVxuICAgIGlmIChzZWxlY3Rpb24ua2luZCAhPT0gJ0ZpZWxkJyB8fCAhc2VsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXNlbGVjdGlvbi5kaXJlY3RpdmVzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGRpcmVjdGl2ZU1hdGNoZXIgPSBnZXREaXJlY3RpdmVNYXRjaGVyKGRpcmVjdGl2ZXMpO1xuICAgIHZhciBtYXRjaGVkRGlyZWN0aXZlcyA9IHNlbGVjdGlvbi5kaXJlY3RpdmVzLmZpbHRlcihkaXJlY3RpdmVNYXRjaGVyKTtcbiAgICByZXR1cm4gKG1hdGNoZWREaXJlY3RpdmVzLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgKG5lc3RlZENoZWNrICYmXG4gICAgICAgICAgICBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb25TZXQoZGlyZWN0aXZlcywgc2VsZWN0aW9uLnNlbGVjdGlvblNldCwgbmVzdGVkQ2hlY2spKSk7XG59XG5mdW5jdGlvbiBnZXREaXJlY3RpdmVzRnJvbVNlbGVjdGlvblNldChkaXJlY3RpdmVzLCBzZWxlY3Rpb25TZXQpIHtcbiAgICBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucyA9IHNlbGVjdGlvblNldC5zZWxlY3Rpb25zXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gaGFzRGlyZWN0aXZlc0luU2VsZWN0aW9uKGRpcmVjdGl2ZXMsIHNlbGVjdGlvbiwgdHJ1ZSk7XG4gICAgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIGlmIChoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb24oZGlyZWN0aXZlcywgc2VsZWN0aW9uLCBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzZWxlY3Rpb24ua2luZCA9PT0gJ0ZpZWxkJyB8fCBzZWxlY3Rpb24ua2luZCA9PT0gJ0lubGluZUZyYWdtZW50JykgJiZcbiAgICAgICAgICAgIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQgPSBnZXREaXJlY3RpdmVzRnJvbVNlbGVjdGlvblNldChkaXJlY3RpdmVzLCBzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZWN0aW9uO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxlY3Rpb25TZXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlyZWN0aXZlc0Zyb21Eb2N1bWVudChkaXJlY3RpdmVzLCBkb2MpIHtcbiAgICBjaGVja0RvY3VtZW50KGRvYyk7XG4gICAgdmFyIGRvY0Nsb25lID0gY2xvbmVEZWVwKGRvYyk7XG4gICAgZG9jQ2xvbmUuZGVmaW5pdGlvbnMgPSBkb2NDbG9uZS5kZWZpbml0aW9ucy5tYXAoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgaWYgKChkZWZpbml0aW9uLmtpbmQgPT09ICdPcGVyYXRpb25EZWZpbml0aW9uJyB8fFxuICAgICAgICAgICAgZGVmaW5pdGlvbi5raW5kID09PSAnRnJhZ21lbnREZWZpbml0aW9uJykgJiZcbiAgICAgICAgICAgIGRlZmluaXRpb24uc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICBkZWZpbml0aW9uLnNlbGVjdGlvblNldCA9IGdldERpcmVjdGl2ZXNGcm9tU2VsZWN0aW9uU2V0KGRpcmVjdGl2ZXMsIGRlZmluaXRpb24uc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICB9KTtcbiAgICB2YXIgb3BlcmF0aW9uID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbk9yRGllKGRvY0Nsb25lKTtcbiAgICB2YXIgZnJhZ21lbnRzID0gY3JlYXRlRnJhZ21lbnRNYXAoZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhkb2NDbG9uZSkpO1xuICAgIHJldHVybiBpc05vdEVtcHR5KG9wZXJhdGlvbiwgZnJhZ21lbnRzKSA/IGRvY0Nsb25lIDogbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zZm9ybS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tdXRpbGl0aWVzL2xpYi90cmFuc2Zvcm0uanNcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"b\"] = tryFunctionOrLogError;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = graphQLResultHasError;\nfunction tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n//# sourceMappingURL=errorHandling.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvdXRpbC9lcnJvckhhbmRsaW5nLmpzP2UyMjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRyeUZ1bmN0aW9uT3JMb2dFcnJvcihmKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGYoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdCkge1xuICAgIHJldHVybiByZXN1bHQuZXJyb3JzICYmIHJlc3VsdC5lcnJvcnMubGVuZ3RoO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JIYW5kbGluZy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tdXRpbGl0aWVzL2xpYi91dGlsL2Vycm9ySGFuZGxpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = isEqual;\nfunction isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime();\n    }\n    if (a != null &&\n        typeof a === 'object' &&\n        b != null &&\n        typeof b === 'object') {\n        for (var key in a) {\n            if (Object.prototype.hasOwnProperty.call(a, key)) {\n                if (!Object.prototype.hasOwnProperty.call(b, key)) {\n                    return false;\n                }\n                if (!isEqual(a[key], b[key])) {\n                    return false;\n                }\n            }\n        }\n        for (var key in b) {\n            if (!Object.prototype.hasOwnProperty.call(a, key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=isEqual.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvdXRpbC9pc0VxdWFsLmpzP2FmYmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWwoYSwgYikge1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKTtcbiAgICB9XG4gICAgaWYgKGEgIT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgYiAhPSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNFcXVhbChhW2tleV0sIGJba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNFcXVhbC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tdXRpbGl0aWVzL2xpYi91dGlsL2lzRXF1YWwuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = maybeDeepFreeze;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__environment__ = __webpack_require__(9);\n\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o.hasOwnProperty(prop) &&\n            o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nfunction maybeDeepFreeze(obj) {\n    if (Object(__WEBPACK_IMPORTED_MODULE_0__environment__[\"a\" /* isDevelopment */])() || Object(__WEBPACK_IMPORTED_MODULE_0__environment__[\"c\" /* isTest */])()) {\n        return deepFreeze(obj);\n    }\n    return obj;\n}\n//# sourceMappingURL=maybeDeepFreeze.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvdXRpbC9tYXliZURlZXBGcmVlemUuanM/MDhjMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNEZXZlbG9wbWVudCwgaXNUZXN0IH0gZnJvbSAnLi9lbnZpcm9ubWVudCc7XG5mdW5jdGlvbiBkZWVwRnJlZXplKG8pIHtcbiAgICBPYmplY3QuZnJlZXplKG8pO1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG8pLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkocHJvcCkgJiZcbiAgICAgICAgICAgIG9bcHJvcF0gIT09IG51bGwgJiZcbiAgICAgICAgICAgICh0eXBlb2Ygb1twcm9wXSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9bcHJvcF0gPT09ICdmdW5jdGlvbicpICYmXG4gICAgICAgICAgICAhT2JqZWN0LmlzRnJvemVuKG9bcHJvcF0pKSB7XG4gICAgICAgICAgICBkZWVwRnJlZXplKG9bcHJvcF0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG87XG59XG5leHBvcnQgZnVuY3Rpb24gbWF5YmVEZWVwRnJlZXplKG9iaikge1xuICAgIGlmIChpc0RldmVsb3BtZW50KCkgfHwgaXNUZXN0KCkpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBGcmVlemUob2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1heWJlRGVlcEZyZWV6ZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tdXRpbGl0aWVzL2xpYi91dGlsL21heWJlRGVlcEZyZWV6ZS5qc1xuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = warnOnceInDevelopment;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__environment__ = __webpack_require__(9);\n\nvar haveWarned = Object.create({});\nfunction warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (Object(__WEBPACK_IMPORTED_MODULE_0__environment__[\"b\" /* isProduction */])()) {\n        return;\n    }\n    if (!haveWarned[msg]) {\n        if (!Object(__WEBPACK_IMPORTED_MODULE_0__environment__[\"c\" /* isTest */])()) {\n            haveWarned[msg] = true;\n        }\n        switch (type) {\n            case 'error':\n                console.error(msg);\n                break;\n            default:\n                console.warn(msg);\n        }\n    }\n}\n//# sourceMappingURL=warnOnce.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvdXRpbC93YXJuT25jZS5qcz9mZjFkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQStCO0FBQy9CLGlDQUFpQztBQUNqQztBQUNBLDBCQUEwQixlQUFlO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1Byb2R1Y3Rpb24sIGlzVGVzdCB9IGZyb20gJy4vZW52aXJvbm1lbnQnO1xudmFyIGhhdmVXYXJuZWQgPSBPYmplY3QuY3JlYXRlKHt9KTtcbmV4cG9ydCBmdW5jdGlvbiB3YXJuT25jZUluRGV2ZWxvcG1lbnQobXNnLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09IHZvaWQgMCkgeyB0eXBlID0gJ3dhcm4nOyB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFoYXZlV2FybmVkW21zZ10pIHtcbiAgICAgICAgaWYgKCFpc1Rlc3QoKSkge1xuICAgICAgICAgICAgaGF2ZVdhcm5lZFttc2ddID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2Fybk9uY2UuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLXV0aWxpdGllcy9saWIvdXRpbC93YXJuT25jZS5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export empty */\n/* unused harmony export from */\n/* unused harmony export split */\n/* unused harmony export concat */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ApolloLink; });\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = execute;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__linkUtils__ = __webpack_require__(19);\n\n\nvar passthrough = function (op, forward) { return (forward ? forward(op) : __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of()); };\nvar toLink = function (handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n};\nvar empty = function () {\n    return new ApolloLink(function (op, forward) { return __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of(); });\n};\nvar from = function (links) {\n    if (links.length === 0)\n        return empty();\n    return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n};\nvar split = function (test, left, right) {\n    if (right === void 0) { right = new ApolloLink(passthrough); }\n    var leftLink = toLink(left);\n    var rightLink = toLink(right);\n    if (Object(__WEBPACK_IMPORTED_MODULE_1__linkUtils__[\"d\" /* isTerminating */])(leftLink) && Object(__WEBPACK_IMPORTED_MODULE_1__linkUtils__[\"d\" /* isTerminating */])(rightLink)) {\n        return new ApolloLink(function (operation) {\n            return test(operation)\n                ? leftLink.request(operation) || __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of()\n                : rightLink.request(operation) || __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return test(operation)\n                ? leftLink.request(operation, forward) || __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of()\n                : rightLink.request(operation, forward) || __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of();\n        });\n    }\n};\nvar concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (Object(__WEBPACK_IMPORTED_MODULE_1__linkUtils__[\"d\" /* isTerminating */])(firstLink)) {\n        console.warn(new __WEBPACK_IMPORTED_MODULE_1__linkUtils__[\"a\" /* LinkError */](\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n        return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (Object(__WEBPACK_IMPORTED_MODULE_1__linkUtils__[\"d\" /* isTerminating */])(nextLink)) {\n        return new ApolloLink(function (operation) {\n            return firstLink.request(operation, function (op) { return nextLink.request(op) || __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of(); }) || __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return (firstLink.request(operation, function (op) {\n                return nextLink.request(op, forward) || __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of();\n            }) || __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of());\n        });\n    }\n};\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.prototype.split = function (test, left, right) {\n        if (right === void 0) { right = new ApolloLink(passthrough); }\n        return this.concat(split(test, left, right));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw new Error('request is not implemented');\n    };\n    ApolloLink.empty = empty;\n    ApolloLink.from = from;\n    ApolloLink.split = split;\n    ApolloLink.execute = execute;\n    return ApolloLink;\n}());\n\nfunction execute(link, operation) {\n    return (link.request(Object(__WEBPACK_IMPORTED_MODULE_1__linkUtils__[\"b\" /* createOperation */])(operation.context, Object(__WEBPACK_IMPORTED_MODULE_1__linkUtils__[\"e\" /* transformOperation */])(Object(__WEBPACK_IMPORTED_MODULE_1__linkUtils__[\"f\" /* validateOperation */])(operation)))) || __WEBPACK_IMPORTED_MODULE_0_zen_observable_ts__[\"a\" /* default */].of());\n}\n//# sourceMappingURL=link.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmsvbGliL2xpbmsuanM/ZTQ4NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQzRGO0FBQzVGLDBDQUEwQywwR0FBa0Q7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZ0ZBQXdCLEVBQUU7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsb0JBQW9CLEVBQUU7QUFDM0U7QUFDQTtBQUNBLDJCQUEyQixxQ0FBcUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Qsd0dBQWdELEVBQUU7QUFDakgsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IscUNBQXFDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNPO0FBQ1I7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT2JzZXJ2YWJsZSBmcm9tICd6ZW4tb2JzZXJ2YWJsZS10cyc7XG5pbXBvcnQgeyB2YWxpZGF0ZU9wZXJhdGlvbiwgaXNUZXJtaW5hdGluZywgTGlua0Vycm9yLCB0cmFuc2Zvcm1PcGVyYXRpb24sIGNyZWF0ZU9wZXJhdGlvbiwgfSBmcm9tICcuL2xpbmtVdGlscyc7XG52YXIgcGFzc3Rocm91Z2ggPSBmdW5jdGlvbiAob3AsIGZvcndhcmQpIHsgcmV0dXJuIChmb3J3YXJkID8gZm9yd2FyZChvcCkgOiBPYnNlcnZhYmxlLm9mKCkpOyB9O1xudmFyIHRvTGluayA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nID8gbmV3IEFwb2xsb0xpbmsoaGFuZGxlcikgOiBoYW5kbGVyO1xufTtcbmV4cG9ydCB2YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBBcG9sbG9MaW5rKGZ1bmN0aW9uIChvcCwgZm9yd2FyZCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZigpOyB9KTtcbn07XG5leHBvcnQgdmFyIGZyb20gPSBmdW5jdGlvbiAobGlua3MpIHtcbiAgICBpZiAobGlua3MubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICByZXR1cm4gbGlua3MubWFwKHRvTGluaykucmVkdWNlKGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiB4LmNvbmNhdCh5KTsgfSk7XG59O1xuZXhwb3J0IHZhciBzcGxpdCA9IGZ1bmN0aW9uICh0ZXN0LCBsZWZ0LCByaWdodCkge1xuICAgIGlmIChyaWdodCA9PT0gdm9pZCAwKSB7IHJpZ2h0ID0gbmV3IEFwb2xsb0xpbmsocGFzc3Rocm91Z2gpOyB9XG4gICAgdmFyIGxlZnRMaW5rID0gdG9MaW5rKGxlZnQpO1xuICAgIHZhciByaWdodExpbmsgPSB0b0xpbmsocmlnaHQpO1xuICAgIGlmIChpc1Rlcm1pbmF0aW5nKGxlZnRMaW5rKSAmJiBpc1Rlcm1pbmF0aW5nKHJpZ2h0TGluaykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcG9sbG9MaW5rKGZ1bmN0aW9uIChvcGVyYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXN0KG9wZXJhdGlvbilcbiAgICAgICAgICAgICAgICA/IGxlZnRMaW5rLnJlcXVlc3Qob3BlcmF0aW9uKSB8fCBPYnNlcnZhYmxlLm9mKClcbiAgICAgICAgICAgICAgICA6IHJpZ2h0TGluay5yZXF1ZXN0KG9wZXJhdGlvbikgfHwgT2JzZXJ2YWJsZS5vZigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgQXBvbGxvTGluayhmdW5jdGlvbiAob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVzdChvcGVyYXRpb24pXG4gICAgICAgICAgICAgICAgPyBsZWZ0TGluay5yZXF1ZXN0KG9wZXJhdGlvbiwgZm9yd2FyZCkgfHwgT2JzZXJ2YWJsZS5vZigpXG4gICAgICAgICAgICAgICAgOiByaWdodExpbmsucmVxdWVzdChvcGVyYXRpb24sIGZvcndhcmQpIHx8IE9ic2VydmFibGUub2YoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbmV4cG9ydCB2YXIgY29uY2F0ID0gZnVuY3Rpb24gKGZpcnN0LCBzZWNvbmQpIHtcbiAgICB2YXIgZmlyc3RMaW5rID0gdG9MaW5rKGZpcnN0KTtcbiAgICBpZiAoaXNUZXJtaW5hdGluZyhmaXJzdExpbmspKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihuZXcgTGlua0Vycm9yKFwiWW91IGFyZSBjYWxsaW5nIGNvbmNhdCBvbiBhIHRlcm1pbmF0aW5nIGxpbmssIHdoaWNoIHdpbGwgaGF2ZSBubyBlZmZlY3RcIiwgZmlyc3RMaW5rKSk7XG4gICAgICAgIHJldHVybiBmaXJzdExpbms7XG4gICAgfVxuICAgIHZhciBuZXh0TGluayA9IHRvTGluayhzZWNvbmQpO1xuICAgIGlmIChpc1Rlcm1pbmF0aW5nKG5leHRMaW5rKSkge1xuICAgICAgICByZXR1cm4gbmV3IEFwb2xsb0xpbmsoZnVuY3Rpb24gKG9wZXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0TGluay5yZXF1ZXN0KG9wZXJhdGlvbiwgZnVuY3Rpb24gKG9wKSB7IHJldHVybiBuZXh0TGluay5yZXF1ZXN0KG9wKSB8fCBPYnNlcnZhYmxlLm9mKCk7IH0pIHx8IE9ic2VydmFibGUub2YoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEFwb2xsb0xpbmsoZnVuY3Rpb24gKG9wZXJhdGlvbiwgZm9yd2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIChmaXJzdExpbmsucmVxdWVzdChvcGVyYXRpb24sIGZ1bmN0aW9uIChvcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0TGluay5yZXF1ZXN0KG9wLCBmb3J3YXJkKSB8fCBPYnNlcnZhYmxlLm9mKCk7XG4gICAgICAgICAgICB9KSB8fCBPYnNlcnZhYmxlLm9mKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xudmFyIEFwb2xsb0xpbmsgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwb2xsb0xpbmsocmVxdWVzdCkge1xuICAgICAgICBpZiAocmVxdWVzdClcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgfVxuICAgIEFwb2xsb0xpbmsucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKHRlc3QsIGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGlmIChyaWdodCA9PT0gdm9pZCAwKSB7IHJpZ2h0ID0gbmV3IEFwb2xsb0xpbmsocGFzc3Rocm91Z2gpOyB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmNhdChzcGxpdCh0ZXN0LCBsZWZ0LCByaWdodCkpO1xuICAgIH07XG4gICAgQXBvbGxvTGluay5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGNvbmNhdCh0aGlzLCBuZXh0KTtcbiAgICB9O1xuICAgIEFwb2xsb0xpbmsucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncmVxdWVzdCBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9O1xuICAgIEFwb2xsb0xpbmsuZW1wdHkgPSBlbXB0eTtcbiAgICBBcG9sbG9MaW5rLmZyb20gPSBmcm9tO1xuICAgIEFwb2xsb0xpbmsuc3BsaXQgPSBzcGxpdDtcbiAgICBBcG9sbG9MaW5rLmV4ZWN1dGUgPSBleGVjdXRlO1xuICAgIHJldHVybiBBcG9sbG9MaW5rO1xufSgpKTtcbmV4cG9ydCB7IEFwb2xsb0xpbmsgfTtcbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlKGxpbmssIG9wZXJhdGlvbikge1xuICAgIHJldHVybiAobGluay5yZXF1ZXN0KGNyZWF0ZU9wZXJhdGlvbihvcGVyYXRpb24uY29udGV4dCwgdHJhbnNmb3JtT3BlcmF0aW9uKHZhbGlkYXRlT3BlcmF0aW9uKG9wZXJhdGlvbikpKSkgfHwgT2JzZXJ2YWJsZS5vZigpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbmsuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmsvbGliL2xpbmsuanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(44).Observable;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUvaW5kZXguanM/Y2QyYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0My5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vemVuLW9ic2VydmFibGUuanNcIikuT2JzZXJ2YWJsZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3plbi1vYnNlcnZhYmxlL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) { (function(fn, name) { if (true) { fn(exports, module); } else if (typeof self !== \"undefined\") { var e = name === \"*\" ? self : (name ? self[name] = {} : {}); fn(e, { exports: e }); } })(function(exports, module) { // === Symbol Support ===\n\nfunction hasSymbol(name) {\n  return typeof Symbol === \"function\" && Boolean(Symbol[name]);\n}\n\nfunction getSymbol(name) {\n  return hasSymbol(name) ? Symbol[name] : \"@@\" + name;\n}\n\n// Ponyfill Symbol.observable for interoperability with other libraries\nif (typeof Symbol === \"function\" && !Symbol.observable) {\n  Symbol.observable = Symbol(\"observable\");\n}\n\n// === Abstract Operations ===\n\nfunction hostReportError(e) {\n  setTimeout(function() { throw e });\n}\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n\n  if (value == null)\n    return undefined;\n\n  if (typeof value !== \"function\")\n    throw new TypeError(value + \" is not a function\");\n\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n  if (ctor !== undefined) {\n    ctor = ctor[getSymbol(\"species\")];\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction addMethods(target, methods) {\n  Object.keys(methods).forEach(function(k) {\n    var desc = Object.getOwnPropertyDescriptor(methods, k);\n    desc.enumerable = false;\n    Object.defineProperty(target, k, desc);\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  // Assert:  observer._observer is undefined\n\n  var cleanup = subscription._cleanup;\n\n  if (!cleanup)\n    return;\n\n  // Drop the reference to the cleanup function so that we won't call it\n  // more than once\n  subscription._cleanup = undefined;\n\n  // Call the cleanup function\n  try { cleanup() }\n  catch (e) { hostReportError(e) }\n}\n\nfunction subscriptionClosed(subscription) {\n  return subscription._observer === undefined;\n}\n\nfunction closeSubscription(subscription) {\n  if (subscriptionClosed(subscription))\n    return;\n\n  subscription._observer = undefined;\n  cleanupSubscription(subscription);\n}\n\nfunction cleanupFromSubscription(subscription) {\n  return function() { subscription.unsubscribe() };\n}\n\nfunction Subscription(observer, subscriber) {\n  // Assert: subscriber is callable\n\n  // The observer must be an object\n  if (Object(observer) !== observer)\n    throw new TypeError(\"Observer must be an object\");\n\n  this._cleanup = undefined;\n  this._observer = observer;\n\n  try {\n    var start$0 = getMethod(observer, \"start\");\n    if (start$0) start$0.call(observer, this);\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscriptionClosed(this))\n    return;\n\n  observer = new SubscriptionObserver(this);\n\n  try {\n    // Call the subscriber function\n    var cleanup$0 = subscriber.call(undefined, observer);\n\n    // The return value must be undefined, null, a subscription object, or a function\n    if (cleanup$0 != null) {\n      if (typeof cleanup$0.unsubscribe === \"function\")\n        cleanup$0 = cleanupFromSubscription(cleanup$0);\n      else if (typeof cleanup$0 !== \"function\")\n        throw new TypeError(cleanup$0 + \" is not a function\");\n\n      this._cleanup = cleanup$0;\n    }\n  } catch (e) {\n    // If an error occurs during startup, then attempt to send the error\n    // to the observer\n    observer.error(e);\n    return;\n  }\n\n  // If the stream is already finished, then perform cleanup\n  if (subscriptionClosed(this))\n    cleanupSubscription(this);\n}\n\naddMethods(Subscription.prototype = {}, {\n  get closed() { return subscriptionClosed(this) },\n  unsubscribe: function() { closeSubscription(this) },\n});\n\nfunction SubscriptionObserver(subscription) {\n  this._subscription = subscription;\n}\n\naddMethods(SubscriptionObserver.prototype = {}, {\n\n  get closed() { return subscriptionClosed(this._subscription) },\n\n  next: function(value) {\n    var subscription = this._subscription;\n\n    // If the stream is closed, then return undefined\n    if (subscriptionClosed(subscription))\n      return;\n\n    var observer = subscription._observer;\n\n    try {\n      // If the observer has a \"next\" method, send the next value\n      var m$0 = getMethod(observer, \"next\");\n      if (m$0) m$0.call(observer, value);\n    } catch (e) {\n      hostReportError(e);\n    }\n  },\n\n  error: function(value) {\n    var subscription = this._subscription;\n\n    // If the stream is closed, throw the error to the caller\n    if (subscriptionClosed(subscription)) {\n      hostReportError(value);\n      return;\n    }\n\n    var observer = subscription._observer;\n    subscription._observer = undefined;\n\n    try {\n      var m$1 = getMethod(observer, \"error\");\n      if (m$1) m$1.call(observer, value);\n      else throw value;\n    } catch (e) {\n      hostReportError(e);\n    }\n\n    cleanupSubscription(subscription);\n  },\n\n  complete: function() {\n    var subscription = this._subscription;\n\n    if (subscriptionClosed(subscription))\n      return;\n\n    var observer = subscription._observer;\n    subscription._observer = undefined;\n\n    try {\n      var m$2 = getMethod(observer, \"complete\");\n      if (m$2) m$2.call(observer);\n    } catch (e) {\n      hostReportError(e);\n    }\n\n    cleanupSubscription(subscription);\n  },\n\n});\n\nfunction Observable(subscriber) {\n  // Constructor cannot be called as a function\n  if (!(this instanceof Observable))\n    throw new TypeError(\"Observable cannot be called as a function\");\n\n  // The stream subscriber must be a function\n  if (typeof subscriber !== \"function\")\n    throw new TypeError(\"Observable initializer must be a function\");\n\n  this._subscriber = subscriber;\n}\n\naddMethods(Observable.prototype, {\n\n  subscribe: function(observer) { for (var args = [], __$0 = 1; __$0 < arguments.length; ++__$0) args.push(arguments[__$0]); \n    if (typeof observer === 'function') {\n      observer = {\n        next: observer,\n        error: args[0],\n        complete: args[1],\n      };\n    } else if (typeof observer !== 'object' || observer === null) {\n      observer = {};\n    }\n\n    return new Subscription(observer, this._subscriber);\n  },\n\n  forEach: function(fn) { var __this = this; \n    return new Promise(function(resolve, reject) {\n      if (typeof fn !== \"function\")\n        return Promise.reject(new TypeError(fn + \" is not a function\"));\n\n      __this.subscribe({\n        _subscription: null,\n\n        start: function(subscription) {\n          if (Object(subscription) !== subscription)\n            throw new TypeError(subscription + \" is not an object\");\n\n          this._subscription = subscription;\n        },\n\n        next: function(value) {\n          var subscription = this._subscription;\n\n          if (subscription.closed)\n            return;\n\n          try {\n            fn(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        },\n\n        error: reject,\n        complete: resolve,\n      });\n    });\n  },\n\n  map: function(fn) { var __this = this; \n    if (typeof fn !== \"function\")\n      throw new TypeError(fn + \" is not a function\");\n\n    var C = getSpecies(this);\n\n    return new C(function(observer) { return __this.subscribe({\n      next: function(value) {\n        if (observer.closed)\n          return;\n\n        try { value = fn(value) }\n        catch (e) { return observer.error(e) }\n\n        observer.next(value);\n      },\n\n      error: function(e) { observer.error(e) },\n      complete: function() { observer.complete() },\n    }); });\n  },\n\n  filter: function(fn) { var __this = this; \n    if (typeof fn !== \"function\")\n      throw new TypeError(fn + \" is not a function\");\n\n    var C = getSpecies(this);\n\n    return new C(function(observer) { return __this.subscribe({\n      next: function(value) {\n        if (observer.closed)\n          return;\n\n        try { if (!fn(value)) return }\n        catch (e) { return observer.error(e) }\n\n        observer.next(value);\n      },\n\n      error: function(e) { observer.error(e) },\n      complete: function() { observer.complete() },\n    }); });\n  },\n\n  reduce: function(fn) { var __this = this; \n    if (typeof fn !== \"function\")\n      throw new TypeError(fn + \" is not a function\");\n\n    var C = getSpecies(this);\n    var hasSeed = arguments.length > 1;\n    var hasValue = false;\n    var seed = arguments[1];\n    var acc = seed;\n\n    return new C(function(observer) { return __this.subscribe({\n\n      next: function(value) {\n        if (observer.closed)\n          return;\n\n        var first = !hasValue;\n        hasValue = true;\n\n        if (!first || hasSeed) {\n          try { acc = fn(acc, value) }\n          catch (e) { return observer.error(e) }\n        } else {\n          acc = value;\n        }\n      },\n\n      error: function(e) { observer.error(e) },\n\n      complete: function() {\n        if (!hasValue && !hasSeed) {\n          return observer.error(new TypeError(\"Cannot reduce an empty sequence\"));\n        }\n\n        observer.next(acc);\n        observer.complete();\n      },\n\n    }); });\n  },\n\n});\n\nObject.defineProperty(Observable.prototype, getSymbol(\"observable\"), {\n  value: function() { return this },\n  writable: true,\n  configurable: true,\n});\n\naddMethods(Observable, {\n\n  from: function(x) {\n    var C = typeof this === \"function\" ? this : Observable;\n\n    if (x == null)\n      throw new TypeError(x + \" is not an object\");\n\n    var method = getMethod(x, getSymbol(\"observable\"));\n\n    if (method) {\n      var observable$0 = method.call(x);\n\n      if (Object(observable$0) !== observable$0)\n        throw new TypeError(observable$0 + \" is not an object\");\n\n      if (observable$0.constructor === C)\n        return observable$0;\n\n      return new C(function(observer) { return observable$0.subscribe(observer); });\n    }\n\n    if (hasSymbol(\"iterator\") && (method = getMethod(x, getSymbol(\"iterator\")))) {\n      return new C(function(observer) {\n        for (var __$0 = (method.call(x))[Symbol.iterator](), __$1; __$1 = __$0.next(), !__$1.done;) { var item$0 = __$1.value; \n          observer.next(item$0);\n          if (observer.closed)\n            return;\n        }\n\n        observer.complete();\n      });\n    }\n\n    if (Array.isArray(x)) {\n      return new C(function(observer) {\n        for (var i$0 = 0; i$0 < x.length; ++i$0) {\n          observer.next(x[i$0]);\n          if (observer.closed)\n            return;\n        }\n\n        observer.complete();\n      });\n    }\n\n    throw new TypeError(x + \" is not observable\");\n  },\n\n  of: function() { for (var items = [], __$0 = 0; __$0 < arguments.length; ++__$0) items.push(arguments[__$0]); \n    var C = typeof this === \"function\" ? this : Observable;\n\n    return new C(function(observer) {\n      for (var i$1 = 0; i$1 < items.length; ++i$1) {\n        observer.next(items[i$1]);\n        if (observer.closed)\n          return;\n      }\n\n      observer.complete();\n    });\n  },\n\n});\n\nObject.defineProperty(Observable, getSymbol(\"species\"), {\n  get: function() { return this },\n  configurable: true,\n});\n\nObject.defineProperty(Observable, \"extensions\", {\n  value: {\n    observableSymbol: getSymbol(\"observable\"),\n    setHostReportError: function(fn) { hostReportError = fn },\n  },\n});\n\nexports.Observable = Observable;\n\n\n}, \"*\");\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(45)(module)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUvemVuLW9ic2VydmFibGUuanM/NmQxMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOENBQWEsc0JBQXNCLFlBQXNDLHFCQUFxQixFQUFFLHdDQUF3QyxzREFBc0QsS0FBSyxFQUFFLFFBQVEsYUFBYSxFQUFFLEVBQUUsRUFBRSw2QkFBNkI7O0FBRTdQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSx5QkFBeUIsVUFBVTtBQUNuQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QyxnQkFBZ0Isa0NBQWtDO0FBQ2xELDJCQUEyQiwwQkFBMEI7QUFDckQsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUEsOENBQThDOztBQUU5QyxnQkFBZ0IsZ0RBQWdEOztBQUVoRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUgsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxpQ0FBaUMsOEJBQThCLHlCQUF5QixvQztBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUgseUJBQXlCLG1CO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHOztBQUVILHFCQUFxQixtQjtBQUNyQjtBQUNBOztBQUVBOztBQUVBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiLG1CQUFtQjs7QUFFbkI7QUFDQSxPQUFPOztBQUVQLDBCQUEwQixvQkFBb0I7QUFDOUMsNEJBQTRCLHNCQUFzQjtBQUNsRCxLQUFLLEVBQUUsRUFBRTtBQUNULEdBQUc7O0FBRUgsd0JBQXdCLG1CO0FBQ3hCO0FBQ0E7O0FBRUE7O0FBRUEscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2IsbUJBQW1COztBQUVuQjtBQUNBLE9BQU87O0FBRVAsMEJBQTBCLG9CQUFvQjtBQUM5Qyw0QkFBNEIsc0JBQXNCO0FBQ2xELEtBQUssRUFBRSxFQUFFO0FBQ1QsR0FBRzs7QUFFSCx3QkFBd0IsbUI7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2YscUJBQXFCO0FBQ3JCLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTzs7QUFFUCwwQkFBMEIsb0JBQW9COztBQUU5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUCxLQUFLLEVBQUUsRUFBRTtBQUNULEdBQUc7O0FBRUgsQ0FBQzs7QUFFRDtBQUNBLHFCQUFxQixjQUFjO0FBQ25DO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1Q0FBdUMseUNBQXlDLEVBQUU7QUFDbEY7O0FBRUE7QUFDQTtBQUNBLGtFQUFrRSxnQ0FBZ0MsR0FBRyx5QjtBQUNyRztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EseUJBQXlCLGdCQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBLEdBQUc7O0FBRUgsa0JBQWtCLCtCQUErQix5QkFBeUIscUM7QUFDMUU7O0FBRUE7QUFDQSx1QkFBdUIsb0JBQW9CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUgsQ0FBQzs7QUFFRDtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsdUJBQXVCO0FBQzdELEdBQUc7QUFDSCxDQUFDOztBQUVEOzs7QUFHQSxDQUFDLE8iLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7IChmdW5jdGlvbihmbiwgbmFtZSkgeyBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHsgZm4oZXhwb3J0cywgbW9kdWxlKTsgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikgeyB2YXIgZSA9IG5hbWUgPT09IFwiKlwiID8gc2VsZiA6IChuYW1lID8gc2VsZltuYW1lXSA9IHt9IDoge30pOyBmbihlLCB7IGV4cG9ydHM6IGUgfSk7IH0gfSkoZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlKSB7IC8vID09PSBTeW1ib2wgU3VwcG9ydCA9PT1cblxuZnVuY3Rpb24gaGFzU3ltYm9sKG5hbWUpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBCb29sZWFuKFN5bWJvbFtuYW1lXSk7XG59XG5cbmZ1bmN0aW9uIGdldFN5bWJvbChuYW1lKSB7XG4gIHJldHVybiBoYXNTeW1ib2wobmFtZSkgPyBTeW1ib2xbbmFtZV0gOiBcIkBAXCIgKyBuYW1lO1xufVxuXG4vLyBQb255ZmlsbCBTeW1ib2wub2JzZXJ2YWJsZSBmb3IgaW50ZXJvcGVyYWJpbGl0eSB3aXRoIG90aGVyIGxpYnJhcmllc1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAhU3ltYm9sLm9ic2VydmFibGUpIHtcbiAgU3ltYm9sLm9ic2VydmFibGUgPSBTeW1ib2woXCJvYnNlcnZhYmxlXCIpO1xufVxuXG4vLyA9PT0gQWJzdHJhY3QgT3BlcmF0aW9ucyA9PT1cblxuZnVuY3Rpb24gaG9zdFJlcG9ydEVycm9yKGUpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgdGhyb3cgZSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TWV0aG9kKG9iaiwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuXG4gIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IodmFsdWUgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldFNwZWNpZXMob2JqKSB7XG4gIHZhciBjdG9yID0gb2JqLmNvbnN0cnVjdG9yO1xuICBpZiAoY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY3RvciA9IGN0b3JbZ2V0U3ltYm9sKFwic3BlY2llc1wiKV07XG4gICAgaWYgKGN0b3IgPT09IG51bGwpIHtcbiAgICAgIGN0b3IgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBjdG9yICE9PSB1bmRlZmluZWQgPyBjdG9yIDogT2JzZXJ2YWJsZTtcbn1cblxuZnVuY3Rpb24gYWRkTWV0aG9kcyh0YXJnZXQsIG1ldGhvZHMpIHtcbiAgT2JqZWN0LmtleXMobWV0aG9kcykuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG1ldGhvZHMsIGspO1xuICAgIGRlc2MuZW51bWVyYWJsZSA9IGZhbHNlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGssIGRlc2MpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgLy8gQXNzZXJ0OiAgb2JzZXJ2ZXIuX29ic2VydmVyIGlzIHVuZGVmaW5lZFxuXG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jbGVhbnVwO1xuXG4gIGlmICghY2xlYW51cClcbiAgICByZXR1cm47XG5cbiAgLy8gRHJvcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBjbGVhbnVwIGZ1bmN0aW9uIHNvIHRoYXQgd2Ugd29uJ3QgY2FsbCBpdFxuICAvLyBtb3JlIHRoYW4gb25jZVxuICBzdWJzY3JpcHRpb24uX2NsZWFudXAgPSB1bmRlZmluZWQ7XG5cbiAgLy8gQ2FsbCB0aGUgY2xlYW51cCBmdW5jdGlvblxuICB0cnkgeyBjbGVhbnVwKCkgfVxuICBjYXRjaCAoZSkgeyBob3N0UmVwb3J0RXJyb3IoZSkgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSB7XG4gIHJldHVybiBzdWJzY3JpcHRpb24uX29ic2VydmVyID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbikge1xuICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpXG4gICAgcmV0dXJuO1xuXG4gIHN1YnNjcmlwdGlvbi5fb2JzZXJ2ZXIgPSB1bmRlZmluZWQ7XG4gIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbn1cblxuZnVuY3Rpb24gY2xlYW51cEZyb21TdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCkgfTtcbn1cblxuZnVuY3Rpb24gU3Vic2NyaXB0aW9uKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIC8vIEFzc2VydDogc3Vic2NyaWJlciBpcyBjYWxsYWJsZVxuXG4gIC8vIFRoZSBvYnNlcnZlciBtdXN0IGJlIGFuIG9iamVjdFxuICBpZiAoT2JqZWN0KG9ic2VydmVyKSAhPT0gb2JzZXJ2ZXIpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9ic2VydmVyIG11c3QgYmUgYW4gb2JqZWN0XCIpO1xuXG4gIHRoaXMuX2NsZWFudXAgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX29ic2VydmVyID0gb2JzZXJ2ZXI7XG5cbiAgdHJ5IHtcbiAgICB2YXIgc3RhcnQkMCA9IGdldE1ldGhvZChvYnNlcnZlciwgXCJzdGFydFwiKTtcbiAgICBpZiAoc3RhcnQkMCkgc3RhcnQkMC5jYWxsKG9ic2VydmVyLCB0aGlzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhvc3RSZXBvcnRFcnJvcihlKTtcbiAgfVxuXG4gIGlmIChzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpXG4gICAgcmV0dXJuO1xuXG4gIG9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO1xuXG4gIHRyeSB7XG4gICAgLy8gQ2FsbCB0aGUgc3Vic2NyaWJlciBmdW5jdGlvblxuICAgIHZhciBjbGVhbnVwJDAgPSBzdWJzY3JpYmVyLmNhbGwodW5kZWZpbmVkLCBvYnNlcnZlcik7XG5cbiAgICAvLyBUaGUgcmV0dXJuIHZhbHVlIG11c3QgYmUgdW5kZWZpbmVkLCBudWxsLCBhIHN1YnNjcmlwdGlvbiBvYmplY3QsIG9yIGEgZnVuY3Rpb25cbiAgICBpZiAoY2xlYW51cCQwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cCQwLnVuc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGNsZWFudXAkMCA9IGNsZWFudXBGcm9tU3Vic2NyaXB0aW9uKGNsZWFudXAkMCk7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgY2xlYW51cCQwICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoY2xlYW51cCQwICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG5cbiAgICAgIHRoaXMuX2NsZWFudXAgPSBjbGVhbnVwJDA7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWYgYW4gZXJyb3Igb2NjdXJzIGR1cmluZyBzdGFydHVwLCB0aGVuIGF0dGVtcHQgdG8gc2VuZCB0aGUgZXJyb3JcbiAgICAvLyB0byB0aGUgb2JzZXJ2ZXJcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiB0aGUgc3RyZWFtIGlzIGFscmVhZHkgZmluaXNoZWQsIHRoZW4gcGVyZm9ybSBjbGVhbnVwXG4gIGlmIChzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpXG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn1cblxuYWRkTWV0aG9kcyhTdWJzY3JpcHRpb24ucHJvdG90eXBlID0ge30sIHtcbiAgZ2V0IGNsb3NlZCgpIHsgcmV0dXJuIHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSB9LFxuICB1bnN1YnNjcmliZTogZnVuY3Rpb24oKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpIH0sXG59KTtcblxuZnVuY3Rpb24gU3Vic2NyaXB0aW9uT2JzZXJ2ZXIoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3N1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbjtcbn1cblxuYWRkTWV0aG9kcyhTdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSB7fSwge1xuXG4gIGdldCBjbG9zZWQoKSB7IHJldHVybiBzdWJzY3JpcHRpb25DbG9zZWQodGhpcy5fc3Vic2NyaXB0aW9uKSB9LFxuXG4gIG5leHQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3N1YnNjcmlwdGlvbjtcblxuICAgIC8vIElmIHRoZSBzdHJlYW0gaXMgY2xvc2VkLCB0aGVuIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpXG4gICAgICByZXR1cm47XG5cbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX29ic2VydmVyO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIElmIHRoZSBvYnNlcnZlciBoYXMgYSBcIm5leHRcIiBtZXRob2QsIHNlbmQgdGhlIG5leHQgdmFsdWVcbiAgICAgIHZhciBtJDAgPSBnZXRNZXRob2Qob2JzZXJ2ZXIsIFwibmV4dFwiKTtcbiAgICAgIGlmIChtJDApIG0kMC5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaG9zdFJlcG9ydEVycm9yKGUpO1xuICAgIH1cbiAgfSxcblxuICBlcnJvcjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fc3Vic2NyaXB0aW9uO1xuXG4gICAgLy8gSWYgdGhlIHN0cmVhbSBpcyBjbG9zZWQsIHRocm93IHRoZSBlcnJvciB0byB0aGUgY2FsbGVyXG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICBob3N0UmVwb3J0RXJyb3IodmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fb2JzZXJ2ZXI7XG4gICAgc3Vic2NyaXB0aW9uLl9vYnNlcnZlciA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgbSQxID0gZ2V0TWV0aG9kKG9ic2VydmVyLCBcImVycm9yXCIpO1xuICAgICAgaWYgKG0kMSkgbSQxLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICAgIGVsc2UgdGhyb3cgdmFsdWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaG9zdFJlcG9ydEVycm9yKGUpO1xuICAgIH1cblxuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfSxcblxuICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3N1YnNjcmlwdGlvbjtcblxuICAgIGlmIChzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSlcbiAgICAgIHJldHVybjtcblxuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fb2JzZXJ2ZXI7XG4gICAgc3Vic2NyaXB0aW9uLl9vYnNlcnZlciA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgbSQyID0gZ2V0TWV0aG9kKG9ic2VydmVyLCBcImNvbXBsZXRlXCIpO1xuICAgICAgaWYgKG0kMikgbSQyLmNhbGwob2JzZXJ2ZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhvc3RSZXBvcnRFcnJvcihlKTtcbiAgICB9XG5cbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gIH0sXG5cbn0pO1xuXG5mdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgLy8gQ29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JzZXJ2YWJsZSBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb25cIik7XG5cbiAgLy8gVGhlIHN0cmVhbSBzdWJzY3JpYmVyIG11c3QgYmUgYSBmdW5jdGlvblxuICBpZiAodHlwZW9mIHN1YnNjcmliZXIgIT09IFwiZnVuY3Rpb25cIilcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JzZXJ2YWJsZSBpbml0aWFsaXplciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG5cbiAgdGhpcy5fc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG59XG5cbmFkZE1ldGhvZHMoT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcblxuICBzdWJzY3JpYmU6IGZ1bmN0aW9uKG9ic2VydmVyKSB7IGZvciAodmFyIGFyZ3MgPSBbXSwgX18kMCA9IDE7IF9fJDAgPCBhcmd1bWVudHMubGVuZ3RoOyArK19fJDApIGFyZ3MucHVzaChhcmd1bWVudHNbX18kMF0pOyBcbiAgICBpZiAodHlwZW9mIG9ic2VydmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvYnNlcnZlciA9IHtcbiAgICAgICAgbmV4dDogb2JzZXJ2ZXIsXG4gICAgICAgIGVycm9yOiBhcmdzWzBdLFxuICAgICAgICBjb21wbGV0ZTogYXJnc1sxXSxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICBvYnNlcnZlciA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9zdWJzY3JpYmVyKTtcbiAgfSxcblxuICBmb3JFYWNoOiBmdW5jdGlvbihmbikgeyB2YXIgX190aGlzID0gdGhpczsgXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcihmbiArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpKTtcblxuICAgICAgX190aGlzLnN1YnNjcmliZSh7XG4gICAgICAgIF9zdWJzY3JpcHRpb246IG51bGwsXG5cbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIGlmIChPYmplY3Qoc3Vic2NyaXB0aW9uKSAhPT0gc3Vic2NyaXB0aW9uKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzdWJzY3JpcHRpb24gKyBcIiBpcyBub3QgYW4gb2JqZWN0XCIpO1xuXG4gICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9LFxuXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3N1YnNjcmlwdGlvbjtcblxuICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24uY2xvc2VkKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgbWFwOiBmdW5jdGlvbihmbikgeyB2YXIgX190aGlzID0gdGhpczsgXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihmbiArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXG4gICAgdmFyIEMgPSBnZXRTcGVjaWVzKHRoaXMpO1xuXG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKSB7IHJldHVybiBfX3RoaXMuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRyeSB7IHZhbHVlID0gZm4odmFsdWUpIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgcmV0dXJuIG9ic2VydmVyLmVycm9yKGUpIH1cblxuICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgIH0sXG5cbiAgICAgIGVycm9yOiBmdW5jdGlvbihlKSB7IG9ic2VydmVyLmVycm9yKGUpIH0sXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7IG9ic2VydmVyLmNvbXBsZXRlKCkgfSxcbiAgICB9KTsgfSk7XG4gIH0sXG5cbiAgZmlsdGVyOiBmdW5jdGlvbihmbikgeyB2YXIgX190aGlzID0gdGhpczsgXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihmbiArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXG4gICAgdmFyIEMgPSBnZXRTcGVjaWVzKHRoaXMpO1xuXG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKSB7IHJldHVybiBfX3RoaXMuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRyeSB7IGlmICghZm4odmFsdWUpKSByZXR1cm4gfVxuICAgICAgICBjYXRjaCAoZSkgeyByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IoZSkgfVxuXG4gICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgfSxcblxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKGUpIHsgb2JzZXJ2ZXIuZXJyb3IoZSkgfSxcbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHsgb2JzZXJ2ZXIuY29tcGxldGUoKSB9LFxuICAgIH0pOyB9KTtcbiAgfSxcblxuICByZWR1Y2U6IGZ1bmN0aW9uKGZuKSB7IHZhciBfX3RoaXMgPSB0aGlzOyBcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGZuICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG5cbiAgICB2YXIgQyA9IGdldFNwZWNpZXModGhpcyk7XG4gICAgdmFyIGhhc1NlZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMTtcbiAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICB2YXIgc2VlZCA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgYWNjID0gc2VlZDtcblxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcikgeyByZXR1cm4gX190aGlzLnN1YnNjcmliZSh7XG5cbiAgICAgIG5leHQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHZhciBmaXJzdCA9ICFoYXNWYWx1ZTtcbiAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuXG4gICAgICAgIGlmICghZmlyc3QgfHwgaGFzU2VlZCkge1xuICAgICAgICAgIHRyeSB7IGFjYyA9IGZuKGFjYywgdmFsdWUpIH1cbiAgICAgICAgICBjYXRjaCAoZSkgeyByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IoZSkgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjYyA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBlcnJvcjogZnVuY3Rpb24oZSkgeyBvYnNlcnZlci5lcnJvcihlKSB9LFxuXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghaGFzVmFsdWUgJiYgIWhhc1NlZWQpIHtcbiAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IobmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWR1Y2UgYW4gZW1wdHkgc2VxdWVuY2VcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZXIubmV4dChhY2MpO1xuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgfSxcblxuICAgIH0pOyB9KTtcbiAgfSxcblxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYnNlcnZhYmxlLnByb3RvdHlwZSwgZ2V0U3ltYm9sKFwib2JzZXJ2YWJsZVwiKSwge1xuICB2YWx1ZTogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH0sXG4gIHdyaXRhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWUsXG59KTtcblxuYWRkTWV0aG9kcyhPYnNlcnZhYmxlLCB7XG5cbiAgZnJvbTogZnVuY3Rpb24oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMgOiBPYnNlcnZhYmxlO1xuXG4gICAgaWYgKHggPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoeCArIFwiIGlzIG5vdCBhbiBvYmplY3RcIik7XG5cbiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKHgsIGdldFN5bWJvbChcIm9ic2VydmFibGVcIikpO1xuXG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUkMCA9IG1ldGhvZC5jYWxsKHgpO1xuXG4gICAgICBpZiAoT2JqZWN0KG9ic2VydmFibGUkMCkgIT09IG9ic2VydmFibGUkMClcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihvYnNlcnZhYmxlJDAgKyBcIiBpcyBub3QgYW4gb2JqZWN0XCIpO1xuXG4gICAgICBpZiAob2JzZXJ2YWJsZSQwLmNvbnN0cnVjdG9yID09PSBDKVxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZSQwO1xuXG4gICAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpIHsgcmV0dXJuIG9ic2VydmFibGUkMC5zdWJzY3JpYmUob2JzZXJ2ZXIpOyB9KTtcbiAgICB9XG5cbiAgICBpZiAoaGFzU3ltYm9sKFwiaXRlcmF0b3JcIikgJiYgKG1ldGhvZCA9IGdldE1ldGhvZCh4LCBnZXRTeW1ib2woXCJpdGVyYXRvclwiKSkpKSB7XG4gICAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpIHtcbiAgICAgICAgZm9yICh2YXIgX18kMCA9IChtZXRob2QuY2FsbCh4KSlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfXyQxOyBfXyQxID0gX18kMC5uZXh0KCksICFfXyQxLmRvbmU7KSB7IHZhciBpdGVtJDAgPSBfXyQxLnZhbHVlOyBcbiAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW0kMCk7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLmNsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh4KSkge1xuICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkkMCA9IDA7IGkkMCA8IHgubGVuZ3RoOyArK2kkMCkge1xuICAgICAgICAgIG9ic2VydmVyLm5leHQoeFtpJDBdKTtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoeCArIFwiIGlzIG5vdCBvYnNlcnZhYmxlXCIpO1xuICB9LFxuXG4gIG9mOiBmdW5jdGlvbigpIHsgZm9yICh2YXIgaXRlbXMgPSBbXSwgX18kMCA9IDA7IF9fJDAgPCBhcmd1bWVudHMubGVuZ3RoOyArK19fJDApIGl0ZW1zLnB1c2goYXJndW1lbnRzW19fJDBdKTsgXG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gXCJmdW5jdGlvblwiID8gdGhpcyA6IE9ic2VydmFibGU7XG5cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGl0ZW1zLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tpJDFdKTtcbiAgICAgICAgaWYgKG9ic2VydmVyLmNsb3NlZClcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH0sXG5cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZSwgZ2V0U3ltYm9sKFwic3BlY2llc1wiKSwge1xuICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcyB9LFxuICBjb25maWd1cmFibGU6IHRydWUsXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE9ic2VydmFibGUsIFwiZXh0ZW5zaW9uc1wiLCB7XG4gIHZhbHVlOiB7XG4gICAgb2JzZXJ2YWJsZVN5bWJvbDogZ2V0U3ltYm9sKFwib2JzZXJ2YWJsZVwiKSxcbiAgICBzZXRIb3N0UmVwb3J0RXJyb3I6IGZ1bmN0aW9uKGZuKSB7IGhvc3RSZXBvcnRFcnJvciA9IGZuIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0cy5PYnNlcnZhYmxlID0gT2JzZXJ2YWJsZTtcblxuXG59LCBcIipcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUvemVuLW9ic2VydmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQ1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcclxuXHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ponyfill_js__ = __webpack_require__(48);\n/* global window */\n\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (true) {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = Object(__WEBPACK_IMPORTED_MODULE_0__ponyfill_js__[\"a\" /* default */])(root);\n/* harmony default export */ __webpack_exports__[\"a\"] = (result);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(47)(module)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanM/ZGYyMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoic0RBQUE7QUFBQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjQ2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanM/Y2M5NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XHJcblx0aWYoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanM/MTY3OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_link__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_apollo_utilities__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_QueryManager__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__data_store__ = __webpack_require__(56);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__version__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__version___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__version__);\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\n\n\n\nvar hasSuggestedDevtools = false;\nvar supportedDirectives = new __WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"a\" /* ApolloLink */](function (operation, forward) {\n    operation.query = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"y\" /* removeConnectionDirectiveFromDocument */])(operation.query);\n    return forward(operation);\n});\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        var link = options.link, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions;\n        if (!link || !cache) {\n            throw new Error(\"\\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\\n        For more information, please visit:\\n          https://www.apollographql.com/docs/react/basics/setup.html\\n        to help you get started.\\n      \");\n        }\n        this.link = supportedDirectives.concat(link);\n        this.cache = cache;\n        this.store = new __WEBPACK_IMPORTED_MODULE_3__data_store__[\"a\" /* DataStore */](cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.ssrMode = ssrMode;\n        this.defaultOptions = defaultOptions || {};\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = !Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"v\" /* isProduction */])() &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && !Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"v\" /* isProduction */])()) {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = __WEBPACK_IMPORTED_MODULE_4__version__[\"version\"];\n    }\n    ApolloClient.prototype.watchQuery = function (options) {\n        this.initQueryManager();\n        if (this.defaultOptions.watchQuery) {\n            options = __assign({}, this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        this.initQueryManager();\n        if (this.defaultOptions.query) {\n            options = __assign({}, this.defaultOptions.query, options);\n        }\n        if (options.fetchPolicy === 'cache-and-network') {\n            throw new Error('cache-and-network fetchPolicy can only be used with watchQuery');\n        }\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        this.initQueryManager();\n        if (this.defaultOptions.mutate) {\n            options = __assign({}, this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        this.initQueryManager();\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options) {\n        return this.initProxy().readQuery(options);\n    };\n    ApolloClient.prototype.readFragment = function (options) {\n        return this.initProxy().readFragment(options);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.initProxy().writeQuery(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.initProxy().writeFragment(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.initProxy().writeData(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return Object(__WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"c\" /* execute */])(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        var _this = this;\n        if (this.queryManager)\n            return;\n        this.queryManager = new __WEBPACK_IMPORTED_MODULE_2__core_QueryManager__[\"a\" /* QueryManager */]({\n            link: this.link,\n            store: this.store,\n            queryDeduplication: this.queryDeduplication,\n            ssrMode: this.ssrMode,\n            onBroadcast: function () {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.queryStore.getStore(),\n                            mutations: _this.queryManager.mutationStore.getStore(),\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true),\n                    });\n                }\n            },\n        });\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            _this.queryManager\n                ? _this.queryManager.resetStore()\n                : Promise.resolve(null);\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager\n            ? this.queryManager.reFetchObservableQueries(includeStandby)\n            : Promise.resolve(null);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.initProxy().extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.initProxy().restore(serializedState);\n    };\n    ApolloClient.prototype.initProxy = function () {\n        if (!this.proxy) {\n            this.initQueryManager();\n            this.proxy = this.cache;\n        }\n        return this.proxy;\n    };\n    return ApolloClient;\n}());\n/* harmony default export */ __webpack_exports__[\"a\"] = (ApolloClient);\n//# sourceMappingURL=ApolloClient.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return QueryManager; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_link__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_graphql_language_printer__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_graphql_language_printer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_graphql_language_printer__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_apollo_link_dedup__ = __webpack_require__(51);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_apollo_utilities__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__scheduler_scheduler__ = __webpack_require__(53);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__errors_ApolloError__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_Observable__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__data_mutations__ = __webpack_require__(54);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__data_queries__ = __webpack_require__(55);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__ObservableQuery__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__networkStatus__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__types__ = __webpack_require__(5);\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\n\n\n\n\n\n\n\n\n\n\nvar defaultQueryInfo = {\n    listeners: [],\n    invalidated: false,\n    document: null,\n    newData: null,\n    lastRequestId: null,\n    observableQuery: null,\n    subscriptions: [],\n};\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d;\n        this.mutationStore = new __WEBPACK_IMPORTED_MODULE_7__data_mutations__[\"a\" /* MutationStore */]();\n        this.queryStore = new __WEBPACK_IMPORTED_MODULE_8__data_queries__[\"a\" /* QueryStore */]();\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryPromises = new Map();\n        this.queryIdsByName = {};\n        this.link = link;\n        this.deduplicator = __WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"a\" /* ApolloLink */].from([new __WEBPACK_IMPORTED_MODULE_2_apollo_link_dedup__[\"a\" /* DedupLink */](), link]);\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.scheduler = new __WEBPACK_IMPORTED_MODULE_4__scheduler_scheduler__[\"a\" /* QueryScheduler */]({ queryManager: this, ssrMode: ssrMode });\n    }\n    QueryManager.prototype.mutate = function (_a) {\n        var _this = this;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, updateWithProxyFn = _a.update, _c = _a.errorPolicy, errorPolicy = _c === void 0 ? 'none' : _c, fetchPolicy = _a.fetchPolicy, _d = _a.context, context = _d === void 0 ? {} : _d;\n        if (!mutation) {\n            throw new Error('mutation option is required. You must specify your GraphQL document in the mutation option.');\n        }\n        if (fetchPolicy && fetchPolicy !== 'no-cache') {\n            throw new Error(\"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n        }\n        var mutationId = this.generateQueryId();\n        var cache = this.dataStore.getCache();\n        (mutation = cache.transformDocument(mutation)),\n            (variables = Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"c\" /* assign */])({}, Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"e\" /* getDefaultValues */])(Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"j\" /* getMutationDefinition */])(mutation)), variables));\n        var mutationString = Object(__WEBPACK_IMPORTED_MODULE_1_graphql_language_printer__[\"print\"])(mutation);\n        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n        var generateUpdateQueriesInfo = function () {\n            var ret = {};\n            if (updateQueriesByName) {\n                Object.keys(updateQueriesByName).forEach(function (queryName) {\n                    return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n                        ret[queryId] = {\n                            updater: updateQueriesByName[queryName],\n                            query: _this.queryStore.get(queryId),\n                        };\n                    });\n                });\n            }\n            return ret;\n        };\n        this.mutationStore.initMutation(mutationId, mutationString, variables);\n        this.dataStore.markMutationInit({\n            mutationId: mutationId,\n            document: mutation,\n            variables: variables || {},\n            updateQueries: generateUpdateQueriesInfo(),\n            update: updateWithProxyFn,\n            optimisticResponse: optimisticResponse,\n        });\n        this.broadcastQueries();\n        return new Promise(function (resolve, reject) {\n            var storeResult;\n            var error;\n            var operation = _this.buildOperationForLink(mutation, variables, __assign({}, context, { optimisticResponse: optimisticResponse }));\n            Object(__WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"c\" /* execute */])(_this.link, operation).subscribe({\n                next: function (result) {\n                    if (result.errors && errorPolicy === 'none') {\n                        error = new __WEBPACK_IMPORTED_MODULE_5__errors_ApolloError__[\"a\" /* ApolloError */]({\n                            graphQLErrors: result.errors,\n                        });\n                        return;\n                    }\n                    _this.mutationStore.markMutationResult(mutationId);\n                    if (fetchPolicy !== 'no-cache') {\n                        _this.dataStore.markMutationResult({\n                            mutationId: mutationId,\n                            result: result,\n                            document: mutation,\n                            variables: variables || {},\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                        });\n                    }\n                    storeResult = result;\n                },\n                error: function (err) {\n                    _this.mutationStore.markMutationError(mutationId, err);\n                    _this.dataStore.markMutationComplete({\n                        mutationId: mutationId,\n                        optimisticResponse: optimisticResponse,\n                    });\n                    _this.broadcastQueries();\n                    _this.setQuery(mutationId, function () { return ({ document: undefined }); });\n                    reject(new __WEBPACK_IMPORTED_MODULE_5__errors_ApolloError__[\"a\" /* ApolloError */]({\n                        networkError: err,\n                    }));\n                },\n                complete: function () {\n                    if (error) {\n                        _this.mutationStore.markMutationError(mutationId, error);\n                    }\n                    _this.dataStore.markMutationComplete({\n                        mutationId: mutationId,\n                        optimisticResponse: optimisticResponse,\n                    });\n                    _this.broadcastQueries();\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    if (typeof refetchQueries === 'function')\n                        refetchQueries = refetchQueries(storeResult);\n                    refetchQueries.forEach(function (refetchQuery) {\n                        if (typeof refetchQuery === 'string') {\n                            _this.refetchQueryByName(refetchQuery);\n                            return;\n                        }\n                        _this.query({\n                            query: refetchQuery.query,\n                            variables: refetchQuery.variables,\n                            fetchPolicy: 'network-only',\n                        });\n                    });\n                    _this.setQuery(mutationId, function () { return ({ document: undefined }); });\n                    if (errorPolicy === 'ignore' && storeResult && storeResult.errors) {\n                        delete storeResult.errors;\n                    }\n                    resolve(storeResult);\n                },\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        var _this = this;\n        var _a = options.variables, variables = _a === void 0 ? {} : _a, _b = options.metadata, metadata = _b === void 0 ? null : _b, _c = options.fetchPolicy, fetchPolicy = _c === void 0 ? 'cache-first' : _c;\n        var cache = this.dataStore.getCache();\n        var query = cache.transformDocument(options.query);\n        var storeResult;\n        var needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n        if (fetchType !== __WEBPACK_IMPORTED_MODULE_11__types__[\"a\" /* FetchType */].refetch &&\n            fetchPolicy !== 'network-only' &&\n            fetchPolicy !== 'no-cache') {\n            var _d = this.dataStore.getCache().diff({\n                query: query,\n                variables: variables,\n                returnPartialData: true,\n                optimistic: false,\n            }), complete = _d.complete, result = _d.result;\n            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n            storeResult = result;\n        }\n        var shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n        if (Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"p\" /* hasDirectives */])(['live'], query))\n            shouldFetch = true;\n        var requestId = this.generateRequestId();\n        var cancel = this.updateQueryWatch(queryId, query, options);\n        this.setQuery(queryId, function () { return ({\n            document: query,\n            lastRequestId: requestId,\n            invalidated: true,\n            cancel: cancel,\n        }); });\n        this.invalidate(true, fetchMoreForQueryId);\n        this.queryStore.initQuery({\n            queryId: queryId,\n            queryString: Object(__WEBPACK_IMPORTED_MODULE_1_graphql_language_printer__[\"print\"])(query),\n            document: query,\n            storePreviousVariables: shouldFetch,\n            variables: variables,\n            isPoll: fetchType === __WEBPACK_IMPORTED_MODULE_11__types__[\"a\" /* FetchType */].poll,\n            isRefetch: fetchType === __WEBPACK_IMPORTED_MODULE_11__types__[\"a\" /* FetchType */].refetch,\n            metadata: metadata,\n            fetchMoreForQueryId: fetchMoreForQueryId,\n        });\n        this.broadcastQueries();\n        var shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n        if (shouldDispatchClientResult) {\n            this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n            this.invalidate(true, queryId, fetchMoreForQueryId);\n            this.broadcastQueries();\n        }\n        if (shouldFetch) {\n            var networkResult = this.fetchRequest({\n                requestId: requestId,\n                queryId: queryId,\n                document: query,\n                options: options,\n                fetchMoreForQueryId: fetchMoreForQueryId,\n            }).catch(function (error) {\n                if (Object(__WEBPACK_IMPORTED_MODULE_5__errors_ApolloError__[\"b\" /* isApolloError */])(error)) {\n                    throw error;\n                }\n                else {\n                    var lastRequestId = _this.getQuery(queryId).lastRequestId;\n                    if (requestId >= (lastRequestId || 1)) {\n                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                        _this.invalidate(true, queryId, fetchMoreForQueryId);\n                        _this.broadcastQueries();\n                    }\n                    _this.removeFetchQueryPromise(requestId);\n                    throw new __WEBPACK_IMPORTED_MODULE_5__errors_ApolloError__[\"a\" /* ApolloError */]({ networkError: error });\n                }\n            });\n            if (fetchPolicy !== 'cache-and-network') {\n                return networkResult;\n            }\n            else {\n                networkResult.catch(function () { });\n            }\n        }\n        return Promise.resolve({ data: storeResult });\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        var previouslyHadError = false;\n        return function (queryStoreValue, newData) {\n            _this.invalidate(false, queryId);\n            if (!queryStoreValue)\n                return;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            var fetchPolicy = observableQuery\n                ? observableQuery.options.fetchPolicy\n                : options.fetchPolicy;\n            if (fetchPolicy === 'standby')\n                return;\n            var errorPolicy = observableQuery\n                ? observableQuery.options.errorPolicy\n                : options.errorPolicy;\n            var lastResult = observableQuery\n                ? observableQuery.getLastResult()\n                : null;\n            var lastError = observableQuery ? observableQuery.getLastError() : null;\n            var shouldNotifyIfLoading = (!newData && queryStoreValue.previousVariables != null) ||\n                fetchPolicy === 'cache-only' ||\n                fetchPolicy === 'cache-and-network';\n            var networkStatusChanged = Boolean(lastResult &&\n                queryStoreValue.networkStatus !== lastResult.networkStatus);\n            var errorStatusChanged = errorPolicy &&\n                (lastError && lastError.graphQLErrors) !==\n                    queryStoreValue.graphQLErrors &&\n                errorPolicy !== 'none';\n            if (!Object(__WEBPACK_IMPORTED_MODULE_10__networkStatus__[\"b\" /* isNetworkRequestInFlight */])(queryStoreValue.networkStatus) ||\n                (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                shouldNotifyIfLoading) {\n                if (((!errorPolicy || errorPolicy === 'none') &&\n                    queryStoreValue.graphQLErrors &&\n                    queryStoreValue.graphQLErrors.length > 0) ||\n                    queryStoreValue.networkError) {\n                    var apolloError_1 = new __WEBPACK_IMPORTED_MODULE_5__errors_ApolloError__[\"a\" /* ApolloError */]({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    });\n                    previouslyHadError = true;\n                    if (observer.error) {\n                        try {\n                            observer.error(apolloError_1);\n                        }\n                        catch (e) {\n                            setTimeout(function () {\n                                throw e;\n                            }, 0);\n                        }\n                    }\n                    else {\n                        setTimeout(function () {\n                            throw apolloError_1;\n                        }, 0);\n                        if (!Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"v\" /* isProduction */])()) {\n                            console.info('An unhandled error was thrown because no error handler is registered ' +\n                                'for the query ' +\n                                queryStoreValue.queryString);\n                        }\n                    }\n                    return;\n                }\n                try {\n                    var data = void 0;\n                    var isMissing = void 0;\n                    if (newData) {\n                        _this.setQuery(queryId, function () { return ({ newData: null }); });\n                        data = newData.result;\n                        isMissing = !newData.complete ? !newData.complete : false;\n                    }\n                    else {\n                        if (lastResult && lastResult.data && !errorStatusChanged) {\n                            data = lastResult.data;\n                            isMissing = false;\n                        }\n                        else {\n                            var document_1 = _this.getQuery(queryId).document;\n                            var readResult = _this.dataStore.getCache().diff({\n                                query: document_1,\n                                variables: queryStoreValue.previousVariables ||\n                                    queryStoreValue.variables,\n                                optimistic: true,\n                            });\n                            data = readResult.result;\n                            isMissing = !readResult.complete;\n                        }\n                    }\n                    var resultFromStore = void 0;\n                    if (isMissing && fetchPolicy !== 'cache-only') {\n                        resultFromStore = {\n                            data: lastResult && lastResult.data,\n                            loading: Object(__WEBPACK_IMPORTED_MODULE_10__networkStatus__[\"b\" /* isNetworkRequestInFlight */])(queryStoreValue.networkStatus),\n                            networkStatus: queryStoreValue.networkStatus,\n                            stale: true,\n                        };\n                    }\n                    else {\n                        resultFromStore = {\n                            data: data,\n                            loading: Object(__WEBPACK_IMPORTED_MODULE_10__networkStatus__[\"b\" /* isNetworkRequestInFlight */])(queryStoreValue.networkStatus),\n                            networkStatus: queryStoreValue.networkStatus,\n                            stale: false,\n                        };\n                    }\n                    if (errorPolicy === 'all' &&\n                        queryStoreValue.graphQLErrors &&\n                        queryStoreValue.graphQLErrors.length > 0) {\n                        resultFromStore.errors = queryStoreValue.graphQLErrors;\n                    }\n                    if (observer.next) {\n                        var isDifferentResult = !(lastResult &&\n                            resultFromStore &&\n                            lastResult.networkStatus === resultFromStore.networkStatus &&\n                            lastResult.stale === resultFromStore.stale &&\n                            lastResult.data === resultFromStore.data);\n                        if (isDifferentResult || previouslyHadError) {\n                            try {\n                                observer.next(Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"x\" /* maybeDeepFreeze */])(resultFromStore));\n                            }\n                            catch (e) {\n                                setTimeout(function () {\n                                    throw e;\n                                }, 0);\n                            }\n                        }\n                    }\n                    previouslyHadError = false;\n                }\n                catch (error) {\n                    previouslyHadError = true;\n                    if (observer.error)\n                        observer.error(new __WEBPACK_IMPORTED_MODULE_5__errors_ApolloError__[\"a\" /* ApolloError */]({ networkError: error }));\n                    return;\n                }\n            }\n        };\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        if (options.fetchPolicy === 'standby') {\n            throw new Error('client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        }\n        var queryDefinition = Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"m\" /* getQueryDefinition */])(options.query);\n        if (queryDefinition.variableDefinitions &&\n            queryDefinition.variableDefinitions.length) {\n            var defaultValues = Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"e\" /* getDefaultValues */])(queryDefinition);\n            options.variables = Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"c\" /* assign */])({}, defaultValues, options.variables);\n        }\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new __WEBPACK_IMPORTED_MODULE_9__ObservableQuery__[\"a\" /* ObservableQuery */]({\n            scheduler: this.scheduler,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        if (!options.query) {\n            throw new Error('query option is required. You must specify your GraphQL document in the query option.');\n        }\n        if (options.query.kind !== 'Document') {\n            throw new Error('You must wrap the query string in a \"gql\" tag.');\n        }\n        if (options.returnPartialData) {\n            throw new Error('returnPartialData option only supported on watchQuery.');\n        }\n        if (options.pollInterval) {\n            throw new Error('pollInterval option only supported on watchQuery.');\n        }\n        if (typeof options.notifyOnNetworkStatusChange !== 'undefined') {\n            throw new Error('Cannot call \"query\" with \"notifyOnNetworkStatusChange\" option. Only \"watchQuery\" has that option.');\n        }\n        options.notifyOnNetworkStatusChange = false;\n        var requestId = this.idCounter;\n        var resPromise = new Promise(function (resolve, reject) {\n            _this.addFetchQueryPromise(requestId, resPromise, resolve, reject);\n            return _this.watchQuery(options, false)\n                .result()\n                .then(function (result) {\n                _this.removeFetchQueryPromise(requestId);\n                resolve(result);\n            })\n                .catch(function (error) {\n                _this.removeFetchQueryPromise(requestId);\n                reject(error);\n            });\n        });\n        return resPromise;\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        var queryId = this.idCounter.toString();\n        this.idCounter++;\n        return queryId;\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(true, queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var _b = _a.listeners, listeners = _b === void 0 ? [] : _b;\n            return ({\n                listeners: listeners.concat([listener]),\n                invalidate: false,\n            });\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addFetchQueryPromise = function (requestId, promise, resolve, reject) {\n        this.fetchQueryPromises.set(requestId.toString(), {\n            promise: promise,\n            resolve: resolve,\n            reject: reject,\n        });\n    };\n    QueryManager.prototype.removeFetchQueryPromise = function (requestId) {\n        this.fetchQueryPromises.delete(requestId.toString());\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n        var queryDef = Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"m\" /* getQueryDefinition */])(observableQuery.options.query);\n        if (queryDef.name && queryDef.name.value) {\n            var queryName = queryDef.name.value;\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n            this.queryIdsByName[queryName].push(observableQuery.queryId);\n        }\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var _a = this.getQuery(queryId), observableQuery = _a.observableQuery, cancel = _a.cancel;\n        if (cancel)\n            cancel();\n        if (!observableQuery)\n            return;\n        var definition = Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"m\" /* getQueryDefinition */])(observableQuery.options.query);\n        var queryName = definition.name ? definition.name.value : null;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (queryName) {\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n                return !(observableQuery.queryId === val);\n            });\n        }\n    };\n    QueryManager.prototype.resetStore = function () {\n        this.fetchQueryPromises.forEach(function (_a) {\n            var reject = _a.reject;\n            reject(new Error('Store reset while query was in flight.'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        var dataStoreReset = this.dataStore.reset();\n        var observableQueryPromises = this.getObservableQueryPromises();\n        this.broadcastQueries();\n        return dataStoreReset.then(function () { return Promise.all(observableQueryPromises); });\n    };\n    QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n        var _this = this;\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (!observableQuery)\n                return;\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (fetchPolicy !== 'cache-only' &&\n                (includeStandby || fetchPolicy !== 'standby')) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.setQuery(queryId, function () { return ({ newData: null }); });\n            _this.invalidate(true, queryId);\n        });\n        return observableQueryPromises;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (options) {\n        var _this = this;\n        var query = options.query;\n        var cache = this.dataStore.getCache();\n        var transformedDoc = cache.transformDocument(query);\n        var variables = Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"c\" /* assign */])({}, Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"e\" /* getDefaultValues */])(Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"k\" /* getOperationDefinition */])(query)), options.variables);\n        var sub;\n        var observers = [];\n        return new __WEBPACK_IMPORTED_MODULE_6__util_Observable__[\"a\" /* Observable */](function (observer) {\n            observers.push(observer);\n            if (observers.length === 1) {\n                var handler = {\n                    next: function (result) {\n                        _this.dataStore.markSubscriptionResult(result, transformedDoc, variables);\n                        _this.broadcastQueries();\n                        observers.forEach(function (obs) {\n                            if (obs.next)\n                                obs.next(result);\n                        });\n                    },\n                    error: function (error) {\n                        observers.forEach(function (obs) {\n                            if (obs.error)\n                                obs.error(error);\n                        });\n                    },\n                };\n                var operation = _this.buildOperationForLink(transformedDoc, variables);\n                sub = Object(__WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"c\" /* execute */])(_this.link, operation).subscribe(handler);\n            }\n            return function () {\n                observers = observers.filter(function (obs) { return obs !== observer; });\n                if (observers.length === 0 && sub) {\n                    sub.unsubscribe();\n                }\n            };\n        });\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.removeQuery(queryId);\n        this.stopQueryInStore(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        var subscriptions = this.getQuery(queryId).subscriptions;\n        subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery) {\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData) {\n            return Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"x\" /* maybeDeepFreeze */])({ data: newData.result, partial: false });\n        }\n        else {\n            try {\n                var data = this.dataStore.getCache().read({\n                    query: query,\n                    variables: variables,\n                    previousResult: lastResult ? lastResult.data : undefined,\n                    optimistic: true,\n                });\n                return Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"x\" /* maybeDeepFreeze */])({ data: data, partial: false });\n            }\n            catch (e) {\n                return Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"x\" /* maybeDeepFreeze */])({ data: {}, partial: true });\n            }\n        }\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            if (!foundObserveableQuery) {\n                throw new Error(\"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            }\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        var data = this.getCurrentQueryResult(observableQuery).data;\n        return {\n            previousResult: data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        var _this = this;\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (!info.invalidated || !info.listeners)\n                return;\n            info.listeners\n                .filter(function (x) { return !!x; })\n                .forEach(function (listener) {\n                listener(_this.queryStore.get(id), info.newData);\n            });\n        });\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, context = options.context, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var operation = this.buildOperationForLink(document, variables, __assign({}, context, { forceFetch: !this.queryDeduplication }));\n        var resultFromStore;\n        var errorsFromStore;\n        var retPromise = new Promise(function (resolve, reject) {\n            _this.addFetchQueryPromise(requestId, retPromise, resolve, reject);\n            var subscription = Object(__WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"c\" /* execute */])(_this.deduplicator, operation).subscribe({\n                next: function (result) {\n                    var lastRequestId = _this.getQuery(queryId).lastRequestId;\n                    if (requestId >= (lastRequestId || 1)) {\n                        if (fetchPolicy !== 'no-cache') {\n                            try {\n                                _this.dataStore.markQueryResult(result, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n                            }\n                            catch (e) {\n                                reject(e);\n                                return;\n                            }\n                        }\n                        _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n                        _this.invalidate(true, queryId, fetchMoreForQueryId);\n                        _this.broadcastQueries();\n                    }\n                    if (result.errors && errorPolicy === 'none') {\n                        reject(new __WEBPACK_IMPORTED_MODULE_5__errors_ApolloError__[\"a\" /* ApolloError */]({\n                            graphQLErrors: result.errors,\n                        }));\n                        return;\n                    }\n                    else if (errorPolicy === 'all') {\n                        errorsFromStore = result.errors;\n                    }\n                    if (fetchMoreForQueryId) {\n                        resultFromStore = result.data;\n                    }\n                    else {\n                        try {\n                            resultFromStore = _this.dataStore.getCache().read({\n                                variables: variables,\n                                query: document,\n                                optimistic: false,\n                            });\n                        }\n                        catch (e) { }\n                    }\n                },\n                error: function (error) {\n                    _this.removeFetchQueryPromise(requestId);\n                    _this.setQuery(queryId, function (_a) {\n                        var subscriptions = _a.subscriptions;\n                        return ({\n                            subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                        });\n                    });\n                    reject(error);\n                },\n                complete: function () {\n                    _this.removeFetchQueryPromise(requestId);\n                    _this.setQuery(queryId, function (_a) {\n                        var subscriptions = _a.subscriptions;\n                        return ({\n                            subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                        });\n                    });\n                    resolve({\n                        data: resultFromStore,\n                        errors: errorsFromStore,\n                        loading: false,\n                        networkStatus: __WEBPACK_IMPORTED_MODULE_10__networkStatus__[\"a\" /* NetworkStatus */].ready,\n                        stale: false,\n                    });\n                },\n            });\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                return ({\n                    subscriptions: subscriptions.concat([subscription]),\n                });\n            });\n        });\n        return retPromise;\n    };\n    QueryManager.prototype.refetchQueryByName = function (queryName) {\n        var _this = this;\n        var refetchedQueries = this.queryIdsByName[queryName];\n        if (refetchedQueries === undefined)\n            return;\n        return Promise.all(refetchedQueries\n            .map(function (id) { return _this.getQuery(id).observableQuery; })\n            .filter(function (x) { return !!x; })\n            .map(function (x) { return x.refetch(); }));\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        var requestId = this.idCounter;\n        this.idCounter++;\n        return requestId;\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return this.queries.get(queryId) || __assign({}, defaultQueryInfo);\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign({}, prev, updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n        if (queryId)\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        if (fetchMoreForQueryId) {\n            this.setQuery(fetchMoreForQueryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n        var cache = this.dataStore.getCache();\n        return {\n            query: cache.transformForLink\n                ? cache.transformForLink(document)\n                : document,\n            variables: variables,\n            operationName: Object(__WEBPACK_IMPORTED_MODULE_3_apollo_utilities__[\"l\" /* getOperationName */])(document) || undefined,\n            context: __assign({}, extraContext, { cache: cache, getCacheKey: function (obj) {\n                    if (cache.config) {\n                        return cache.config.dataIdFromObject(obj);\n                    }\n                    else {\n                        throw new Error('To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                    }\n                } }),\n        };\n    };\n    return QueryManager;\n}());\n\n//# sourceMappingURL=QueryManager.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__dedupLink__ = __webpack_require__(52);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__dedupLink__[\"a\"]; });\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmstZGVkdXAvbGliL2luZGV4LmpzPzI5NDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBIiwiZmlsZSI6IjUxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kZWR1cExpbmsnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmstZGVkdXAvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DedupLink; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_link__ = __webpack_require__(4);\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nvar DedupLink = (function (_super) {\n    __extends(DedupLink, _super);\n    function DedupLink() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inFlightRequestObservables = new Map();\n        _this.subscribers = new Map();\n        return _this;\n    }\n    DedupLink.prototype.request = function (operation, forward) {\n        var _this = this;\n        if (operation.getContext().forceFetch) {\n            return forward(operation);\n        }\n        var key = operation.toKey();\n        var cleanup = function (key) {\n            _this.inFlightRequestObservables.delete(key);\n            var prev = _this.subscribers.get(key);\n            return prev;\n        };\n        if (!this.inFlightRequestObservables.get(key)) {\n            var singleObserver_1 = forward(operation);\n            var subscription_1;\n            var sharedObserver = new __WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"b\" /* Observable */](function (observer) {\n                var prev = _this.subscribers.get(key);\n                if (!prev)\n                    prev = { next: [], error: [], complete: [] };\n                _this.subscribers.set(key, {\n                    next: prev.next.concat([observer.next.bind(observer)]),\n                    error: prev.error.concat([observer.error.bind(observer)]),\n                    complete: prev.complete.concat([observer.complete.bind(observer)]),\n                });\n                if (!subscription_1) {\n                    subscription_1 = singleObserver_1.subscribe({\n                        next: function (result) {\n                            var prev = cleanup(key);\n                            _this.subscribers.delete(key);\n                            if (prev) {\n                                prev.next.forEach(function (next) { return next(result); });\n                                prev.complete.forEach(function (complete) { return complete(); });\n                            }\n                        },\n                        error: function (error) {\n                            var prev = cleanup(key);\n                            _this.subscribers.delete(key);\n                            if (prev)\n                                prev.error.forEach(function (err) { return err(error); });\n                        },\n                    });\n                }\n                return function () {\n                    if (subscription_1)\n                        subscription_1.unsubscribe();\n                    _this.inFlightRequestObservables.delete(key);\n                };\n            });\n            this.inFlightRequestObservables.set(key, sharedObserver);\n        }\n        return this.inFlightRequestObservables.get(key);\n    };\n    return DedupLink;\n}(__WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"a\" /* ApolloLink */]));\n\n//# sourceMappingURL=dedupLink.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmstZGVkdXAvbGliL2RlZHVwTGluay5qcz83ODcxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUFBO0FBQ0E7QUFDQSxVQUFVLGdCQUFnQixzQ0FBc0MsaUJBQWlCLEVBQUU7QUFDbkYseUJBQXlCLHVEQUF1RDtBQUNoRjtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0EsQ0FBQztBQUNpQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUscUJBQXFCLEVBQUU7QUFDMUYsMkVBQTJFLG1CQUFtQixFQUFFO0FBQ2hHO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLG1CQUFtQixFQUFFO0FBQ3hGLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ087QUFDUiIsImZpbGUiOiI1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuaW1wb3J0IHsgQXBvbGxvTGluaywgT2JzZXJ2YWJsZSwgfSBmcm9tICdhcG9sbG8tbGluayc7XG52YXIgRGVkdXBMaW5rID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVkdXBMaW5rLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlZHVwTGluaygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmluRmxpZ2h0UmVxdWVzdE9ic2VydmFibGVzID0gbmV3IE1hcCgpO1xuICAgICAgICBfdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWR1cExpbmsucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAob3BlcmF0aW9uLCBmb3J3YXJkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChvcGVyYXRpb24uZ2V0Q29udGV4dCgpLmZvcmNlRmV0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3J3YXJkKG9wZXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleSA9IG9wZXJhdGlvbi50b0tleSgpO1xuICAgICAgICB2YXIgY2xlYW51cCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIF90aGlzLmluRmxpZ2h0UmVxdWVzdE9ic2VydmFibGVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgdmFyIHByZXYgPSBfdGhpcy5zdWJzY3JpYmVycy5nZXQoa2V5KTtcbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIXRoaXMuaW5GbGlnaHRSZXF1ZXN0T2JzZXJ2YWJsZXMuZ2V0KGtleSkpIHtcbiAgICAgICAgICAgIHZhciBzaW5nbGVPYnNlcnZlcl8xID0gZm9yd2FyZChvcGVyYXRpb24pO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbl8xO1xuICAgICAgICAgICAgdmFyIHNoYXJlZE9ic2VydmVyID0gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXYgPSBfdGhpcy5zdWJzY3JpYmVycy5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIXByZXYpXG4gICAgICAgICAgICAgICAgICAgIHByZXYgPSB7IG5leHQ6IFtdLCBlcnJvcjogW10sIGNvbXBsZXRlOiBbXSB9O1xuICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZXJzLnNldChrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogcHJldi5uZXh0LmNvbmNhdChbb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKV0pLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogcHJldi5lcnJvci5jb25jYXQoW29ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpXSksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBwcmV2LmNvbXBsZXRlLmNvbmNhdChbb2JzZXJ2ZXIuY29tcGxldGUuYmluZChvYnNlcnZlcildKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbl8xKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbl8xID0gc2luZ2xlT2JzZXJ2ZXJfMS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gY2xlYW51cChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXYubmV4dC5mb3JFYWNoKGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBuZXh0KHJlc3VsdCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2LmNvbXBsZXRlLmZvckVhY2goZnVuY3Rpb24gKGNvbXBsZXRlKSB7IHJldHVybiBjb21wbGV0ZSgpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gY2xlYW51cChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2LmVycm9yLmZvckVhY2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXJyKGVycm9yKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbl8xKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uXzEudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5GbGlnaHRSZXF1ZXN0T2JzZXJ2YWJsZXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5pbkZsaWdodFJlcXVlc3RPYnNlcnZhYmxlcy5zZXQoa2V5LCBzaGFyZWRPYnNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5GbGlnaHRSZXF1ZXN0T2JzZXJ2YWJsZXMuZ2V0KGtleSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVkdXBMaW5rO1xufShBcG9sbG9MaW5rKSk7XG5leHBvcnQgeyBEZWR1cExpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZHVwTGluay5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tbGluay1kZWR1cC9saWIvZGVkdXBMaW5rLmpzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return QueryScheduler; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_types__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_ObservableQuery__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_networkStatus__ = __webpack_require__(3);\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\n\nvar QueryScheduler = (function () {\n    function QueryScheduler(_a) {\n        var queryManager = _a.queryManager, ssrMode = _a.ssrMode;\n        this.inFlightQueries = {};\n        this.registeredQueries = {};\n        this.intervalQueries = {};\n        this.pollingTimers = {};\n        this.ssrMode = false;\n        this.queryManager = queryManager;\n        this.ssrMode = ssrMode || false;\n    }\n    QueryScheduler.prototype.checkInFlight = function (queryId) {\n        var query = this.queryManager.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== __WEBPACK_IMPORTED_MODULE_2__core_networkStatus__[\"a\" /* NetworkStatus */].ready &&\n            query.networkStatus !== __WEBPACK_IMPORTED_MODULE_2__core_networkStatus__[\"a\" /* NetworkStatus */].error);\n    };\n    QueryScheduler.prototype.fetchQuery = function (queryId, options, fetchType) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.queryManager\n                .fetchQuery(queryId, options, fetchType)\n                .then(function (result) {\n                resolve(result);\n            })\n                .catch(function (error) {\n                reject(error);\n            });\n        });\n    };\n    QueryScheduler.prototype.startPollingQuery = function (options, queryId, listener) {\n        if (!options.pollInterval) {\n            throw new Error('Attempted to start a polling query without a polling interval.');\n        }\n        if (this.ssrMode)\n            return queryId;\n        this.registeredQueries[queryId] = options;\n        if (listener) {\n            this.queryManager.addQueryListener(queryId, listener);\n        }\n        this.addQueryOnInterval(queryId, options);\n        return queryId;\n    };\n    QueryScheduler.prototype.stopPollingQuery = function (queryId) {\n        delete this.registeredQueries[queryId];\n    };\n    QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {\n        var _this = this;\n        this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {\n            if (!(_this.registeredQueries.hasOwnProperty(queryId) &&\n                _this.registeredQueries[queryId].pollInterval === interval)) {\n                return false;\n            }\n            if (_this.checkInFlight(queryId)) {\n                return true;\n            }\n            var queryOptions = _this.registeredQueries[queryId];\n            var pollingOptions = __assign({}, queryOptions);\n            pollingOptions.fetchPolicy = 'network-only';\n            _this.fetchQuery(queryId, pollingOptions, __WEBPACK_IMPORTED_MODULE_0__core_types__[\"a\" /* FetchType */].poll).catch(function () { });\n            return true;\n        });\n        if (this.intervalQueries[interval].length === 0) {\n            clearInterval(this.pollingTimers[interval]);\n            delete this.intervalQueries[interval];\n        }\n    };\n    QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {\n        var _this = this;\n        var interval = queryOptions.pollInterval;\n        if (!interval) {\n            throw new Error(\"A poll interval is required to start polling query with id '\" + queryId + \"'.\");\n        }\n        if (this.intervalQueries.hasOwnProperty(interval.toString()) &&\n            this.intervalQueries[interval].length > 0) {\n            this.intervalQueries[interval].push(queryId);\n        }\n        else {\n            this.intervalQueries[interval] = [queryId];\n            this.pollingTimers[interval] = setInterval(function () {\n                _this.fetchQueriesOnInterval(interval);\n            }, interval);\n        }\n    };\n    QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {\n        if (!queryOptions.pollInterval) {\n            throw new Error('Attempted to register a non-polling query with the scheduler.');\n        }\n        return new __WEBPACK_IMPORTED_MODULE_1__core_ObservableQuery__[\"a\" /* ObservableQuery */]({\n            scheduler: this,\n            options: queryOptions,\n        });\n    };\n    return QueryScheduler;\n}());\n\n//# sourceMappingURL=scheduler.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC9zY2hlZHVsZXIvc2NoZWR1bGVyLmpzPzBlYzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFBQTtBQUNBLDRDQUE0QyxPQUFPO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNvQjtBQUNNO0FBQ0Y7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0EsOElBQXlGLEVBQUU7QUFDM0Y7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ087QUFDUiIsImZpbGUiOiI1My5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IHsgRmV0Y2hUeXBlIH0gZnJvbSAnLi4vY29yZS90eXBlcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlUXVlcnkgfSBmcm9tICcuLi9jb3JlL09ic2VydmFibGVRdWVyeSc7XG5pbXBvcnQgeyBOZXR3b3JrU3RhdHVzIH0gZnJvbSAnLi4vY29yZS9uZXR3b3JrU3RhdHVzJztcbnZhciBRdWVyeVNjaGVkdWxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUXVlcnlTY2hlZHVsZXIoX2EpIHtcbiAgICAgICAgdmFyIHF1ZXJ5TWFuYWdlciA9IF9hLnF1ZXJ5TWFuYWdlciwgc3NyTW9kZSA9IF9hLnNzck1vZGU7XG4gICAgICAgIHRoaXMuaW5GbGlnaHRRdWVyaWVzID0ge307XG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZFF1ZXJpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbFF1ZXJpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5wb2xsaW5nVGltZXJzID0ge307XG4gICAgICAgIHRoaXMuc3NyTW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnF1ZXJ5TWFuYWdlciA9IHF1ZXJ5TWFuYWdlcjtcbiAgICAgICAgdGhpcy5zc3JNb2RlID0gc3NyTW9kZSB8fCBmYWxzZTtcbiAgICB9XG4gICAgUXVlcnlTY2hlZHVsZXIucHJvdG90eXBlLmNoZWNrSW5GbGlnaHQgPSBmdW5jdGlvbiAocXVlcnlJZCkge1xuICAgICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5TWFuYWdlci5xdWVyeVN0b3JlLmdldChxdWVyeUlkKTtcbiAgICAgICAgcmV0dXJuIChxdWVyeSAmJlxuICAgICAgICAgICAgcXVlcnkubmV0d29ya1N0YXR1cyAhPT0gTmV0d29ya1N0YXR1cy5yZWFkeSAmJlxuICAgICAgICAgICAgcXVlcnkubmV0d29ya1N0YXR1cyAhPT0gTmV0d29ya1N0YXR1cy5lcnJvcik7XG4gICAgfTtcbiAgICBRdWVyeVNjaGVkdWxlci5wcm90b3R5cGUuZmV0Y2hRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeUlkLCBvcHRpb25zLCBmZXRjaFR5cGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIF90aGlzLnF1ZXJ5TWFuYWdlclxuICAgICAgICAgICAgICAgIC5mZXRjaFF1ZXJ5KHF1ZXJ5SWQsIG9wdGlvbnMsIGZldGNoVHlwZSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFF1ZXJ5U2NoZWR1bGVyLnByb3RvdHlwZS5zdGFydFBvbGxpbmdRdWVyeSA9IGZ1bmN0aW9uIChvcHRpb25zLCBxdWVyeUlkLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIW9wdGlvbnMucG9sbEludGVydmFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byBzdGFydCBhIHBvbGxpbmcgcXVlcnkgd2l0aG91dCBhIHBvbGxpbmcgaW50ZXJ2YWwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3NyTW9kZSlcbiAgICAgICAgICAgIHJldHVybiBxdWVyeUlkO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyZWRRdWVyaWVzW3F1ZXJ5SWRdID0gb3B0aW9ucztcbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5TWFuYWdlci5hZGRRdWVyeUxpc3RlbmVyKHF1ZXJ5SWQsIGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZFF1ZXJ5T25JbnRlcnZhbChxdWVyeUlkLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5SWQ7XG4gICAgfTtcbiAgICBRdWVyeVNjaGVkdWxlci5wcm90b3R5cGUuc3RvcFBvbGxpbmdRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeUlkKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJlZ2lzdGVyZWRRdWVyaWVzW3F1ZXJ5SWRdO1xuICAgIH07XG4gICAgUXVlcnlTY2hlZHVsZXIucHJvdG90eXBlLmZldGNoUXVlcmllc09uSW50ZXJ2YWwgPSBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5pbnRlcnZhbFF1ZXJpZXNbaW50ZXJ2YWxdID0gdGhpcy5pbnRlcnZhbFF1ZXJpZXNbaW50ZXJ2YWxdLmZpbHRlcihmdW5jdGlvbiAocXVlcnlJZCkge1xuICAgICAgICAgICAgaWYgKCEoX3RoaXMucmVnaXN0ZXJlZFF1ZXJpZXMuaGFzT3duUHJvcGVydHkocXVlcnlJZCkgJiZcbiAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RlcmVkUXVlcmllc1txdWVyeUlkXS5wb2xsSW50ZXJ2YWwgPT09IGludGVydmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5jaGVja0luRmxpZ2h0KHF1ZXJ5SWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcXVlcnlPcHRpb25zID0gX3RoaXMucmVnaXN0ZXJlZFF1ZXJpZXNbcXVlcnlJZF07XG4gICAgICAgICAgICB2YXIgcG9sbGluZ09wdGlvbnMgPSBfX2Fzc2lnbih7fSwgcXVlcnlPcHRpb25zKTtcbiAgICAgICAgICAgIHBvbGxpbmdPcHRpb25zLmZldGNoUG9saWN5ID0gJ25ldHdvcmstb25seSc7XG4gICAgICAgICAgICBfdGhpcy5mZXRjaFF1ZXJ5KHF1ZXJ5SWQsIHBvbGxpbmdPcHRpb25zLCBGZXRjaFR5cGUucG9sbCkuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuaW50ZXJ2YWxRdWVyaWVzW2ludGVydmFsXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wb2xsaW5nVGltZXJzW2ludGVydmFsXSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5pbnRlcnZhbFF1ZXJpZXNbaW50ZXJ2YWxdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBRdWVyeVNjaGVkdWxlci5wcm90b3R5cGUuYWRkUXVlcnlPbkludGVydmFsID0gZnVuY3Rpb24gKHF1ZXJ5SWQsIHF1ZXJ5T3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaW50ZXJ2YWwgPSBxdWVyeU9wdGlvbnMucG9sbEludGVydmFsO1xuICAgICAgICBpZiAoIWludGVydmFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIHBvbGwgaW50ZXJ2YWwgaXMgcmVxdWlyZWQgdG8gc3RhcnQgcG9sbGluZyBxdWVyeSB3aXRoIGlkICdcIiArIHF1ZXJ5SWQgKyBcIicuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmludGVydmFsUXVlcmllcy5oYXNPd25Qcm9wZXJ0eShpbnRlcnZhbC50b1N0cmluZygpKSAmJlxuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbFF1ZXJpZXNbaW50ZXJ2YWxdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWxRdWVyaWVzW2ludGVydmFsXS5wdXNoKHF1ZXJ5SWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbFF1ZXJpZXNbaW50ZXJ2YWxdID0gW3F1ZXJ5SWRdO1xuICAgICAgICAgICAgdGhpcy5wb2xsaW5nVGltZXJzW2ludGVydmFsXSA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5mZXRjaFF1ZXJpZXNPbkludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgIH0sIGludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUXVlcnlTY2hlZHVsZXIucHJvdG90eXBlLnJlZ2lzdGVyUG9sbGluZ1F1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5T3B0aW9ucykge1xuICAgICAgICBpZiAoIXF1ZXJ5T3B0aW9ucy5wb2xsSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIHJlZ2lzdGVyIGEgbm9uLXBvbGxpbmcgcXVlcnkgd2l0aCB0aGUgc2NoZWR1bGVyLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVF1ZXJ5KHtcbiAgICAgICAgICAgIHNjaGVkdWxlcjogdGhpcyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHF1ZXJ5T3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gUXVlcnlTY2hlZHVsZXI7XG59KCkpO1xuZXhwb3J0IHsgUXVlcnlTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tY2xpZW50L3NjaGVkdWxlci9zY2hlZHVsZXIuanNcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MutationStore; });\nvar MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutationString, variables) {\n        this.store[mutationId] = {\n            mutationString: mutationString,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = error;\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (!mutation) {\n            return;\n        }\n        mutation.loading = false;\n        mutation.error = null;\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\n\n//# sourceMappingURL=mutations.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC9kYXRhL211dGF0aW9ucy5qcz9mNjQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNPO0FBQ1IiLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTXV0YXRpb25TdG9yZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTXV0YXRpb25TdG9yZSgpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IHt9O1xuICAgIH1cbiAgICBNdXRhdGlvblN0b3JlLnByb3RvdHlwZS5nZXRTdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmU7XG4gICAgfTtcbiAgICBNdXRhdGlvblN0b3JlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAobXV0YXRpb25JZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVttdXRhdGlvbklkXTtcbiAgICB9O1xuICAgIE11dGF0aW9uU3RvcmUucHJvdG90eXBlLmluaXRNdXRhdGlvbiA9IGZ1bmN0aW9uIChtdXRhdGlvbklkLCBtdXRhdGlvblN0cmluZywgdmFyaWFibGVzKSB7XG4gICAgICAgIHRoaXMuc3RvcmVbbXV0YXRpb25JZF0gPSB7XG4gICAgICAgICAgICBtdXRhdGlvblN0cmluZzogbXV0YXRpb25TdHJpbmcsXG4gICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyB8fCB7fSxcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE11dGF0aW9uU3RvcmUucHJvdG90eXBlLm1hcmtNdXRhdGlvbkVycm9yID0gZnVuY3Rpb24gKG11dGF0aW9uSWQsIGVycm9yKSB7XG4gICAgICAgIHZhciBtdXRhdGlvbiA9IHRoaXMuc3RvcmVbbXV0YXRpb25JZF07XG4gICAgICAgIGlmICghbXV0YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtdXRhdGlvbi5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIG11dGF0aW9uLmVycm9yID0gZXJyb3I7XG4gICAgfTtcbiAgICBNdXRhdGlvblN0b3JlLnByb3RvdHlwZS5tYXJrTXV0YXRpb25SZXN1bHQgPSBmdW5jdGlvbiAobXV0YXRpb25JZCkge1xuICAgICAgICB2YXIgbXV0YXRpb24gPSB0aGlzLnN0b3JlW211dGF0aW9uSWRdO1xuICAgICAgICBpZiAoIW11dGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbXV0YXRpb24ubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICBtdXRhdGlvbi5lcnJvciA9IG51bGw7XG4gICAgfTtcbiAgICBNdXRhdGlvblN0b3JlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IHt9O1xuICAgIH07XG4gICAgcmV0dXJuIE11dGF0aW9uU3RvcmU7XG59KCkpO1xuZXhwb3J0IHsgTXV0YXRpb25TdG9yZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXV0YXRpb25zLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby1jbGllbnQvZGF0YS9tdXRhdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return QueryStore; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_utilities__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__ = __webpack_require__(3);\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        if (previousQuery && previousQuery.queryString !== query.queryString) {\n            throw new Error('Internal Error: may not update existing query string in store');\n        }\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].loading) {\n            if (!Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"q\" /* isEqual */])(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].refetch;\n        }\n        else {\n            networkStatus = __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            queryString: query.queryString,\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string') {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors =\n            result.errors && result.errors.length ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].ready;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.store[fetchMoreForQueryId].networkStatus = __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryError(fetchMoreForQueryId, error, undefined);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        if (!this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = complete\n            ? __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].ready\n            : __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].loading;\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        this.store = Object.keys(this.store)\n            .filter(function (queryId) {\n            return observableQueryIds.indexOf(queryId) > -1;\n        })\n            .reduce(function (res, key) {\n            res[key] = __assign({}, _this.store[key], { networkStatus: __WEBPACK_IMPORTED_MODULE_1__core_networkStatus__[\"a\" /* NetworkStatus */].loading });\n            return res;\n        }, {});\n    };\n    return QueryStore;\n}());\n\n//# sourceMappingURL=queries.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC9kYXRhL3F1ZXJpZXMuanM/ZDliYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0I7QUFDTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esa0NBQWtDLHFCQUFxQixvR0FBdUM7QUFDOUY7QUFDQSxTQUFTLElBQUk7QUFDYjtBQUNBO0FBQ0EsQ0FBQztBQUNPO0FBQ1IiLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IGlzRXF1YWwgfSBmcm9tICdhcG9sbG8tdXRpbGl0aWVzJztcbmltcG9ydCB7IE5ldHdvcmtTdGF0dXMgfSBmcm9tICcuLi9jb3JlL25ldHdvcmtTdGF0dXMnO1xudmFyIFF1ZXJ5U3RvcmUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1ZXJ5U3RvcmUoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSB7fTtcbiAgICB9XG4gICAgUXVlcnlTdG9yZS5wcm90b3R5cGUuZ2V0U3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlO1xuICAgIH07XG4gICAgUXVlcnlTdG9yZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHF1ZXJ5SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVbcXVlcnlJZF07XG4gICAgfTtcbiAgICBRdWVyeVN0b3JlLnByb3RvdHlwZS5pbml0UXVlcnkgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzUXVlcnkgPSB0aGlzLnN0b3JlW3F1ZXJ5LnF1ZXJ5SWRdO1xuICAgICAgICBpZiAocHJldmlvdXNRdWVyeSAmJiBwcmV2aW91c1F1ZXJ5LnF1ZXJ5U3RyaW5nICE9PSBxdWVyeS5xdWVyeVN0cmluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlcm5hbCBFcnJvcjogbWF5IG5vdCB1cGRhdGUgZXhpc3RpbmcgcXVlcnkgc3RyaW5nIGluIHN0b3JlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzU2V0VmFyaWFibGVzID0gZmFsc2U7XG4gICAgICAgIHZhciBwcmV2aW91c1ZhcmlhYmxlcyA9IG51bGw7XG4gICAgICAgIGlmIChxdWVyeS5zdG9yZVByZXZpb3VzVmFyaWFibGVzICYmXG4gICAgICAgICAgICBwcmV2aW91c1F1ZXJ5ICYmXG4gICAgICAgICAgICBwcmV2aW91c1F1ZXJ5Lm5ldHdvcmtTdGF0dXMgIT09IE5ldHdvcmtTdGF0dXMubG9hZGluZykge1xuICAgICAgICAgICAgaWYgKCFpc0VxdWFsKHByZXZpb3VzUXVlcnkudmFyaWFibGVzLCBxdWVyeS52YXJpYWJsZXMpKSB7XG4gICAgICAgICAgICAgICAgaXNTZXRWYXJpYWJsZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzVmFyaWFibGVzID0gcHJldmlvdXNRdWVyeS52YXJpYWJsZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5ldHdvcmtTdGF0dXM7XG4gICAgICAgIGlmIChpc1NldFZhcmlhYmxlcykge1xuICAgICAgICAgICAgbmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMuc2V0VmFyaWFibGVzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHF1ZXJ5LmlzUG9sbCkge1xuICAgICAgICAgICAgbmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMucG9sbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChxdWVyeS5pc1JlZmV0Y2gpIHtcbiAgICAgICAgICAgIG5ldHdvcmtTdGF0dXMgPSBOZXR3b3JrU3RhdHVzLnJlZmV0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5sb2FkaW5nO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncmFwaFFMRXJyb3JzID0gW107XG4gICAgICAgIGlmIChwcmV2aW91c1F1ZXJ5ICYmIHByZXZpb3VzUXVlcnkuZ3JhcGhRTEVycm9ycykge1xuICAgICAgICAgICAgZ3JhcGhRTEVycm9ycyA9IHByZXZpb3VzUXVlcnkuZ3JhcGhRTEVycm9ycztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3JlW3F1ZXJ5LnF1ZXJ5SWRdID0ge1xuICAgICAgICAgICAgcXVlcnlTdHJpbmc6IHF1ZXJ5LnF1ZXJ5U3RyaW5nLFxuICAgICAgICAgICAgZG9jdW1lbnQ6IHF1ZXJ5LmRvY3VtZW50LFxuICAgICAgICAgICAgdmFyaWFibGVzOiBxdWVyeS52YXJpYWJsZXMsXG4gICAgICAgICAgICBwcmV2aW91c1ZhcmlhYmxlczogcHJldmlvdXNWYXJpYWJsZXMsXG4gICAgICAgICAgICBuZXR3b3JrRXJyb3I6IG51bGwsXG4gICAgICAgICAgICBncmFwaFFMRXJyb3JzOiBncmFwaFFMRXJyb3JzLFxuICAgICAgICAgICAgbmV0d29ya1N0YXR1czogbmV0d29ya1N0YXR1cyxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBxdWVyeS5tZXRhZGF0YSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeS5mZXRjaE1vcmVGb3JRdWVyeUlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5zdG9yZVtxdWVyeS5mZXRjaE1vcmVGb3JRdWVyeUlkXS5uZXR3b3JrU3RhdHVzID1cbiAgICAgICAgICAgICAgICBOZXR3b3JrU3RhdHVzLmZldGNoTW9yZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUXVlcnlTdG9yZS5wcm90b3R5cGUubWFya1F1ZXJ5UmVzdWx0ID0gZnVuY3Rpb24gKHF1ZXJ5SWQsIHJlc3VsdCwgZmV0Y2hNb3JlRm9yUXVlcnlJZCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RvcmVbcXVlcnlJZF0pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuc3RvcmVbcXVlcnlJZF0ubmV0d29ya0Vycm9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdG9yZVtxdWVyeUlkXS5ncmFwaFFMRXJyb3JzID1cbiAgICAgICAgICAgIHJlc3VsdC5lcnJvcnMgJiYgcmVzdWx0LmVycm9ycy5sZW5ndGggPyByZXN1bHQuZXJyb3JzIDogW107XG4gICAgICAgIHRoaXMuc3RvcmVbcXVlcnlJZF0ucHJldmlvdXNWYXJpYWJsZXMgPSBudWxsO1xuICAgICAgICB0aGlzLnN0b3JlW3F1ZXJ5SWRdLm5ldHdvcmtTdGF0dXMgPSBOZXR3b3JrU3RhdHVzLnJlYWR5O1xuICAgICAgICBpZiAodHlwZW9mIGZldGNoTW9yZUZvclF1ZXJ5SWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlW2ZldGNoTW9yZUZvclF1ZXJ5SWRdLm5ldHdvcmtTdGF0dXMgPSBOZXR3b3JrU3RhdHVzLnJlYWR5O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBRdWVyeVN0b3JlLnByb3RvdHlwZS5tYXJrUXVlcnlFcnJvciA9IGZ1bmN0aW9uIChxdWVyeUlkLCBlcnJvciwgZmV0Y2hNb3JlRm9yUXVlcnlJZCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RvcmVbcXVlcnlJZF0pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuc3RvcmVbcXVlcnlJZF0ubmV0d29ya0Vycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuc3RvcmVbcXVlcnlJZF0ubmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMuZXJyb3I7XG4gICAgICAgIGlmICh0eXBlb2YgZmV0Y2hNb3JlRm9yUXVlcnlJZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMubWFya1F1ZXJ5RXJyb3IoZmV0Y2hNb3JlRm9yUXVlcnlJZCwgZXJyb3IsIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFF1ZXJ5U3RvcmUucHJvdG90eXBlLm1hcmtRdWVyeVJlc3VsdENsaWVudCA9IGZ1bmN0aW9uIChxdWVyeUlkLCBjb21wbGV0ZSkge1xuICAgICAgICBpZiAoIXRoaXMuc3RvcmVbcXVlcnlJZF0pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuc3RvcmVbcXVlcnlJZF0ubmV0d29ya0Vycm9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdG9yZVtxdWVyeUlkXS5wcmV2aW91c1ZhcmlhYmxlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RvcmVbcXVlcnlJZF0ubmV0d29ya1N0YXR1cyA9IGNvbXBsZXRlXG4gICAgICAgICAgICA/IE5ldHdvcmtTdGF0dXMucmVhZHlcbiAgICAgICAgICAgIDogTmV0d29ya1N0YXR1cy5sb2FkaW5nO1xuICAgIH07XG4gICAgUXVlcnlTdG9yZS5wcm90b3R5cGUuc3RvcFF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5SWQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuc3RvcmVbcXVlcnlJZF07XG4gICAgfTtcbiAgICBRdWVyeVN0b3JlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIChvYnNlcnZhYmxlUXVlcnlJZHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zdG9yZSA9IE9iamVjdC5rZXlzKHRoaXMuc3RvcmUpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChxdWVyeUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZVF1ZXJ5SWRzLmluZGV4T2YocXVlcnlJZCkgPiAtMTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKHJlcywga2V5KSB7XG4gICAgICAgICAgICByZXNba2V5XSA9IF9fYXNzaWduKHt9LCBfdGhpcy5zdG9yZVtrZXldLCB7IG5ldHdvcmtTdGF0dXM6IE5ldHdvcmtTdGF0dXMubG9hZGluZyB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9O1xuICAgIHJldHVybiBRdWVyeVN0b3JlO1xufSgpKTtcbmV4cG9ydCB7IFF1ZXJ5U3RvcmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJpZXMuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC9kYXRhL3F1ZXJpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DataStore; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_utilities__ = __webpack_require__(0);\n\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"o\" /* graphQLResultHasError */])(result);\n        if (ignoreErrors && Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"o\" /* graphQLResultHasError */])(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"o\" /* graphQLResultHasError */])(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            var changeFn_1 = function () {\n                _this.markMutationResult({\n                    mutationId: mutation.mutationId,\n                    result: { data: optimistic_1 },\n                    document: mutation.document,\n                    variables: mutation.variables,\n                    updateQueries: mutation.updateQueries,\n                    update: mutation.update,\n                });\n            };\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    changeFn_1();\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"o\" /* graphQLResultHasError */])(mutation.result)) {\n            var cacheWrites_1 = [];\n            cacheWrites_1.push({\n                result: mutation.result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            });\n            if (mutation.updateQueries) {\n                Object.keys(mutation.updateQueries)\n                    .filter(function (id) { return mutation.updateQueries[id]; })\n                    .forEach(function (queryId) {\n                    var _a = mutation.updateQueries[queryId], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (!complete) {\n                        return;\n                    }\n                    var nextQueryResult = Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"D\" /* tryFunctionOrLogError */])(function () {\n                        return updater(currentQueryResult, {\n                            mutationResult: mutation.result,\n                            queryName: Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"l\" /* getOperationName */])(query.document) || undefined,\n                            queryVariables: query.variables,\n                        });\n                    });\n                    if (nextQueryResult) {\n                        cacheWrites_1.push({\n                            result: nextQueryResult,\n                            dataId: 'ROOT_QUERY',\n                            query: query.document,\n                            variables: query.variables,\n                        });\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n            });\n            var update_1 = mutation.update;\n            if (update_1) {\n                this.cache.performTransaction(function (c) {\n                    Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"D\" /* tryFunctionOrLogError */])(function () { return update_1(c, mutation.result); });\n                });\n            }\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (!optimisticResponse)\n            return;\n        this.cache.removeOptimistic(mutationId);\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\n\n//# sourceMappingURL=store.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n");

/***/ }),
/* 57 */
/***/ (function(module, exports) {

eval("exports.version = \"2.2.5\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNsaWVudC92ZXJzaW9uLmpzP2RkOGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLnZlcnNpb24gPSBcIjIuMi41XCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tY2xpZW50L3ZlcnNpb24uanNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///57\n");

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__inMemoryCache__ = __webpack_require__(59);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__inMemoryCache__[\"a\"]; });\n/* unused harmony reexport defaultDataIdFromObject */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__readFromStore__ = __webpack_require__(22);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__writeToStore__ = __webpack_require__(21);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fragmentMatcher__ = __webpack_require__(20);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__objectCache__ = __webpack_require__(12);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__recordingCache__ = __webpack_require__(24);\n/* unused harmony namespace reexport */\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlLWlubWVtb3J5L2xpYi9pbmRleC5qcz9mOWQyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjU4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgSW5NZW1vcnlDYWNoZSwgZGVmYXVsdERhdGFJZEZyb21PYmplY3QgfSBmcm9tICcuL2luTWVtb3J5Q2FjaGUnO1xuZXhwb3J0ICogZnJvbSAnLi9yZWFkRnJvbVN0b3JlJztcbmV4cG9ydCAqIGZyb20gJy4vd3JpdGVUb1N0b3JlJztcbmV4cG9ydCAqIGZyb20gJy4vZnJhZ21lbnRNYXRjaGVyJztcbmV4cG9ydCAqIGZyb20gJy4vb2JqZWN0Q2FjaGUnO1xuZXhwb3J0ICogZnJvbSAnLi9yZWNvcmRpbmdDYWNoZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hcG9sbG8tY2FjaGUtaW5tZW1vcnkvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///58\n");

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export defaultDataIdFromObject */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return InMemoryCache; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_cache__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_apollo_utilities__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fragmentMatcher__ = __webpack_require__(20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__writeToStore__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__readFromStore__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__objectCache__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__recordingCache__ = __webpack_require__(24);\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\n\n\n\n\n\nvar defaultConfig = {\n    fragmentMatcher: new __WEBPACK_IMPORTED_MODULE_2__fragmentMatcher__[\"a\" /* HeuristicFragmentMatcher */](),\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    storeFactory: __WEBPACK_IMPORTED_MODULE_5__objectCache__[\"b\" /* defaultNormalizedCacheFactory */],\n};\nfunction defaultDataIdFromObject(result) {\n    if (result.__typename) {\n        if (result.id !== undefined) {\n            return result.__typename + \":\" + result.id;\n        }\n        if (result._id !== undefined) {\n            return result.__typename + \":\" + result._id;\n        }\n    }\n    return null;\n}\nvar InMemoryCache = (function (_super) {\n    __extends(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this) || this;\n        _this.optimistic = [];\n        _this.watches = [];\n        _this.silenceBroadcast = false;\n        _this.config = __assign({}, defaultConfig, config);\n        if (_this.config.customResolvers) {\n            console.warn('customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.');\n            _this.config.cacheRedirects = _this.config.customResolvers;\n        }\n        if (_this.config.cacheResolvers) {\n            console.warn('cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.');\n            _this.config.cacheRedirects = _this.config.cacheResolvers;\n        }\n        _this.addTypename = _this.config.addTypename;\n        _this.data = _this.config.storeFactory();\n        return _this;\n    }\n    InMemoryCache.prototype.restore = function (data) {\n        if (data)\n            this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function (optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        if (optimistic && this.optimistic.length > 0) {\n            var patches = this.optimistic.map(function (opt) { return opt.data; });\n            return Object.assign.apply(Object, [{}, this.data.toObject()].concat(patches));\n        }\n        return this.data.toObject();\n    };\n    InMemoryCache.prototype.read = function (query) {\n        if (query.rootId && this.data.get(query.rootId) === undefined) {\n            return null;\n        }\n        return Object(__WEBPACK_IMPORTED_MODULE_4__readFromStore__[\"b\" /* readQueryFromStore */])({\n            store: this.config.storeFactory(this.extract(query.optimistic)),\n            query: this.transformDocument(query.query),\n            variables: query.variables,\n            rootId: query.rootId,\n            fragmentMatcherFunction: this.config.fragmentMatcher.match,\n            previousResult: query.previousResult,\n            config: this.config,\n        });\n    };\n    InMemoryCache.prototype.write = function (write) {\n        Object(__WEBPACK_IMPORTED_MODULE_3__writeToStore__[\"a\" /* writeResultToStore */])({\n            dataId: write.dataId,\n            result: write.result,\n            variables: write.variables,\n            document: this.transformDocument(write.query),\n            store: this.data,\n            dataIdFromObject: this.config.dataIdFromObject,\n            fragmentMatcherFunction: this.config.fragmentMatcher.match,\n        });\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.diff = function (query) {\n        return Object(__WEBPACK_IMPORTED_MODULE_4__readFromStore__[\"a\" /* diffQueryAgainstStore */])({\n            store: this.config.storeFactory(this.extract(query.optimistic)),\n            query: this.transformDocument(query.query),\n            variables: query.variables,\n            returnPartialData: query.returnPartialData,\n            previousResult: query.previousResult,\n            fragmentMatcherFunction: this.config.fragmentMatcher.match,\n            config: this.config,\n        });\n    };\n    InMemoryCache.prototype.watch = function (watch) {\n        var _this = this;\n        this.watches.push(watch);\n        return function () {\n            _this.watches = _this.watches.filter(function (c) { return c !== watch; });\n        };\n    };\n    InMemoryCache.prototype.evict = function (query) {\n        throw new Error(\"eviction is not implemented on InMemory Cache\");\n    };\n    InMemoryCache.prototype.reset = function () {\n        this.data.clear();\n        this.broadcastWatches();\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function (id) {\n        var _this = this;\n        var toPerform = this.optimistic.filter(function (item) { return item.id !== id; });\n        this.optimistic = [];\n        toPerform.forEach(function (change) {\n            _this.recordOptimisticTransaction(change.transaction, change.id);\n        });\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.performTransaction = function (transaction) {\n        var alreadySilenced = this.silenceBroadcast;\n        this.silenceBroadcast = true;\n        transaction(this);\n        if (!alreadySilenced) {\n            this.silenceBroadcast = false;\n        }\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n        var _this = this;\n        this.silenceBroadcast = true;\n        var patch = Object(__WEBPACK_IMPORTED_MODULE_6__recordingCache__[\"a\" /* record */])(this.extract(true), function (recordingCache) {\n            var dataCache = _this.data;\n            _this.data = recordingCache;\n            _this.performTransaction(transaction);\n            _this.data = dataCache;\n        });\n        this.optimistic.push({\n            id: id,\n            transaction: transaction,\n            data: patch,\n        });\n        this.silenceBroadcast = false;\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.transformDocument = function (document) {\n        if (this.addTypename)\n            return Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"a\" /* addTypenameToDocument */])(document);\n        return document;\n    };\n    InMemoryCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: options.query,\n            variables: options.variables,\n            optimistic: optimistic,\n        });\n    };\n    InMemoryCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: this.transformDocument(Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"h\" /* getFragmentQueryDocument */])(options.fragment, options.fragmentName)),\n            variables: options.variables,\n            rootId: options.id,\n            optimistic: optimistic,\n        });\n    };\n    InMemoryCache.prototype.writeQuery = function (options) {\n        this.write({\n            dataId: 'ROOT_QUERY',\n            result: options.data,\n            query: this.transformDocument(options.query),\n            variables: options.variables,\n        });\n    };\n    InMemoryCache.prototype.writeFragment = function (options) {\n        this.write({\n            dataId: options.id,\n            result: options.data,\n            query: this.transformDocument(Object(__WEBPACK_IMPORTED_MODULE_1_apollo_utilities__[\"h\" /* getFragmentQueryDocument */])(options.fragment, options.fragmentName)),\n            variables: options.variables,\n        });\n    };\n    InMemoryCache.prototype.broadcastWatches = function () {\n        var _this = this;\n        if (this.silenceBroadcast)\n            return;\n        this.watches.forEach(function (c) {\n            var newData = _this.diff({\n                query: c.query,\n                variables: c.variables,\n                previousResult: c.previousResult && c.previousResult(),\n                optimistic: c.optimistic,\n            });\n            c.callback(newData);\n        });\n    };\n    return InMemoryCache;\n}(__WEBPACK_IMPORTED_MODULE_0_apollo_cache__[\"a\" /* ApolloCache */]));\n\n//# sourceMappingURL=inMemoryCache.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///59\n");

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cache__ = __webpack_require__(61);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__cache__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__types__ = __webpack_require__(63);\n/* unused harmony namespace reexport */\n\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlL2xpYi9pbmRleC5qcz9kYjQ0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2NhY2hlJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///60\n");

/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ApolloCache; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_utilities__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(62);\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\n\nvar ApolloCache = (function () {\n    function ApolloCache() {\n    }\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: options.query,\n            variables: options.variables,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"h\" /* getFragmentQueryDocument */])(options.fragment, options.fragmentName),\n            variables: options.variables,\n            rootId: options.id,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.writeQuery = function (options) {\n        this.write({\n            dataId: 'ROOT_QUERY',\n            result: options.data,\n            query: options.query,\n            variables: options.variables,\n        });\n    };\n    ApolloCache.prototype.writeFragment = function (options) {\n        this.write({\n            dataId: options.id,\n            result: options.data,\n            variables: options.variables,\n            query: Object(__WEBPACK_IMPORTED_MODULE_0_apollo_utilities__[\"h\" /* getFragmentQueryDocument */])(options.fragment, options.fragmentName),\n        });\n    };\n    ApolloCache.prototype.writeData = function (_a) {\n        var id = _a.id, data = _a.data;\n        if (id) {\n            var typenameResult = null;\n            try {\n                typenameResult = this.read({\n                    rootId: id,\n                    optimistic: false,\n                    query: __WEBPACK_IMPORTED_MODULE_1__utils__[\"b\" /* justTypenameQuery */],\n                });\n            }\n            catch (e) {\n            }\n            var __typename = (typenameResult && typenameResult.__typename) || '__ClientData';\n            var dataToWrite = __assign({ __typename: __typename }, data);\n            this.writeFragment({\n                id: id,\n                fragment: Object(__WEBPACK_IMPORTED_MODULE_1__utils__[\"a\" /* fragmentFromPojo */])(dataToWrite, __typename),\n                data: dataToWrite,\n            });\n        }\n        else {\n            this.writeQuery({ query: Object(__WEBPACK_IMPORTED_MODULE_1__utils__[\"c\" /* queryFromPojo */])(data), data: data });\n        }\n    };\n    return ApolloCache;\n}());\n\n//# sourceMappingURL=cache.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlL2xpYi9jYWNoZS5qcz8yOTIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBLDRDQUE0QyxPQUFPO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtQztBQUMwQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxvQkFBb0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLG9DQUFvQyxvQkFBb0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyx5QkFBeUI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLDZCQUE2QixpR0FBeUM7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNPO0FBQ1IiLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IGdldEZyYWdtZW50UXVlcnlEb2N1bWVudCB9IGZyb20gJ2Fwb2xsby11dGlsaXRpZXMnO1xuaW1wb3J0IHsganVzdFR5cGVuYW1lUXVlcnksIHF1ZXJ5RnJvbVBvam8sIGZyYWdtZW50RnJvbVBvam8gfSBmcm9tICcuL3V0aWxzJztcbnZhciBBcG9sbG9DYWNoZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXBvbGxvQ2FjaGUoKSB7XG4gICAgfVxuICAgIEFwb2xsb0NhY2hlLnByb3RvdHlwZS50cmFuc2Zvcm1Eb2N1bWVudCA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgfTtcbiAgICBBcG9sbG9DYWNoZS5wcm90b3R5cGUudHJhbnNmb3JtRm9yTGluayA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgfTtcbiAgICBBcG9sbG9DYWNoZS5wcm90b3R5cGUucmVhZFF1ZXJ5ID0gZnVuY3Rpb24gKG9wdGlvbnMsIG9wdGltaXN0aWMpIHtcbiAgICAgICAgaWYgKG9wdGltaXN0aWMgPT09IHZvaWQgMCkgeyBvcHRpbWlzdGljID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZCh7XG4gICAgICAgICAgICBxdWVyeTogb3B0aW9ucy5xdWVyeSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogb3B0aW9ucy52YXJpYWJsZXMsXG4gICAgICAgICAgICBvcHRpbWlzdGljOiBvcHRpbWlzdGljLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEFwb2xsb0NhY2hlLnByb3RvdHlwZS5yZWFkRnJhZ21lbnQgPSBmdW5jdGlvbiAob3B0aW9ucywgb3B0aW1pc3RpYykge1xuICAgICAgICBpZiAob3B0aW1pc3RpYyA9PT0gdm9pZCAwKSB7IG9wdGltaXN0aWMgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZWFkKHtcbiAgICAgICAgICAgIHF1ZXJ5OiBnZXRGcmFnbWVudFF1ZXJ5RG9jdW1lbnQob3B0aW9ucy5mcmFnbWVudCwgb3B0aW9ucy5mcmFnbWVudE5hbWUpLFxuICAgICAgICAgICAgdmFyaWFibGVzOiBvcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgICAgIHJvb3RJZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIG9wdGltaXN0aWM6IG9wdGltaXN0aWMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXBvbGxvQ2FjaGUucHJvdG90eXBlLndyaXRlUXVlcnkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLndyaXRlKHtcbiAgICAgICAgICAgIGRhdGFJZDogJ1JPT1RfUVVFUlknLFxuICAgICAgICAgICAgcmVzdWx0OiBvcHRpb25zLmRhdGEsXG4gICAgICAgICAgICBxdWVyeTogb3B0aW9ucy5xdWVyeSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogb3B0aW9ucy52YXJpYWJsZXMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXBvbGxvQ2FjaGUucHJvdG90eXBlLndyaXRlRnJhZ21lbnQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLndyaXRlKHtcbiAgICAgICAgICAgIGRhdGFJZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIHJlc3VsdDogb3B0aW9ucy5kYXRhLFxuICAgICAgICAgICAgdmFyaWFibGVzOiBvcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgICAgIHF1ZXJ5OiBnZXRGcmFnbWVudFF1ZXJ5RG9jdW1lbnQob3B0aW9ucy5mcmFnbWVudCwgb3B0aW9ucy5mcmFnbWVudE5hbWUpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEFwb2xsb0NhY2hlLnByb3RvdHlwZS53cml0ZURhdGEgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGlkID0gX2EuaWQsIGRhdGEgPSBfYS5kYXRhO1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHZhciB0eXBlbmFtZVJlc3VsdCA9IG51bGw7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHR5cGVuYW1lUmVzdWx0ID0gdGhpcy5yZWFkKHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdElkOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBqdXN0VHlwZW5hbWVRdWVyeSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX190eXBlbmFtZSA9ICh0eXBlbmFtZVJlc3VsdCAmJiB0eXBlbmFtZVJlc3VsdC5fX3R5cGVuYW1lKSB8fCAnX19DbGllbnREYXRhJztcbiAgICAgICAgICAgIHZhciBkYXRhVG9Xcml0ZSA9IF9fYXNzaWduKHsgX190eXBlbmFtZTogX190eXBlbmFtZSB9LCBkYXRhKTtcbiAgICAgICAgICAgIHRoaXMud3JpdGVGcmFnbWVudCh7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGZyYWdtZW50OiBmcmFnbWVudEZyb21Qb2pvKGRhdGFUb1dyaXRlLCBfX3R5cGVuYW1lKSxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhVG9Xcml0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53cml0ZVF1ZXJ5KHsgcXVlcnk6IHF1ZXJ5RnJvbVBvam8oZGF0YSksIGRhdGE6IGRhdGEgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBcG9sbG9DYWNoZTtcbn0oKSk7XG5leHBvcnQgeyBBcG9sbG9DYWNoZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlL2xpYi9jYWNoZS5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n");

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"c\"] = queryFromPojo;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = fragmentFromPojo;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return justTypenameQuery; });\nfunction queryFromPojo(obj) {\n    var op = {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        name: {\n            kind: 'Name',\n            value: 'GeneratedClientQuery',\n        },\n        selectionSet: selectionSetFromObj(obj),\n    };\n    var out = {\n        kind: 'Document',\n        definitions: [op],\n    };\n    return out;\n}\nfunction fragmentFromPojo(obj, typename) {\n    var frag = {\n        kind: 'FragmentDefinition',\n        typeCondition: {\n            kind: 'NamedType',\n            name: {\n                kind: 'Name',\n                value: typename || '__FakeType',\n            },\n        },\n        name: {\n            kind: 'Name',\n            value: 'GeneratedClientQuery',\n        },\n        selectionSet: selectionSetFromObj(obj),\n    };\n    var out = {\n        kind: 'Document',\n        definitions: [frag],\n    };\n    return out;\n}\nfunction selectionSetFromObj(obj) {\n    if (typeof obj === 'number' ||\n        typeof obj === 'boolean' ||\n        typeof obj === 'string' ||\n        typeof obj === 'undefined' ||\n        obj === null) {\n        return null;\n    }\n    if (Array.isArray(obj)) {\n        return selectionSetFromObj(obj[0]);\n    }\n    var selections = [];\n    Object.keys(obj).forEach(function (key) {\n        var field = {\n            kind: 'Field',\n            name: {\n                kind: 'Name',\n                value: key,\n            },\n        };\n        var nestedSelSet = selectionSetFromObj(obj[key]);\n        if (nestedSelSet) {\n            field.selectionSet = nestedSelSet;\n        }\n        selections.push(field);\n    });\n    var selectionSet = {\n        kind: 'SelectionSet',\n        selections: selections,\n    };\n    return selectionSet;\n}\nvar justTypenameQuery = {\n    kind: 'Document',\n    definitions: [\n        {\n            kind: 'OperationDefinition',\n            operation: 'query',\n            name: null,\n            variableDefinitions: null,\n            directives: [],\n            selectionSet: {\n                kind: 'SelectionSet',\n                selections: [\n                    {\n                        kind: 'Field',\n                        alias: null,\n                        name: {\n                            kind: 'Name',\n                            value: '__typename',\n                        },\n                        arguments: [],\n                        directives: [],\n                        selectionSet: null,\n                    },\n                ],\n            },\n        },\n    ],\n};\n//# sourceMappingURL=utils.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlL2xpYi91dGlscy5qcz8xNGQ2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwiZmlsZSI6IjYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5RnJvbVBvam8ob2JqKSB7XG4gICAgdmFyIG9wID0ge1xuICAgICAgICBraW5kOiAnT3BlcmF0aW9uRGVmaW5pdGlvbicsXG4gICAgICAgIG9wZXJhdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAga2luZDogJ05hbWUnLFxuICAgICAgICAgICAgdmFsdWU6ICdHZW5lcmF0ZWRDbGllbnRRdWVyeScsXG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdGlvblNldDogc2VsZWN0aW9uU2V0RnJvbU9iaihvYmopLFxuICAgIH07XG4gICAgdmFyIG91dCA9IHtcbiAgICAgICAga2luZDogJ0RvY3VtZW50JyxcbiAgICAgICAgZGVmaW5pdGlvbnM6IFtvcF0sXG4gICAgfTtcbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyYWdtZW50RnJvbVBvam8ob2JqLCB0eXBlbmFtZSkge1xuICAgIHZhciBmcmFnID0ge1xuICAgICAgICBraW5kOiAnRnJhZ21lbnREZWZpbml0aW9uJyxcbiAgICAgICAgdHlwZUNvbmRpdGlvbjoge1xuICAgICAgICAgICAga2luZDogJ05hbWVkVHlwZScsXG4gICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAga2luZDogJ05hbWUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0eXBlbmFtZSB8fCAnX19GYWtlVHlwZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBraW5kOiAnTmFtZScsXG4gICAgICAgICAgICB2YWx1ZTogJ0dlbmVyYXRlZENsaWVudFF1ZXJ5JyxcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0aW9uU2V0OiBzZWxlY3Rpb25TZXRGcm9tT2JqKG9iaiksXG4gICAgfTtcbiAgICB2YXIgb3V0ID0ge1xuICAgICAgICBraW5kOiAnRG9jdW1lbnQnLFxuICAgICAgICBkZWZpbml0aW9uczogW2ZyYWddLFxuICAgIH07XG4gICAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHNlbGVjdGlvblNldEZyb21PYmoob2JqKSB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdudW1iZXInIHx8XG4gICAgICAgIHR5cGVvZiBvYmogPT09ICdib29sZWFuJyB8fFxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fFxuICAgICAgICB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvblNldEZyb21PYmoob2JqWzBdKTtcbiAgICB9XG4gICAgdmFyIHNlbGVjdGlvbnMgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgZmllbGQgPSB7XG4gICAgICAgICAgICBraW5kOiAnRmllbGQnLFxuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIGtpbmQ6ICdOYW1lJyxcbiAgICAgICAgICAgICAgICB2YWx1ZToga2V5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG5lc3RlZFNlbFNldCA9IHNlbGVjdGlvblNldEZyb21PYmoob2JqW2tleV0pO1xuICAgICAgICBpZiAobmVzdGVkU2VsU2V0KSB7XG4gICAgICAgICAgICBmaWVsZC5zZWxlY3Rpb25TZXQgPSBuZXN0ZWRTZWxTZXQ7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0aW9ucy5wdXNoKGZpZWxkKTtcbiAgICB9KTtcbiAgICB2YXIgc2VsZWN0aW9uU2V0ID0ge1xuICAgICAgICBraW5kOiAnU2VsZWN0aW9uU2V0JyxcbiAgICAgICAgc2VsZWN0aW9uczogc2VsZWN0aW9ucyxcbiAgICB9O1xuICAgIHJldHVybiBzZWxlY3Rpb25TZXQ7XG59XG5leHBvcnQgdmFyIGp1c3RUeXBlbmFtZVF1ZXJ5ID0ge1xuICAgIGtpbmQ6ICdEb2N1bWVudCcsXG4gICAgZGVmaW5pdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAga2luZDogJ09wZXJhdGlvbkRlZmluaXRpb24nLFxuICAgICAgICAgICAgb3BlcmF0aW9uOiAncXVlcnknLFxuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnM6IG51bGwsXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBbXSxcbiAgICAgICAgICAgIHNlbGVjdGlvblNldDoge1xuICAgICAgICAgICAgICAgIGtpbmQ6ICdTZWxlY3Rpb25TZXQnLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogJ0ZpZWxkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWFzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdOYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ19fdHlwZW5hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvblNldDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICBdLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby1jYWNoZS9saWIvdXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///62\n");

/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Cache__ = __webpack_require__(64);\n/* unused harmony namespace reexport */\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlL2xpYi90eXBlcy9pbmRleC5qcz9lM2I0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSIsImZpbGUiOiI2My5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vQ2FjaGUnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlL2xpYi90eXBlcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///63\n");

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export Cache */\nvar Cache;\n(function (Cache) {\n})(Cache || (Cache = {}));\n//# sourceMappingURL=Cache.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWNhY2hlL2xpYi90eXBlcy9DYWNoZS5qcz84YTg3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0EsQ0FBQyxzQkFBc0I7QUFDdkIiLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIENhY2hlO1xuKGZ1bmN0aW9uIChDYWNoZSkge1xufSkoQ2FjaGUgfHwgKENhY2hlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhY2hlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby1jYWNoZS9saWIvdHlwZXMvQ2FjaGUuanNcbi8vIG1vZHVsZSBpZCA9IDY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///64\n");

/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utilities__ = __webpack_require__(66);\n/* unused harmony reexport filter */\n/* unused harmony reexport check */\n/* unused harmony reexport propType */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__graphql__ = __webpack_require__(23);\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_1__graphql__[\"a\" /* graphql */]);\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1hbnl3aGVyZS9saWIvaW5kZXguanM/Y2UxNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFrQztBQUNoQjtBQUNsQjtBQUNBIiwiZmlsZSI6IjY1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZmlsdGVyLCBjaGVjaywgcHJvcFR5cGUgfSBmcm9tICcuL3V0aWxpdGllcyc7XG5pbXBvcnQgeyBncmFwaHFsIH0gZnJvbSAnLi9ncmFwaHFsJztcbmV4cG9ydCBkZWZhdWx0IGdyYXBocWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ncmFwaHFsLWFueXdoZXJlL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///65\n");

/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export filter */\n/* unused harmony export check */\n/* unused harmony export propType */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__graphql__ = __webpack_require__(23);\n\nfunction filter(doc, data) {\n    var resolver = function (fieldName, root, args, context, info) {\n        return root[info.resultKey];\n    };\n    return Object(__WEBPACK_IMPORTED_MODULE_0__graphql__[\"a\" /* graphql */])(resolver, doc, data);\n}\nfunction check(doc, data) {\n    var resolver = function (fieldName, root, args, context, info) {\n        if (!{}.hasOwnProperty.call(root, info.resultKey)) {\n            throw new Error(info.resultKey + \" missing on \" + root);\n        }\n        return root[info.resultKey];\n    };\n    Object(__WEBPACK_IMPORTED_MODULE_0__graphql__[\"a\" /* graphql */])(resolver, doc, data, {}, {}, {\n        fragmentMatcher: function () { return false; },\n    });\n}\nvar ANONYMOUS = '<<anonymous>>';\nfunction PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n}\nPropTypeError.prototype = Error.prototype;\nvar reactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context',\n};\nfunction createChainableTypeChecker(validate) {\n    function checkType(isRequired, props, propName, componentName, location, propFullName) {\n        componentName = componentName || ANONYMOUS;\n        propFullName = propFullName || propName;\n        if (props[propName] == null) {\n            var locationName = reactPropTypeLocationNames[location];\n            if (isRequired) {\n                if (props[propName] === null) {\n                    return new PropTypeError(\"The \" + locationName + \" `\" + propFullName + \"` is marked as required \" +\n                        (\"in `\" + componentName + \"`, but its value is `null`.\"));\n                }\n                return new PropTypeError(\"The \" + locationName + \" `\" + propFullName + \"` is marked as required in \" +\n                    (\"`\" + componentName + \"`, but its value is `undefined`.\"));\n            }\n            return null;\n        }\n        else {\n            return validate(props, propName, componentName, location, propFullName);\n        }\n    }\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n    return chainedCheckType;\n}\nfunction propType(doc) {\n    return createChainableTypeChecker(function (props, propName) {\n        var prop = props[propName];\n        try {\n            check(doc, prop);\n            return null;\n        }\n        catch (e) {\n            return e;\n        }\n    });\n}\n//# sourceMappingURL=utilities.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1hbnl3aGVyZS9saWIvdXRpbGl0aWVzLmpzP2UyNTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkZBQW1DLElBQUk7QUFDdkMsc0NBQXNDLGNBQWMsRUFBRTtBQUN0RCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdyYXBocWwgfSBmcm9tICcuL2dyYXBocWwnO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihkb2MsIGRhdGEpIHtcbiAgICB2YXIgcmVzb2x2ZXIgPSBmdW5jdGlvbiAoZmllbGROYW1lLCByb290LCBhcmdzLCBjb250ZXh0LCBpbmZvKSB7XG4gICAgICAgIHJldHVybiByb290W2luZm8ucmVzdWx0S2V5XTtcbiAgICB9O1xuICAgIHJldHVybiBncmFwaHFsKHJlc29sdmVyLCBkb2MsIGRhdGEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrKGRvYywgZGF0YSkge1xuICAgIHZhciByZXNvbHZlciA9IGZ1bmN0aW9uIChmaWVsZE5hbWUsIHJvb3QsIGFyZ3MsIGNvbnRleHQsIGluZm8pIHtcbiAgICAgICAgaWYgKCF7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJvb3QsIGluZm8ucmVzdWx0S2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGluZm8ucmVzdWx0S2V5ICsgXCIgbWlzc2luZyBvbiBcIiArIHJvb3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb290W2luZm8ucmVzdWx0S2V5XTtcbiAgICB9O1xuICAgIGdyYXBocWwocmVzb2x2ZXIsIGRvYywgZGF0YSwge30sIHt9LCB7XG4gICAgICAgIGZyYWdtZW50TWF0Y2hlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgfSk7XG59XG52YXIgQU5PTllNT1VTID0gJzw8YW5vbnltb3VzPj4nO1xuZnVuY3Rpb24gUHJvcFR5cGVFcnJvcihtZXNzYWdlKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLnN0YWNrID0gJyc7XG59XG5Qcm9wVHlwZUVycm9yLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcbnZhciByZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHtcbiAgICBwcm9wOiAncHJvcCcsXG4gICAgY29udGV4dDogJ2NvbnRleHQnLFxuICAgIGNoaWxkQ29udGV4dDogJ2NoaWxkIGNvbnRleHQnLFxufTtcbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYXRpb25OYW1lID0gcmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcIlRoZSBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BGdWxsTmFtZSArIFwiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKFwiaW4gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFwiVGhlIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcEZ1bGxOYW1lICsgXCJgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gICAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJvcFR5cGUoZG9jKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgICAgdmFyIHByb3AgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjaGVjayhkb2MsIHByb3ApO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsaXRpZXMuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1hbnl3aGVyZS9saWIvdXRpbGl0aWVzLmpzXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66\n");

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__httpLink__ = __webpack_require__(68);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__httpLink__[\"a\"]; });\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmstaHR0cC9saWIvaW5kZXguanM/YWU5ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EiLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2h0dHBMaW5rJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby1saW5rLWh0dHAvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///67\n");

/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export createHttpLink */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return HttpLink; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_apollo_link__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__ = __webpack_require__(69);\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\n\n\nvar createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    Object(__WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__[\"a\" /* checkFetcher */])(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new __WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"a\" /* ApolloLink */](function (operation) {\n        var chosenURI = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__[\"f\" /* selectURI */])(operation, uri);\n        var context = operation.getContext();\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: context.headers,\n        };\n        var _a = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__[\"e\" /* selectHttpOptionsAndBody */])(operation, __WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__[\"c\" /* fallbackHttpConfig */], linkConfig, contextConfig), options = _a.options, body = _a.body;\n        var _b = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__[\"b\" /* createSignalIfSupported */])(), controller = _b.controller, signal = _b.signal;\n        if (controller)\n            options.signal = signal;\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _c = rewriteURIForGET(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return Object(__WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"d\" /* fromError */])(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__[\"g\" /* serializeFetchParameter */])(body, 'Payload');\n            }\n            catch (parseError) {\n                return Object(__WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"d\" /* fromError */])(parseError);\n            }\n        }\n        return new __WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"b\" /* Observable */](function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(Object(__WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__[\"d\" /* parseAndCheckHttpResponse */])(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__[\"g\" /* serializeFetchParameter */])(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = Object(__WEBPACK_IMPORTED_MODULE_1_apollo_link_http_common__[\"g\" /* serializeFetchParameter */])(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(__WEBPACK_IMPORTED_MODULE_0_apollo_link__[\"a\" /* ApolloLink */]));\n\n//# sourceMappingURL=httpLink.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///68\n");

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return fallbackHttpConfig; });\n/* unused harmony export throwServerError */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return parseAndCheckHttpResponse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return checkFetcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return createSignalIfSupported; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return selectHttpOptionsAndBody; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return serializeFetchParameter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return selectURI; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_graphql_language_printer__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_graphql_language_printer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_graphql_language_printer__);\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nvar defaultHeaders = {\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\nvar parseAndCheckHttpResponse = function (operations) { return function (response) {\n    return (response\n        .text()\n        .then(function (bodyText) {\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        .then(function (result) {\n        if (response.status >= 300) {\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n        }\n        if (!Array.isArray(result) &&\n            !result.hasOwnProperty('data') &&\n            !result.hasOwnProperty('errors')) {\n            throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations)\n                ? operations.map(function (op) { return op.operationName; })\n                : operations.operationName) + \"'.\");\n        }\n        return result;\n    }));\n}; };\nvar checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        var library = 'unfetch';\n        if (typeof window === 'undefined')\n            library = 'nodefetch';\n        throw new Error(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n    }\n};\nvar createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\n    var http = fallbackConfig.http;\n    configs.forEach(function (config) {\n        options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });\n        if (config.credentials)\n            options.credentials = config.credentials;\n        http = __assign({}, http, config.http);\n    });\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = Object(__WEBPACK_IMPORTED_MODULE_0_graphql_language_printer__[\"print\"])(query);\n    return {\n        options: options,\n        body: body,\n    };\n};\nvar serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = new Error(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\nvar selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === 'function') {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || '/graphql';\n    }\n};\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLWxpbmstaHR0cC1jb21tb24vbGliL2luZGV4LmpzPzhlMWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFDQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELHlCQUF5QixFQUFFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlPQUFpTyxVQUFVLGlCQUFpQix5QkFBeUIsaUNBQWlDLGdDQUFnQyxFQUFFO0FBQ3hWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0EsNkJBQTZCLDJCQUEyQiwyRUFBMkU7QUFDbkk7QUFDQTtBQUNBLDZCQUE2Qiw0QkFBNEIscUJBQXFCLG9DQUFvQztBQUNsSDtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLEtBQUs7QUFDTDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjY5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgeyBwcmludCB9IGZyb20gJ2dyYXBocWwvbGFuZ3VhZ2UvcHJpbnRlcic7XG52YXIgZGVmYXVsdEh0dHBPcHRpb25zID0ge1xuICAgIGluY2x1ZGVRdWVyeTogdHJ1ZSxcbiAgICBpbmNsdWRlRXh0ZW5zaW9uczogZmFsc2UsXG59O1xudmFyIGRlZmF1bHRIZWFkZXJzID0ge1xuICAgIGFjY2VwdDogJyovKicsXG4gICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbn07XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG59O1xuZXhwb3J0IHZhciBmYWxsYmFja0h0dHBDb25maWcgPSB7XG4gICAgaHR0cDogZGVmYXVsdEh0dHBPcHRpb25zLFxuICAgIGhlYWRlcnM6IGRlZmF1bHRIZWFkZXJzLFxuICAgIG9wdGlvbnM6IGRlZmF1bHRPcHRpb25zLFxufTtcbmV4cG9ydCB2YXIgdGhyb3dTZXJ2ZXJFcnJvciA9IGZ1bmN0aW9uIChyZXNwb25zZSwgcmVzdWx0LCBtZXNzYWdlKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICBlcnJvci5yZXN1bHQgPSByZXN1bHQ7XG4gICAgdGhyb3cgZXJyb3I7XG59O1xuZXhwb3J0IHZhciBwYXJzZUFuZENoZWNrSHR0cFJlc3BvbnNlID0gZnVuY3Rpb24gKG9wZXJhdGlvbnMpIHsgcmV0dXJuIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHJldHVybiAocmVzcG9uc2VcbiAgICAgICAgLnRleHQoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoYm9keVRleHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGJvZHlUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VFcnJvciA9IGVycjtcbiAgICAgICAgICAgIHBhcnNlRXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgICAgIHBhcnNlRXJyb3Iuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgICAgIHBhcnNlRXJyb3IuYm9keVRleHQgPSBib2R5VGV4dDtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChwYXJzZUVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSAzMDApIHtcbiAgICAgICAgICAgIHRocm93U2VydmVyRXJyb3IocmVzcG9uc2UsIHJlc3VsdCwgXCJSZXNwb25zZSBub3Qgc3VjY2Vzc2Z1bDogUmVjZWl2ZWQgc3RhdHVzIGNvZGUgXCIgKyByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpICYmXG4gICAgICAgICAgICAhcmVzdWx0Lmhhc093blByb3BlcnR5KCdkYXRhJykgJiZcbiAgICAgICAgICAgICFyZXN1bHQuaGFzT3duUHJvcGVydHkoJ2Vycm9ycycpKSB7XG4gICAgICAgICAgICB0aHJvd1NlcnZlckVycm9yKHJlc3BvbnNlLCByZXN1bHQsIFwiU2VydmVyIHJlc3BvbnNlIHdhcyBtaXNzaW5nIGZvciBxdWVyeSAnXCIgKyAoQXJyYXkuaXNBcnJheShvcGVyYXRpb25zKVxuICAgICAgICAgICAgICAgID8gb3BlcmF0aW9ucy5tYXAoZnVuY3Rpb24gKG9wKSB7IHJldHVybiBvcC5vcGVyYXRpb25OYW1lOyB9KVxuICAgICAgICAgICAgICAgIDogb3BlcmF0aW9ucy5vcGVyYXRpb25OYW1lKSArIFwiJy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KSk7XG59OyB9O1xuZXhwb3J0IHZhciBjaGVja0ZldGNoZXIgPSBmdW5jdGlvbiAoZmV0Y2hlcikge1xuICAgIGlmICghZmV0Y2hlciAmJiB0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBsaWJyYXJ5ID0gJ3VuZmV0Y2gnO1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICBsaWJyYXJ5ID0gJ25vZGVmZXRjaCc7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlxcbmZldGNoIGlzIG5vdCBmb3VuZCBnbG9iYWxseSBhbmQgbm8gZmV0Y2hlciBwYXNzZWQsIHRvIGZpeCBwYXNzIGEgZmV0Y2ggZm9yXFxueW91ciBlbnZpcm9ubWVudCBsaWtlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL1wiICsgbGlicmFyeSArIFwiLlxcblxcbkZvciBleGFtcGxlOlxcbmltcG9ydCBmZXRjaCBmcm9tICdcIiArIGxpYnJhcnkgKyBcIic7XFxuaW1wb3J0IHsgY3JlYXRlSHR0cExpbmsgfSBmcm9tICdhcG9sbG8tbGluay1odHRwJztcXG5cXG5jb25zdCBsaW5rID0gY3JlYXRlSHR0cExpbmsoeyB1cmk6ICcvZ3JhcGhxbCcsIGZldGNoOiBmZXRjaCB9KTtcIik7XG4gICAgfVxufTtcbmV4cG9ydCB2YXIgY3JlYXRlU2lnbmFsSWZTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICByZXR1cm4geyBjb250cm9sbGVyOiBmYWxzZSwgc2lnbmFsOiBmYWxzZSB9O1xuICAgIHZhciBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIHZhciBzaWduYWwgPSBjb250cm9sbGVyLnNpZ25hbDtcbiAgICByZXR1cm4geyBjb250cm9sbGVyOiBjb250cm9sbGVyLCBzaWduYWw6IHNpZ25hbCB9O1xufTtcbmV4cG9ydCB2YXIgc2VsZWN0SHR0cE9wdGlvbnNBbmRCb2R5ID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgZmFsbGJhY2tDb25maWcpIHtcbiAgICB2YXIgY29uZmlncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGNvbmZpZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gX19hc3NpZ24oe30sIGZhbGxiYWNrQ29uZmlnLm9wdGlvbnMsIHsgaGVhZGVyczogZmFsbGJhY2tDb25maWcuaGVhZGVycywgY3JlZGVudGlhbHM6IGZhbGxiYWNrQ29uZmlnLmNyZWRlbnRpYWxzIH0pO1xuICAgIHZhciBodHRwID0gZmFsbGJhY2tDb25maWcuaHR0cDtcbiAgICBjb25maWdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICBvcHRpb25zID0gX19hc3NpZ24oe30sIG9wdGlvbnMsIGNvbmZpZy5vcHRpb25zLCB7IGhlYWRlcnM6IF9fYXNzaWduKHt9LCBvcHRpb25zLmhlYWRlcnMsIGNvbmZpZy5oZWFkZXJzKSB9KTtcbiAgICAgICAgaWYgKGNvbmZpZy5jcmVkZW50aWFscylcbiAgICAgICAgICAgIG9wdGlvbnMuY3JlZGVudGlhbHMgPSBjb25maWcuY3JlZGVudGlhbHM7XG4gICAgICAgIGh0dHAgPSBfX2Fzc2lnbih7fSwgaHR0cCwgY29uZmlnLmh0dHApO1xuICAgIH0pO1xuICAgIHZhciBvcGVyYXRpb25OYW1lID0gb3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUsIGV4dGVuc2lvbnMgPSBvcGVyYXRpb24uZXh0ZW5zaW9ucywgdmFyaWFibGVzID0gb3BlcmF0aW9uLnZhcmlhYmxlcywgcXVlcnkgPSBvcGVyYXRpb24ucXVlcnk7XG4gICAgdmFyIGJvZHkgPSB7IG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbk5hbWUsIHZhcmlhYmxlczogdmFyaWFibGVzIH07XG4gICAgaWYgKGh0dHAuaW5jbHVkZUV4dGVuc2lvbnMpXG4gICAgICAgIGJvZHkuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG4gICAgaWYgKGh0dHAuaW5jbHVkZVF1ZXJ5KVxuICAgICAgICBib2R5LnF1ZXJ5ID0gcHJpbnQocXVlcnkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgIGJvZHk6IGJvZHksXG4gICAgfTtcbn07XG5leHBvcnQgdmFyIHNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyID0gZnVuY3Rpb24gKHAsIGxhYmVsKSB7XG4gICAgdmFyIHNlcmlhbGl6ZWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgc2VyaWFsaXplZCA9IEpTT04uc3RyaW5naWZ5KHApO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB2YXIgcGFyc2VFcnJvciA9IG5ldyBFcnJvcihcIk5ldHdvcmsgcmVxdWVzdCBmYWlsZWQuIFwiICsgbGFiZWwgKyBcIiBpcyBub3Qgc2VyaWFsaXphYmxlOiBcIiArIGUubWVzc2FnZSk7XG4gICAgICAgIHBhcnNlRXJyb3IucGFyc2VFcnJvciA9IGU7XG4gICAgICAgIHRocm93IHBhcnNlRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkO1xufTtcbmV4cG9ydCB2YXIgc2VsZWN0VVJJID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgZmFsbGJhY2tVUkkpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wZXJhdGlvbi5nZXRDb250ZXh0KCk7XG4gICAgdmFyIGNvbnRleHRVUkkgPSBjb250ZXh0LnVyaTtcbiAgICBpZiAoY29udGV4dFVSSSkge1xuICAgICAgICByZXR1cm4gY29udGV4dFVSSTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZhbGxiYWNrVVJJID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFja1VSSShvcGVyYXRpb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrVVJJIHx8ICcvZ3JhcGhxbCc7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fwb2xsby1saW5rLWh0dHAtY29tbW9uL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///69\n");

/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export install */\n/* unused harmony export ApolloProvider */\n/* unused harmony export ApolloQuery */\n/* unused harmony export ApolloSubscribeToMore */\n/* unused harmony export willPrefetch */\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\nvar symbolTag = '[object Symbol]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array ? array.length : 0;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\n/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a cache value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\nvar funcProto = Function.prototype;\nvar objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol$1 = root.Symbol;\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\nvar splice = arrayProto.splice;\nvar spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\nvar nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\nvar nativeCreate = getNative(Object, 'create');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} props The property identifiers to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, props) {\n  object = Object(object);\n  return basePickBy(object, props, function(value, key) {\n    return key in object;\n  });\n}\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} props The property identifiers to pick from.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, props, predicate) {\n  var index = -1,\n      length = props.length,\n      result = {};\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key];\n\n    if (predicate(value, key)) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Creates an array of the own and inherited enumerable symbol properties\n * of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable string keyed properties of `object` that are\n * not omitted.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [props] The property identifiers to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = baseRest(function(object, props) {\n  if (object == null) {\n    return {};\n  }\n  props = arrayMap(baseFlatten(props, 1), toKey);\n  return basePick(object, baseDifference(getAllKeysIn(object), props));\n});\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nvar lodash_omit = omit;\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag$1 = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$1 = objectProto$1.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax$1 = Math.max;\nvar nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root$1.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject$1(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax$1(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject$1(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject$1(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$1(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$1(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol$1(value)) {\n    return NAN;\n  }\n  if (isObject$1(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject$1(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nvar lodash_throttle = throttle;\n\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT$1 = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN$1 = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag$2 = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim$1 = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary$1 = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal$1 = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt$1 = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal$2 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString$2 = objectProto$2.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax$2 = Math.max;\nvar nativeMin$1 = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now$1 = function() {\n  return root$2.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce$1(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT$1);\n  }\n  wait = toNumber$1(wait) || 0;\n  if (isObject$2(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax$2(toNumber$1(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin$1(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now$1();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now$1());\n  }\n\n  function debounced() {\n    var time = now$1(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject$2(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike$2(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol$2(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike$2(value) && objectToString$2.call(value) == symbolTag$2);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber$1(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol$2(value)) {\n    return NAN$1;\n  }\n  if (isObject$2(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject$2(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim$1, '');\n  var isBinary = reIsBinary$1.test(value);\n  return (isBinary || reIsOctal$1.test(value))\n    ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex$1.test(value) ? NAN$1 : +value);\n}\n\nvar lodash_debounce = debounce$1;\n\nvar Globals = {};\n\nfunction factory(action) {\n  return function (cb, options) {\n    if (typeof options === 'number') {\n      return action(cb, options);\n    } else {\n      return action(cb, options.wait, options);\n    }\n  };\n}\n\nvar throttle$1 = factory(lodash_throttle);\n\nvar debounce$2 = factory(lodash_debounce);\n\nfunction getMergedDefinition(def) {\n  return Globals.Vue.util.mergeOptions({}, def);\n}\n\nfunction reapply(options, context) {\n  while (typeof options === 'function') {\n    options = options.call(context);\n  }\n  return options;\n}\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar SmartApollo = function () {\n  function SmartApollo(vm, key, options) {\n    var _this = this;\n\n    var autostart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    classCallCheck(this, SmartApollo);\n    this.type = null;\n    this.vueApolloSpecialKeys = [];\n\n    this.vm = vm;\n    this.key = key;\n    this.options = Object.assign({}, options);\n    this._skip = false;\n    this._watchers = [];\n    this._destroyed = false;\n\n    // Query callback\n    if (typeof this.options.query === 'function') {\n      var queryCb = this.options.query.bind(this.vm);\n      this.options.query = queryCb();\n      this._watchers.push(this.vm.$watch(queryCb, function (query) {\n        _this.options.query = query;\n        _this.refresh();\n      }));\n    }\n    // Query callback\n    if (typeof this.options.document === 'function') {\n      var _queryCb = this.options.document.bind(this.vm);\n      this.options.document = _queryCb();\n      this._watchers.push(this.vm.$watch(_queryCb, function (document) {\n        _this.options.document = document;\n        _this.refresh();\n      }));\n    }\n\n    // Apollo context\n    if (typeof this.options.context === 'function') {\n      var cb = this.options.context.bind(this.vm);\n      this.options.context = cb();\n      this._watchers.push(this.vm.$watch(cb, function (context) {\n        _this.options.context = context;\n        _this.refresh();\n      }));\n    }\n\n    if (this.vm.$isServer) {\n      this.options.fetchPolicy = 'cache-first';\n    }\n\n    if (autostart) {\n      this.autostart();\n    }\n  }\n\n  createClass(SmartApollo, [{\n    key: 'autostart',\n    value: function autostart() {\n      if (typeof this.options.skip === 'function') {\n        this._watchers.push(this.vm.$watch(this.options.skip.bind(this.vm), this.skipChanged.bind(this), {\n          immediate: true\n        }));\n      } else if (!this.options.skip) {\n        this.start();\n      } else {\n        this._skip = true;\n      }\n    }\n  }, {\n    key: 'skipChanged',\n    value: function skipChanged(value, oldValue) {\n      if (value !== oldValue) {\n        this.skip = value;\n      }\n    }\n  }, {\n    key: 'refresh',\n    value: function refresh() {\n      if (!this._skip) {\n        this.stop();\n        this.start();\n      }\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      this.starting = true;\n      if (typeof this.options.variables === 'function') {\n        var cb = this.executeApollo.bind(this);\n        cb = this.options.throttle ? throttle$1(cb, this.options.throttle) : cb;\n        cb = this.options.debounce ? debounce$2(cb, this.options.debounce) : cb;\n        this.unwatchVariables = this.vm.$watch(function () {\n          return _this2.options.variables.call(_this2.vm);\n        }, cb, {\n          immediate: true\n        });\n      } else {\n        this.executeApollo(this.options.variables);\n      }\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (this.unwatchVariables) {\n        this.unwatchVariables();\n        this.unwatchVariables = null;\n      }\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n        this.sub = null;\n      }\n    }\n  }, {\n    key: 'generateApolloOptions',\n    value: function generateApolloOptions(variables) {\n      var apolloOptions = lodash_omit(this.options, this.vueApolloSpecialKeys);\n      apolloOptions.variables = variables;\n      return apolloOptions;\n    }\n  }, {\n    key: 'executeApollo',\n    value: function executeApollo(variables) {\n      this.starting = false;\n    }\n  }, {\n    key: 'nextResult',\n    value: function nextResult() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: 'errorHandler',\n    value: function errorHandler() {\n      var _options$error, _vm$$apollo$error, _vm$$apollo$provider$;\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this.options.error && (_options$error = this.options.error).call.apply(_options$error, [this.vm].concat(args));\n      this.vm.$apollo.error && (_vm$$apollo$error = this.vm.$apollo.error).call.apply(_vm$$apollo$error, [this.vm].concat(args));\n      this.vm.$apollo.provider.errorHandler && (_vm$$apollo$provider$ = this.vm.$apollo.provider.errorHandler).call.apply(_vm$$apollo$provider$, [this.vm].concat(args));\n    }\n  }, {\n    key: 'catchError',\n    value: function catchError(error) {\n      if (error.graphQLErrors && error.graphQLErrors.length !== 0) {\n        console.error('GraphQL execution errors for ' + this.type + ' \\'' + this.key + '\\'');\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = error.graphQLErrors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var e = _step.value;\n\n            console.error(e);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else if (error.networkError) {\n        console.error('Error sending the ' + this.type + ' \\'' + this.key + '\\'', error.networkError);\n      } else {\n        console.error('[vue-apollo] An error has occured for ' + this.type + ' \\'' + this.key + '\\'');\n        if (Array.isArray(error)) {\n          var _console;\n\n          (_console = console).error.apply(_console, toConsumableArray(error));\n        } else {\n          console.error(error);\n        }\n      }\n\n      this.errorHandler(error);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      if (this._destroyed) return;\n\n      this._destroyed = true;\n      this.stop();\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this._watchers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var unwatch = _step2.value;\n\n          unwatch();\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'skip',\n    get: function get$$1() {\n      return this._skip;\n    },\n    set: function set$$1(value) {\n      if (value) {\n        this.stop();\n      } else {\n        this.start();\n      }\n      this._skip = value;\n    }\n  }]);\n  return SmartApollo;\n}();\n\nvar VUE_APOLLO_QUERY_KEYWORDS = ['variables', 'watch', 'update', 'result', 'error', 'loadingKey', 'watchLoading', 'skip', 'throttle', 'debounce', 'subscribeToMore', 'prefetch', 'manual'];\n\nvar SmartQuery = function (_SmartApollo) {\n  inherits(SmartQuery, _SmartApollo);\n\n  function SmartQuery(vm, key, options) {\n    var autostart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    classCallCheck(this, SmartQuery);\n\n    // Simple query\n    if (!options.query) {\n      var query = options;\n      options = {\n        query: query\n      };\n    }\n\n    // Add reactive data related to the query\n    if (vm.$data.$apolloData && !vm.$data.$apolloData.queries[key]) {\n      vm.$set(vm.$data.$apolloData.queries, key, {\n        loading: false\n      });\n    }\n\n    var _this = possibleConstructorReturn(this, (SmartQuery.__proto__ || Object.getPrototypeOf(SmartQuery)).call(this, vm, key, options, autostart));\n\n    _this.type = 'query';\n    _this.vueApolloSpecialKeys = VUE_APOLLO_QUERY_KEYWORDS;\n    _this._loading = false;\n    return _this;\n  }\n\n  createClass(SmartQuery, [{\n    key: 'stop',\n    value: function stop() {\n      get(SmartQuery.prototype.__proto__ || Object.getPrototypeOf(SmartQuery.prototype), 'stop', this).call(this);\n\n      if (this.observer) {\n        this.observer.stopPolling();\n        this.observer = null;\n      }\n    }\n  }, {\n    key: 'executeApollo',\n    value: function executeApollo(variables) {\n      if (this.observer) {\n        // Update variables\n        // Don't use setVariables directly or it will ignore cache\n        this.observer.setOptions(this.generateApolloOptions(variables));\n      } else {\n        if (this.sub) {\n          this.sub.unsubscribe();\n        }\n\n        // Create observer\n        this.observer = this.vm.$apollo.watchQuery(this.generateApolloOptions(variables));\n\n        // Create subscription\n        this.sub = this.observer.subscribe({\n          next: this.nextResult.bind(this),\n          error: this.catchError.bind(this)\n        });\n      }\n\n      var currentResult = this.maySetLoading();\n\n      if (!currentResult.loading) {\n        this.nextResult(currentResult);\n      }\n\n      get(SmartQuery.prototype.__proto__ || Object.getPrototypeOf(SmartQuery.prototype), 'executeApollo', this).call(this, variables);\n    }\n  }, {\n    key: 'maySetLoading',\n    value: function maySetLoading() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var currentResult = this.observer.currentResult();\n      if (force || currentResult.loading) {\n        if (!this.loading) {\n          this.applyLoadingModifier(1);\n        }\n        this.loading = true;\n      }\n      return currentResult;\n    }\n  }, {\n    key: 'nextResult',\n    value: function nextResult(result) {\n      var data = result.data,\n          loading = result.loading;\n\n\n      if (!loading) {\n        this.loadingDone();\n      }\n\n      var hasResultCallback = typeof this.options.result === 'function';\n\n      if (typeof data === 'undefined') {\n        // No result\n      } else if (typeof this.options.update === 'function') {\n        this.vm[this.key] = this.options.update.call(this.vm, data);\n      } else if (data[this.key] === undefined && !this.options.manual) {\n        console.error('Missing ' + this.key + ' attribute on result', data);\n      } else if (!this.options.manual) {\n        this.vm[this.key] = data[this.key];\n      } else if (!hasResultCallback) {\n        console.error(this.key + ' query must have a \\'result\\' hook in manual mode');\n      }\n\n      if (hasResultCallback) {\n        this.options.result.call(this.vm, result);\n      }\n    }\n  }, {\n    key: 'catchError',\n    value: function catchError(error) {\n      get(SmartQuery.prototype.__proto__ || Object.getPrototypeOf(SmartQuery.prototype), 'catchError', this).call(this, error);\n      this.loadingDone();\n    }\n  }, {\n    key: 'watchLoading',\n    value: function watchLoading() {\n      var _options$watchLoading, _vm$$apollo$watchLoad, _vm$$apollo$provider$;\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this.options.watchLoading && (_options$watchLoading = this.options.watchLoading).call.apply(_options$watchLoading, [this.vm].concat(args));\n      this.vm.$apollo.watchLoading && (_vm$$apollo$watchLoad = this.vm.$apollo.watchLoading).call.apply(_vm$$apollo$watchLoad, [this.vm].concat(args));\n      this.vm.$apollo.provider.watchLoading && (_vm$$apollo$provider$ = this.vm.$apollo.provider.watchLoading).call.apply(_vm$$apollo$provider$, [this.vm].concat(args));\n    }\n  }, {\n    key: 'applyLoadingModifier',\n    value: function applyLoadingModifier(value) {\n      var loadingKey = this.loadingKey;\n      if (loadingKey && typeof this.vm[loadingKey] === 'number') {\n        this.vm[loadingKey] += value;\n      }\n\n      this.watchLoading(value === 1, value);\n    }\n  }, {\n    key: 'loadingDone',\n    value: function loadingDone() {\n      if (this.loading) {\n        this.applyLoadingModifier(-1);\n      }\n      this.loading = false;\n    }\n  }, {\n    key: 'fetchMore',\n    value: function fetchMore() {\n      var _this2 = this;\n\n      if (this.observer) {\n        var _observer;\n\n        this.maySetLoading(true);\n        return (_observer = this.observer).fetchMore.apply(_observer, arguments).then(function (result) {\n          if (!result.loading) {\n            _this2.loadingDone();\n          }\n          return result;\n        });\n      }\n    }\n  }, {\n    key: 'subscribeToMore',\n    value: function subscribeToMore() {\n      if (this.observer) {\n        var _observer2;\n\n        return {\n          unsubscribe: (_observer2 = this.observer).subscribeToMore.apply(_observer2, arguments)\n        };\n      }\n    }\n  }, {\n    key: 'refetch',\n    value: function refetch(variables) {\n      var _this3 = this;\n\n      variables && (this.options.variables = variables);\n      if (this.observer) {\n        var result = this.observer.refetch(variables).then(function (result) {\n          if (!result.loading) {\n            _this3.loadingDone();\n          }\n          return result;\n        });\n        this.maySetLoading();\n        return result;\n      }\n    }\n  }, {\n    key: 'setVariables',\n    value: function setVariables(variables, tryFetch) {\n      this.options.variables = variables;\n      if (this.observer) {\n        var result = this.observer.setVariables(variables, tryFetch);\n        this.maySetLoading();\n        return result;\n      }\n    }\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      Object.assign(this.options, options);\n      if (this.observer) {\n        var result = this.observer.setOptions(options);\n        this.maySetLoading();\n        return result;\n      }\n    }\n  }, {\n    key: 'startPolling',\n    value: function startPolling() {\n      if (this.observer) {\n        var _observer3;\n\n        return (_observer3 = this.observer).startPolling.apply(_observer3, arguments);\n      }\n    }\n  }, {\n    key: 'stopPolling',\n    value: function stopPolling() {\n      if (this.observer) {\n        var _observer4;\n\n        return (_observer4 = this.observer).stopPolling.apply(_observer4, arguments);\n      }\n    }\n  }, {\n    key: 'client',\n    get: function get$$1() {\n      return this.vm.$apollo.getClient(this.options);\n    }\n  }, {\n    key: 'loading',\n    get: function get$$1() {\n      return this.vm.$data.$apolloData ? this.vm.$data.$apolloData.queries[this.key].loading : this._loading;\n    },\n    set: function set$$1(value) {\n      if (this._loading !== value) {\n        this._loading = value;\n        if (this.vm.$data.$apolloData) {\n          this.vm.$data.$apolloData.queries[this.key].loading = value;\n          this.vm.$data.$apolloData.loading += value ? 1 : -1;\n        }\n      }\n    }\n  }, {\n    key: 'loadingKey',\n    get: function get$$1() {\n      return this.options.loadingKey || this.vm.$apollo.loadingKey;\n    }\n  }]);\n  return SmartQuery;\n}(SmartApollo);\n\nvar SmartSubscription = function (_SmartApollo) {\n  inherits(SmartSubscription, _SmartApollo);\n\n  function SmartSubscription() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, SmartSubscription);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SmartSubscription.__proto__ || Object.getPrototypeOf(SmartSubscription)).call.apply(_ref, [this].concat(args))), _this), _this.type = 'subscription', _this.vueApolloSpecialKeys = ['variables', 'result', 'error', 'throttle', 'debounce', 'linkedQuery'], _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(SmartSubscription, [{\n    key: 'executeApollo',\n    value: function executeApollo(variables) {\n      var variablesJson = JSON.stringify(variables);\n      if (this.sub) {\n        // do nothing if subscription is already running using exactly the same variables\n        if (variablesJson === this.previousVariablesJson) {\n          return;\n        }\n        this.sub.unsubscribe();\n      }\n      this.previousVariablesJson = variablesJson;\n\n      var apolloOptions = this.generateApolloOptions(variables);\n\n      if (typeof apolloOptions.updateQuery === 'function') {\n        apolloOptions.updateQuery = apolloOptions.updateQuery.bind(this.vm);\n      }\n\n      if (this.options.linkedQuery) {\n        if (typeof this.options.result === 'function') {\n          var rcb = this.options.result.bind(this.vm);\n          var ucb = apolloOptions.updateQuery && apolloOptions.updateQuery.bind(this.vm);\n          apolloOptions.updateQuery = function () {\n            rcb.apply(undefined, arguments);\n            ucb && ucb.apply(undefined, arguments);\n          };\n        }\n        this.sub = this.options.linkedQuery.subscribeToMore(apolloOptions);\n      } else {\n        // Create observer\n        this.observer = this.vm.$apollo.subscribe(apolloOptions);\n\n        // Create subscription\n        this.sub = this.observer.subscribe({\n          next: this.nextResult.bind(this),\n          error: this.catchError.bind(this)\n        });\n      }\n\n      get(SmartSubscription.prototype.__proto__ || Object.getPrototypeOf(SmartSubscription.prototype), 'executeApollo', this).call(this, variables);\n    }\n  }, {\n    key: 'nextResult',\n    value: function nextResult(data) {\n      if (typeof this.options.result === 'function') {\n        this.options.result.call(this.vm, data);\n      }\n    }\n  }]);\n  return SmartSubscription;\n}(SmartApollo);\n\nvar DollarApollo = function () {\n  function DollarApollo(vm) {\n    classCallCheck(this, DollarApollo);\n\n    this._apolloSubscriptions = [];\n    this._watchers = [];\n\n    this.vm = vm;\n    this.queries = {};\n    this.subscriptions = {};\n    this.client = undefined;\n    this.loadingKey = undefined;\n    this.error = undefined;\n  }\n\n  createClass(DollarApollo, [{\n    key: 'query',\n    value: function query(options) {\n      return this.getClient(options).query(options);\n    }\n  }, {\n    key: 'getClient',\n    value: function getClient() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (!options || !options.client) {\n        if (_typeof(this.client) === 'object') {\n          return this.client;\n        }\n        if (this.client) {\n          if (!this.provider.clients) {\n            throw new Error('[vue-apollo] Missing \\'clients\\' options in \\'apolloProvider\\'');\n          } else {\n            var _client = this.provider.clients[this.client];\n            if (!_client) {\n              throw new Error('[vue-apollo] Missing client \\'' + this.client + '\\' in \\'apolloProvider\\'');\n            }\n            return _client;\n          }\n        }\n        return this.provider.defaultClient;\n      }\n      var client = this.provider.clients[options.client];\n      if (!client) {\n        throw new Error('[vue-apollo] Missing client \\'' + options.client + '\\' in \\'apolloProvider\\'');\n      }\n      return client;\n    }\n  }, {\n    key: 'watchQuery',\n    value: function watchQuery(options) {\n      var _this = this;\n\n      var observable = this.getClient(options).watchQuery(options);\n      var _subscribe = observable.subscribe.bind(observable);\n      observable.subscribe = function (options) {\n        var sub = _subscribe(options);\n        _this._apolloSubscriptions.push(sub);\n        return sub;\n      };\n      return observable;\n    }\n  }, {\n    key: 'mutate',\n    value: function mutate(options) {\n      return this.getClient(options).mutate(options);\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(options) {\n      var _this2 = this;\n\n      if (!this.vm.$isServer) {\n        var observable = this.getClient(options).subscribe(options);\n        var _subscribe = observable.subscribe.bind(observable);\n        observable.subscribe = function (options) {\n          var sub = _subscribe(options);\n          _this2._apolloSubscriptions.push(sub);\n          return sub;\n        };\n        return observable;\n      }\n    }\n  }, {\n    key: 'addSmartQuery',\n    value: function addSmartQuery(key, options) {\n      var _this3 = this;\n\n      options = reapply(options, this.vm);\n\n      var smart = this.queries[key] = new SmartQuery(this.vm, key, options, false);\n      smart.autostart();\n\n      if (!this.vm.$isServer) {\n        var subs = options.subscribeToMore;\n        if (subs) {\n          if (Array.isArray(subs)) {\n            subs.forEach(function (sub, index) {\n              _this3.addSmartSubscription('' + key + index, _extends({}, sub, {\n                linkedQuery: smart\n              }));\n            });\n          } else {\n            this.addSmartSubscription(key, _extends({}, subs, {\n              linkedQuery: smart\n            }));\n          }\n        }\n      }\n\n      return smart;\n    }\n  }, {\n    key: 'addSmartSubscription',\n    value: function addSmartSubscription(key, options) {\n      if (!this.vm.$isServer) {\n        options = reapply(options, this.vm);\n\n        var smart = this.subscriptions[key] = new SmartSubscription(this.vm, key, options, false);\n        smart.autostart();\n\n        return smart;\n      }\n    }\n  }, {\n    key: 'defineReactiveSetter',\n    value: function defineReactiveSetter(key, func) {\n      var _this4 = this;\n\n      this._watchers.push(this.vm.$watch(func, function (value) {\n        _this4[key] = value;\n      }, {\n        immediate: true\n      }));\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._watchers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var unwatch = _step.value;\n\n          unwatch();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      for (var key in this.queries) {\n        this.queries[key].destroy();\n      }\n      for (var _key in this.subscriptions) {\n        this.subscriptions[_key].destroy();\n      }\n      this._apolloSubscriptions.forEach(function (sub) {\n        sub.unsubscribe();\n      });\n      this._apolloSubscriptions = null;\n      this.vm = null;\n    }\n  }, {\n    key: 'provider',\n    get: function get$$1() {\n      return this.vm.$apolloProvider;\n    }\n  }, {\n    key: 'loading',\n    get: function get$$1() {\n      return this.vm.$data.$apolloData && this.vm.$data.$apolloData.loading !== 0;\n    }\n  }, {\n    key: 'skipAllQueries',\n    set: function set$$1(value) {\n      for (var key in this.queries) {\n        this.queries[key].skip = value;\n      }\n    }\n  }, {\n    key: 'skipAllSubscriptions',\n    set: function set$$1(value) {\n      for (var key in this.subscriptions) {\n        this.subscriptions[key].skip = value;\n      }\n    }\n  }, {\n    key: 'skipAll',\n    set: function set$$1(value) {\n      this.skipAllQueries = value;\n      this.skipAllSubscriptions = value;\n    }\n  }]);\n  return DollarApollo;\n}();\n\nvar ApolloProvider = function () {\n  function ApolloProvider(options) {\n    classCallCheck(this, ApolloProvider);\n\n    if (!options) {\n      throw new Error('Options argument required');\n    }\n    this.clients = options.clients || {};\n    this.clients.defaultClient = this.defaultClient = options.defaultClient;\n    this.defaultOptions = options.defaultOptions;\n    this.watchLoading = options.watchLoading;\n    this.errorHandler = options.errorHandler;\n\n    this.prefetchQueries = [];\n  }\n\n  createClass(ApolloProvider, [{\n    key: 'provide',\n    value: function provide() {\n      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '$apolloProvider';\n\n      return defineProperty({}, key, this);\n    }\n  }, {\n    key: 'addQueryToPrefetch',\n    value: function addQueryToPrefetch(queryOptions, client) {\n      this.prefetchQueries.push({\n        queryOptions: queryOptions,\n        client: client\n      });\n    }\n  }, {\n    key: 'prefetchComponent',\n    value: function prefetchComponent(component, context) {\n      component = getMergedDefinition(component);\n      var apolloOptions = component.apollo;\n\n      if (!apolloOptions) {\n        return;\n      }\n\n      var componentClient = apolloOptions.$client;\n      for (var key in apolloOptions) {\n        var options = apolloOptions[key];\n        if (key.charAt(0) !== '$' && (!options.query || (typeof options.ssr === 'undefined' || options.ssr) && typeof options.prefetch !== 'undefined' && options.prefetch)) {\n          this.addQueryToPrefetch(options, options.client || componentClient);\n        }\n      }\n    }\n  }, {\n    key: 'prefetchComponents',\n    value: function prefetchComponents(definitions) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = definitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var def = _step.value;\n\n          this.prefetchComponent(def);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'prefetchAll',\n    value: function prefetchAll(context, components, options) {\n      var _this = this;\n\n      // Optional components argument\n      if (!options && components && !Array.isArray(components)) {\n        options = components;\n        components = undefined;\n      }\n\n      var finalOptions = Object.assign({}, {\n        includeGlobal: true\n      }, options);\n\n      if (components) {\n        this.prefetchComponents(components);\n      }\n\n      if (finalOptions.includeGlobal) {\n        this.prefetchComponents(globalPrefetchs.filter(function (_ref2) {\n          var component = _ref2.component,\n              contextCallback = _ref2.contextCallback;\n\n          var result = true;\n          if (typeof contextCallback === 'function') {\n            result = !!contextCallback(context);\n          }\n          return result;\n        }).map(function (_ref3) {\n          var component = _ref3.component;\n          return component;\n        }), context);\n      }\n\n      return Promise.all(this.prefetchQueries.map(function (o) {\n        return _this.prefetchQuery(o.queryOptions, context, o.client);\n      }));\n    }\n  }, {\n    key: 'prefetchQuery',\n    value: function prefetchQuery(queryOptions, context, client) {\n      var variables = void 0;\n\n      // Client\n      if (!client) {\n        client = this.defaultClient;\n      } else if (typeof client === 'string') {\n        client = this.clients[client];\n        if (!client) {\n          throw new Error('[vue-apollo] Missing client \\'' + client + '\\' in \\'apolloProvider\\'');\n        }\n      }\n\n      // Simple query\n      if (!queryOptions.query) {\n        queryOptions = {\n          query: queryOptions\n        };\n      } else {\n        var prefetch = queryOptions.prefetch;\n        var prefetchType = typeof prefetch === 'undefined' ? 'undefined' : _typeof(prefetch);\n\n        // Resolve variables\n        if (prefetchType !== 'undefined') {\n          var result = void 0;\n          if (prefetchType === 'function') {\n            result = prefetch(context);\n          } else {\n            result = prefetch;\n          }\n\n          if (!result) {\n            return Promise.resolve();\n          } else if (prefetchType === 'boolean') {\n            var optVariables = queryOptions.variables;\n            if (typeof optVariables !== 'undefined') {\n              // Reuse `variables` option with `prefetch: true`\n              if (typeof optVariables === 'function') {\n                variables = optVariables.call(context);\n              } else {\n                variables = optVariables;\n              }\n            } else {\n              variables = undefined;\n            }\n          } else {\n            variables = result;\n          }\n        }\n      }\n\n      // Query\n      if (typeof queryOptions.query === 'function') {\n        queryOptions.query = queryOptions.query(context);\n      }\n      return new Promise(function (resolve, reject) {\n        var options = lodash_omit(queryOptions, [].concat(toConsumableArray(VUE_APOLLO_QUERY_KEYWORDS), ['fetchPolicy']));\n        options.variables = variables;\n        options.fetchPolicy = 'network-only';\n        client.query(options).then(resolve, reject);\n      });\n    }\n  }, {\n    key: 'getStates',\n    value: function getStates(options) {\n      var finalOptions = Object.assign({}, {\n        exportNamespace: ''\n      }, options);\n      var states = {};\n      for (var key in this.clients) {\n        var client = this.clients[key];\n        var state = client.cache.extract();\n        states['' + finalOptions.exportNamespace + key] = state;\n      }\n      return states;\n    }\n  }, {\n    key: 'exportStates',\n    value: function exportStates(options) {\n      var finalOptions = Object.assign({}, {\n        globalName: '__APOLLO_STATE__',\n        attachTo: 'window'\n      }, options);\n      var states = this.getStates(finalOptions);\n      var js = finalOptions.attachTo + '.' + finalOptions.globalName + ' = ' + JSON.stringify(states) + ';';\n      return js;\n    }\n  }]);\n  return ApolloProvider;\n}();\n\nvar globalPrefetchs = [];\n\nfunction willPrefetch(component) {\n  var contextCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  globalPrefetchs.push({ component: component, contextCallback: contextCallback });\n  return component;\n}\n\n// Global access for libraries\nif (typeof window !== 'undefined') {\n  window.vueApolloWillPrefetch = willPrefetch;\n} else if (typeof global !== 'undefined') {\n  global.vueApolloWillPrefetch = willPrefetch;\n}\n\nfunction isDataFilled(data) {\n  return Object.keys(data).length > 0;\n}\n\nvar CApolloQuery = {\n  name: 'ApolloQuery',\n\n  provide: function provide() {\n    return {\n      getDollarApollo: this.getDollarApollo,\n      getApolloQuery: this.getApolloQuery\n    };\n  },\n\n\n  props: {\n    query: {\n      type: Object,\n      required: true\n    },\n\n    variables: {\n      type: Object,\n      default: null\n    },\n\n    fetchPolicy: {\n      type: String,\n      default: 'cache-first'\n    },\n\n    pollInterval: {\n      type: Number,\n      default: 0\n    },\n\n    notifyOnNetworkStatusChange: {\n      type: Boolean,\n      default: false\n    },\n\n    context: {\n      type: Object,\n      default: null\n    },\n\n    skip: {\n      type: Boolean,\n      default: false\n    },\n\n    clientId: {\n      type: String,\n      default: undefined\n    },\n\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n\n  data: function data() {\n    return {\n      result: {\n        data: null,\n        loading: false,\n        networkStatus: 7,\n        error: null\n      }\n    };\n  },\n\n\n  watch: {\n    fetchPolicy: function fetchPolicy(value) {\n      this.$apollo.queries.query.setOptions({\n        fetchPolicy: value\n      });\n    },\n    pollInterval: function pollInterval(value) {\n      this.$apollo.queries.query.setOptions({\n        pollInterval: value\n      });\n    },\n    notifyOnNetworkStatusChange: function notifyOnNetworkStatusChange(value) {\n      this.$apollo.queries.query.setOptions({\n        notifyOnNetworkStatusChange: value\n      });\n    }\n  },\n\n  apollo: {\n    $client: function $client() {\n      return this.clientId;\n    },\n    query: function query() {\n      return {\n        query: function query() {\n          return this.query;\n        },\n        variables: function variables() {\n          return this.variables;\n        },\n\n        fetchPolicy: this.fetchPolicy,\n        pollInterval: this.pollInterval,\n        notifyOnNetworkStatusChange: this.notifyOnNetworkStatusChange,\n        context: function context() {\n          return this.context;\n        },\n        skip: function skip() {\n          return this.skip;\n        },\n\n        manual: true,\n        result: function result(_result) {\n          var _result2 = _result,\n              errors = _result2.errors,\n              loading = _result2.loading,\n              networkStatus = _result2.networkStatus;\n          var _result3 = _result,\n              error = _result3.error;\n\n          _result = Object.assign({}, _result);\n\n          if (errors && errors.length) {\n            error = new Error('Apollo errors occured (' + errors.length + ')');\n            error.graphQLErrors = errors;\n          }\n\n          var data = {};\n\n          if (loading) {\n            Object.assign(data, this.$_previousData, _result.data);\n          } else if (error) {\n            Object.assign(data, this.$apollo.queries.query.observer.getLastResult() || {}, _result.data);\n          } else {\n            data = _result.data;\n            this.$_previousData = _result.data;\n          }\n\n          this.result = {\n            data: isDataFilled(data) ? data : undefined,\n            loading: loading,\n            error: error,\n            networkStatus: networkStatus\n          };\n        },\n        error: function error(_error) {\n          this.result.loading = false;\n          this.result.error = _error;\n          console.log(this.$apollo.queries.query.observer.currentResult());\n        }\n      };\n    }\n  },\n\n  methods: {\n    getDollarApollo: function getDollarApollo() {\n      return this.$apollo;\n    },\n    getApolloQuery: function getApolloQuery() {\n      return this.$apollo.queries.query;\n    }\n  },\n\n  render: function render(h) {\n    var result = this.$scopedSlots.default({\n      result: this.result,\n      query: this.$apollo.queries.query\n    });\n    if (Array.isArray(result)) {\n      result = result.concat(this.$slots.default);\n    } else {\n      result = [result].concat(this.$slots.default);\n    }\n    return h(this.tag, result);\n  }\n};\n\nvar uid = 0;\n\nvar CApolloSubscribeToMore = {\n  name: 'ApolloSubscribeToMore',\n\n  inject: ['getDollarApollo', 'getApolloQuery'],\n\n  props: {\n    document: {\n      type: Object,\n      required: true\n    },\n\n    variables: {\n      type: Object,\n      default: null\n    },\n\n    updateQuery: {\n      type: Function,\n      default: null\n    }\n  },\n\n  watch: {\n    document: 'refresh',\n    variables: 'refresh'\n  },\n\n  created: function created() {\n    this.$_key = 'sub_component_' + uid++;\n  },\n  mounted: function mounted() {\n    this.refresh();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroy();\n  },\n\n\n  methods: {\n    destroy: function destroy() {\n      if (this.$_sub) {\n        this.$_sub.destroy();\n      }\n    },\n    refresh: function refresh() {\n      this.destroy();\n\n      this.$_sub = this.getDollarApollo().addSmartSubscription(this.$_key, {\n        document: this.document,\n        variables: this.variables,\n        updateQuery: this.updateQuery,\n        linkedQuery: this.getApolloQuery()\n      });\n    }\n  },\n\n  render: function render(h) {\n    return null;\n  }\n};\n\nvar keywords = ['$subscribe'];\n\nvar launch = function launch() {\n  var apolloProvider = this.$apolloProvider;\n\n  if (this._apolloLaunched || !apolloProvider) return;\n  this._apolloLaunched = true;\n\n  // Prepare properties\n  var apollo = this.$options.apollo;\n\n  if (apollo) {\n    if (!apollo.$init) {\n      apollo.$init = true;\n\n      // Default options applied to `apollo` options\n      if (apolloProvider.defaultOptions) {\n        apollo = this.$options.apollo = Object.assign({}, apolloProvider.defaultOptions, apollo);\n      }\n    }\n\n    defineReactiveSetter(this.$apollo, 'skipAll', apollo.$skipAll);\n    defineReactiveSetter(this.$apollo, 'skipAllQueries', apollo.$skipAllQueries);\n    defineReactiveSetter(this.$apollo, 'skipAllSubscriptions', apollo.$skipAllSubscriptions);\n    defineReactiveSetter(this.$apollo, 'client', apollo.$client);\n    defineReactiveSetter(this.$apollo, 'loadingKey', apollo.$loadingKey);\n    defineReactiveSetter(this.$apollo, 'error', apollo.$error);\n    defineReactiveSetter(this.$apollo, 'watchLoading', apollo.$watchLoading);\n\n    // watchQuery\n    for (var key in apollo) {\n      if (key.charAt(0) !== '$') {\n        this.$apollo.addSmartQuery(key, apollo[key]);\n      }\n    }\n\n    if (apollo.subscribe) {\n      Globals.Vue.util.warn('vue-apollo -> `subscribe` option is deprecated. Use the `$subscribe` option instead.');\n    }\n\n    if (apollo.$subscribe) {\n      for (var _key in apollo.$subscribe) {\n        this.$apollo.addSmartSubscription(_key, apollo.$subscribe[_key]);\n      }\n    }\n  }\n};\n\nfunction defineReactiveSetter($apollo, key, value) {\n  if (typeof value !== 'undefined') {\n    if (typeof value === 'function') {\n      $apollo.defineReactiveSetter(key, value);\n    } else {\n      $apollo[key] = value;\n    }\n  }\n}\n\nfunction install(Vue, options) {\n  if (install.installed) return;\n  install.installed = true;\n\n  Globals.Vue = Vue;\n\n  // Options merging\n  var merge = Vue.config.optionMergeStrategies.methods;\n  Vue.config.optionMergeStrategies.apollo = function (toVal, fromVal, vm) {\n    if (!toVal) return fromVal;\n    if (!fromVal) return toVal;\n\n    var toData = Object.assign({}, lodash_omit(toVal, keywords), toVal.data);\n    var fromData = Object.assign({}, lodash_omit(fromVal, keywords), fromVal.data);\n\n    var map = {};\n    for (var i = 0; i < keywords.length; i++) {\n      var key = keywords[i];\n      map[key] = merge(toVal[key], fromVal[key]);\n    }\n\n    return Object.assign(map, merge(toData, fromData));\n  };\n\n  // Lazy creation\n  Object.defineProperty(Vue.prototype, '$apollo', {\n    get: function get$$1() {\n      if (!this._apollo) {\n        this._apollo = new DollarApollo(this);\n      }\n      return this._apollo;\n    }\n  });\n\n  var vueVersion = Vue.version.substr(0, Vue.version.indexOf('.'));\n\n  Vue.mixin(_extends({}, vueVersion === '1' ? {\n    init: function init() {\n      var apolloProvider = void 0;\n      if (this.$options.apolloProvider) {\n        apolloProvider = this._apolloProvider = this.$options.apolloProvider;\n      } else {\n        apolloProvider = this.$root._apolloProvider;\n      }\n      this.$apolloProvider = apolloProvider;\n    }\n  } : {}, vueVersion === '2' ? {\n    inject: {\n      $apolloProvider: { default: null }\n    },\n\n    data: function data() {\n      return this.$options.apollo ? {\n        '$apolloData': {\n          queries: {},\n          loading: 0\n        }\n      } : {};\n    }\n  } : {}, {\n\n    created: launch,\n\n    destroyed: function destroyed() {\n      if (this._apollo) {\n        this._apollo.destroy();\n        this._apollo = null;\n      }\n    }\n\n  }));\n\n  if (vueVersion === '2') {\n    Vue.component('apollo-query', CApolloQuery);\n    Vue.component('ApolloQuery', CApolloQuery);\n    Vue.component('apollo-subscribe-to-more', CApolloSubscribeToMore);\n    Vue.component('ApolloSubscribeToMore', CApolloSubscribeToMore);\n  }\n}\n\nApolloProvider.install = install;\n\n// eslint-disable-next-line no-undef\nApolloProvider.version = \"3.0.0-beta.4\";\n\n// Apollo provider\nvar ApolloProvider$1 = ApolloProvider;\n// Components\nvar ApolloQuery = CApolloQuery;\nvar ApolloSubscribeToMore = CApolloSubscribeToMore;\n\n// Auto-install\nvar GlobalVue = null;\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue;\n}\nif (GlobalVue) {\n  GlobalVue.use(ApolloProvider);\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ApolloProvider);\n\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///70\n");

/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__ = __webpack_require__(25);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ba5bd90_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__ = __webpack_require__(87);\nvar disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(72)\n}\nvar normalizeComponent = __webpack_require__(77)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ba5bd90_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src/App.vue\"\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-7ba5bd90\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-7ba5bd90\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT81Y2YyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSx3QkFBaUw7QUFDakw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FLO0FBQ3JLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiI3MS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkaXNwb3NlZCA9IGZhbHNlXG5mdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi03YmE1YmQ5MFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXNhc3MtbG9hZGVyIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0FwcC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0FwcC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTdiYTViZDkwXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQXBwLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvQXBwLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi03YmE1YmQ5MFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTdiYTViZDkwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///71\n");

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(73);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(75)(\"1aea32e7\", content, false, {});\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../node_modules/css-loader/index.js!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-7ba5bd90\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/sass-loader/lib/loader.js!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\", function() {\n     var newContent = require(\"!!../node_modules/css-loader/index.js!../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-7ba5bd90\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/sass-loader/lib/loader.js!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9hMjM0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0Esb0NBQXdNO0FBQ3hNO0FBQ0E7QUFDQTtBQUNBLG1FQUErRztBQUMvRztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9IQUFvSCxtRkFBbUY7QUFDdk0sNkhBQTZILG1GQUFtRjtBQUNoTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjcyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtN2JhNWJkOTBcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjFhZWEzMmU3XCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTdiYTViZDkwXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BcHAudnVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtN2JhNWJkOTBcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi03YmE1YmQ5MFwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///72\n");

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(74)(false);\n// imports\n\n\n// module\nexports.push([module.i, \"\\n#app {\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n  text-align: center;\\n  color: #2c3e50;\\n  margin-top: 60px;\\n}\\nh1, h2 {\\n  font-weight: normal;\\n}\\nul {\\n  list-style-type: none;\\n  padding: 0;\\n}\\nli {\\n  display: inline-block;\\n  margin: 0 10px;\\n}\\na {\\n  color: #42b983;\\n}\\n\", \"\"]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT85MzhmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EsaUNBQWtDLHdEQUF3RCx3Q0FBd0MsdUNBQXVDLHVCQUF1QixtQkFBbUIscUJBQXFCLEdBQUcsVUFBVSx3QkFBd0IsR0FBRyxNQUFNLDBCQUEwQixlQUFlLEdBQUcsTUFBTSwwQkFBMEIsbUJBQW1CLEdBQUcsS0FBSyxtQkFBbUIsR0FBRzs7QUFFbloiLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbiNhcHAge1xcbiAgZm9udC1mYW1pbHk6ICdBdmVuaXInLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgY29sb3I6ICMyYzNlNTA7XFxuICBtYXJnaW4tdG9wOiA2MHB4O1xcbn1cXG5oMSwgaDIge1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG59XFxudWwge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG59XFxubGkge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWFyZ2luOiAwIDEwcHg7XFxufVxcbmEge1xcbiAgY29sb3I6ICM0MmI5ODM7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtN2JhNWJkOTBcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///73\n");

/***/ }),
/* 74 */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MTU5ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxjQUFjOztBQUVsRTtBQUNBIiwiZmlsZSI6Ijc0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///74\n");

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(76)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///75\n");

/***/ }),
/* 76 */
/***/ (function(module, exports) {

eval("/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzP2I1MzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyx3QkFBd0I7QUFDM0QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9saXN0VG9TdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///76\n");

/***/ }),
/* 77 */
/***/ (function(module, exports) {

eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanM/NTU0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgcmF3U2NyaXB0RXhwb3J0cyxcbiAgY29tcGlsZWRUZW1wbGF0ZSxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIgLyogc2VydmVyIG9ubHkgKi9cbikge1xuICB2YXIgZXNNb2R1bGVcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXNNb2R1bGUgPSByYXdTY3JpcHRFeHBvcnRzXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBjb21waWxlZFRlbXBsYXRlLnJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWRUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIHZhciBmdW5jdGlvbmFsID0gb3B0aW9ucy5mdW5jdGlvbmFsXG4gICAgdmFyIGV4aXN0aW5nID0gZnVuY3Rpb25hbFxuICAgICAgPyBvcHRpb25zLnJlbmRlclxuICAgICAgOiBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuXG4gICAgaWYgKCFmdW5jdGlvbmFsKSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///77\n");

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

eval("var parser = __webpack_require__(79);\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc);\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\n\nmodule.exports = gql;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///78\n");

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.parseValue = parseValue;\nexports.parseType = parseType;\nexports.parseConstValue = parseConstValue;\nexports.parseTypeReference = parseTypeReference;\nexports.parseNamedType = parseNamedType;\n\nvar _source = __webpack_require__(80);\n\nvar _error = __webpack_require__(27);\n\nvar _lexer = __webpack_require__(84);\n\nvar _kinds = __webpack_require__(85);\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\n\n/**\n * Configuration options to control parser behavior\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  if (!(sourceObj instanceof _source.Source)) {\n    throw new TypeError('Must provide Source. Received: ' + String(sourceObj));\n  }\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\nfunction parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return value;\n}\n\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\nfunction parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;\n  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});\n  expect(lexer, _lexer.TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, _lexer.TokenKind.EOF);\n  return type;\n}\n\n/**\n * Converts a name lex token into a name parse node.\n */\nfunction parseName(lexer) {\n  var token = expect(lexer, _lexer.TokenKind.NAME);\n  return {\n    kind: _kinds.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n}\n\n// Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SOF);\n  var definitions = [];\n  do {\n    definitions.push(parseDefinition(lexer));\n  } while (!skip(lexer, _lexer.TokenKind.EOF));\n\n  return {\n    kind: _kinds.DOCUMENT,\n    definitions: definitions,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Definition :\n *   - OperationDefinition\n *   - FragmentDefinition\n *   - TypeSystemDefinition\n */\nfunction parseDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      // Note: subscription is an experimental non-spec addition.\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n\n      // Note: the Type System IDL is an experimental non-spec addition.\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'extend':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer);\n}\n\n// Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {\n    return {\n      kind: _kinds.OPERATION_DEFINITION,\n      operation: 'query',\n      name: null,\n      variableDefinitions: null,\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  var operation = parseOperationType(lexer);\n  var name = void 0;\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n  return {\n    kind: _kinds.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * OperationType : one of query mutation subscription\n */\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, _lexer.TokenKind.NAME);\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n    case 'mutation':\n      return 'mutation';\n    // Note: subscription is an experimental non-spec addition.\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];\n}\n\n/**\n * VariableDefinition : Variable : Type DefaultValue?\n */\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : null,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Variable : $ Name\n */\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.DOLLAR);\n  return {\n    kind: _kinds.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * SelectionSet : { Selection+ }\n */\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.SELECTION_SET,\n    selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\nfunction parseSelection(lexer) {\n  return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\nfunction parseField(lexer) {\n  var start = lexer.token;\n\n  var nameOrAlias = parseName(lexer);\n  var alias = void 0;\n  var name = void 0;\n  if (skip(lexer, _lexer.TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    alias = null;\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: _kinds.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer),\n    directives: parseDirectives(lexer),\n    selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : null,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * Arguments : ( Argument+ )\n */\nfunction parseArguments(lexer) {\n  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseArgument, _lexer.TokenKind.PAREN_R) : [];\n}\n\n/**\n * Argument : Name : Value\n */\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.SPREAD);\n  if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: _kinds.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  var typeCondition = null;\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n  return {\n    kind: _kinds.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment');\n  return {\n    kind: _kinds.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * FragmentName : Name but not `on`\n */\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n  return parseName(lexer);\n}\n\n// Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n  switch (token.kind) {\n    case _lexer.TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n    case _lexer.TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n    case _lexer.TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: _kinds.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: _kinds.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.STRING:\n      lexer.advance();\n      return {\n        kind: _kinds.STRING,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: _kinds.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: _kinds.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n      lexer.advance();\n      return {\n        kind: _kinds.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case _lexer.TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n      break;\n  }\n  throw unexpected(lexer);\n}\n\nfunction parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: _kinds.LIST,\n    values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.BRACE_L);\n  var fields = [];\n  while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n  return {\n    kind: _kinds.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Directives section.\n\n/**\n * Directives : Directive+\n */\nfunction parseDirectives(lexer) {\n  var directives = [];\n  while (peek(lexer, _lexer.TokenKind.AT)) {\n    directives.push(parseDirective(lexer));\n  }\n  return directives;\n}\n\n/**\n * Directive : @ Name Arguments?\n */\nfunction parseDirective(lexer) {\n  var start = lexer.token;\n  expect(lexer, _lexer.TokenKind.AT);\n  return {\n    kind: _kinds.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\nfunction parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type = void 0;\n  if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, _lexer.TokenKind.BRACKET_R);\n    type = {\n      kind: _kinds.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n  if (skip(lexer, _lexer.TokenKind.BANG)) {\n    return {\n      kind: _kinds.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n  return type;\n}\n\n/**\n * NamedType : Name\n */\nfunction parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: _kinds.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n\n// Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - TypeExtensionDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\nfunction parseTypeSystemDefinition(lexer) {\n  if (peek(lexer, _lexer.TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n      case 'extend':\n        return parseTypeExtensionDefinition(lexer);\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer);\n}\n\n/**\n * SchemaDefinition : schema Directives? { OperationTypeDefinition+ }\n *\n * OperationTypeDefinition : OperationType : NamedType\n */\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer);\n  var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: _kinds.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ScalarTypeDefinition : scalar Name Directives?\n */\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer);\n  return {\n    kind: _kinds.SCALAR_TYPE_DEFINITION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ObjectTypeDefinition :\n *   - type Name ImplementsInterfaces? Directives? { FieldDefinition+ }\n */\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer);\n  var fields = any(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.OBJECT_TYPE_DEFINITION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ImplementsInterfaces : implements NamedType+\n */\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n  if (lexer.token.value === 'implements') {\n    lexer.advance();\n    do {\n      types.push(parseNamedType(lexer));\n    } while (peek(lexer, _lexer.TokenKind.NAME));\n  }\n  return types;\n}\n\n/**\n * FieldDefinition : Name ArgumentsDefinition? : Type Directives?\n */\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer);\n  return {\n    kind: _kinds.FIELD_DEFINITION,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {\n    return [];\n  }\n  return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);\n}\n\n/**\n * InputValueDefinition : Name : Type DefaultValue? Directives?\n */\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  expect(lexer, _lexer.TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue = null;\n  if (skip(lexer, _lexer.TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n  var directives = parseDirectives(lexer);\n  return {\n    kind: _kinds.INPUT_VALUE_DEFINITION,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InterfaceTypeDefinition : interface Name Directives? { FieldDefinition+ }\n */\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer);\n  var fields = any(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.INTERFACE_TYPE_DEFINITION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionTypeDefinition : union Name Directives? = UnionMembers\n */\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer);\n  expect(lexer, _lexer.TokenKind.EQUALS);\n  var types = parseUnionMembers(lexer);\n  return {\n    kind: _kinds.UNION_TYPE_DEFINITION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * UnionMembers :\n *   - `|`? NamedType\n *   - UnionMembers | NamedType\n */\nfunction parseUnionMembers(lexer) {\n  // Optional leading pipe\n  skip(lexer, _lexer.TokenKind.PIPE);\n  var members = [];\n  do {\n    members.push(parseNamedType(lexer));\n  } while (skip(lexer, _lexer.TokenKind.PIPE));\n  return members;\n}\n\n/**\n * EnumTypeDefinition : enum Name Directives? { EnumValueDefinition+ }\n */\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer);\n  var values = many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.ENUM_TYPE_DEFINITION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * EnumValueDefinition : EnumValue Directives?\n *\n * EnumValue : Name\n */\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer);\n  return {\n    kind: _kinds.ENUM_VALUE_DEFINITION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * InputObjectTypeDefinition : input Name Directives? { InputValueDefinition+ }\n */\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer);\n  var fields = any(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R);\n  return {\n    kind: _kinds.INPUT_OBJECT_TYPE_DEFINITION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * TypeExtensionDefinition : extend ObjectTypeDefinition\n */\nfunction parseTypeExtensionDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  var definition = parseObjectTypeDefinition(lexer);\n  return {\n    kind: _kinds.TYPE_EXTENSION_DEFINITION,\n    definition: definition,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveDefinition :\n *   - directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'directive');\n  expect(lexer, _lexer.TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: _kinds.DIRECTIVE_DEFINITION,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n\n/**\n * DirectiveLocations :\n *   - `|`? Name\n *   - DirectiveLocations | Name\n */\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, _lexer.TokenKind.PIPE);\n  var locations = [];\n  do {\n    locations.push(parseName(lexer));\n  } while (skip(lexer, _lexer.TokenKind.PIPE));\n  return locations;\n}\n\n// Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return { start: this.start, end: this.end };\n};\n\n/**\n * Determines if the next token is of a given kind\n */\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n  if (match) {\n    lexer.advance();\n  }\n  return match;\n}\n\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected ' + kind + ', found ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected \"' + value + '\", found ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return (0, _error.syntaxError)(lexer.source, token.start, 'Unexpected ' + (0, _lexer.getTokenDesc)(token));\n}\n\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}\n\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///79\n");

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Source = undefined;\n\nvar _invariant = __webpack_require__(26);\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           * \n                                                                                                                                                           */\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nvar Source = exports.Source = function Source(body, name, locationOffset) {\n  _classCallCheck(this, Source);\n\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || { line: 1, column: 1 };\n  !(this.locationOffset.line > 0) ? (0, _invariant2.default)(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\n  !(this.locationOffset.column > 0) ? (0, _invariant2.default)(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9zb3VyY2UuanM/ODMyNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBOztBQUVBOztBQUVBLHNDQUFzQyx1Q0FBdUMsZ0JBQWdCOztBQUU3RixpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFLEVBQUU7QUFDeko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0EseUNBQXlDLHNCQUFzQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQSIsImZpbGUiOiI4MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU291cmNlID0gdW5kZWZpbmVkO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJy4uL2pzdXRpbHMvaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBzb3VyY2UgaW5wdXQgdG8gR3JhcGhRTC5cbiAqIGBuYW1lYCBhbmQgYGxvY2F0aW9uT2Zmc2V0YCBhcmUgb3B0aW9uYWwuIFRoZXkgYXJlIHVzZWZ1bCBmb3IgY2xpZW50cyB3aG9cbiAqIHN0b3JlIEdyYXBoUUwgZG9jdW1lbnRzIGluIHNvdXJjZSBmaWxlczsgZm9yIGV4YW1wbGUsIGlmIHRoZSBHcmFwaFFMIGlucHV0XG4gKiBzdGFydHMgYXQgbGluZSA0MCBpbiBhIGZpbGUgbmFtZWQgRm9vLmdyYXBocWwsIGl0IG1pZ2h0IGJlIHVzZWZ1bCBmb3IgbmFtZSB0b1xuICogYmUgXCJGb28uZ3JhcGhxbFwiIGFuZCBsb2NhdGlvbiB0byBiZSBgeyBsaW5lOiA0MCwgY29sdW1uOiAwIH1gLlxuICogbGluZSBhbmQgY29sdW1uIGluIGxvY2F0aW9uT2Zmc2V0IGFyZSAxLWluZGV4ZWRcbiAqL1xudmFyIFNvdXJjZSA9IGV4cG9ydHMuU291cmNlID0gZnVuY3Rpb24gU291cmNlKGJvZHksIG5hbWUsIGxvY2F0aW9uT2Zmc2V0KSB7XG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTb3VyY2UpO1xuXG4gIHRoaXMuYm9keSA9IGJvZHk7XG4gIHRoaXMubmFtZSA9IG5hbWUgfHwgJ0dyYXBoUUwgcmVxdWVzdCc7XG4gIHRoaXMubG9jYXRpb25PZmZzZXQgPSBsb2NhdGlvbk9mZnNldCB8fCB7IGxpbmU6IDEsIGNvbHVtbjogMSB9O1xuICAhKHRoaXMubG9jYXRpb25PZmZzZXQubGluZSA+IDApID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKDAsICdsaW5lIGluIGxvY2F0aW9uT2Zmc2V0IGlzIDEtaW5kZXhlZCBhbmQgbXVzdCBiZSBwb3NpdGl2ZScpIDogdm9pZCAwO1xuICAhKHRoaXMubG9jYXRpb25PZmZzZXQuY29sdW1uID4gMCkgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoMCwgJ2NvbHVtbiBpbiBsb2NhdGlvbk9mZnNldCBpcyAxLWluZGV4ZWQgYW5kIG11c3QgYmUgcG9zaXRpdmUnKSA6IHZvaWQgMDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9zb3VyY2UuanNcbi8vIG1vZHVsZSBpZCA9IDgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///80\n");

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.syntaxError = syntaxError;\n\nvar _location = __webpack_require__(28);\n\nvar _GraphQLError = __webpack_require__(13);\n\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction syntaxError(source, position, description) {\n  var location = (0, _location.getLocation)(source, position);\n  var line = location.line + source.locationOffset.line - 1;\n  var columnOffset = getColumnOffset(source, location);\n  var column = location.column + columnOffset;\n  var error = new _GraphQLError.GraphQLError('Syntax Error ' + source.name + ' (' + line + ':' + column + ') ' + description + '\\n\\n' + highlightSourceAtLocation(source, location), undefined, source, [position]);\n  return error;\n}\n\n/**\n * Render a helpful description of the location of the error in the GraphQL\n * Source document.\n */\nfunction highlightSourceAtLocation(source, location) {\n  var line = location.line;\n  var lineOffset = source.locationOffset.line - 1;\n  var columnOffset = getColumnOffset(source, location);\n  var contextLine = line + lineOffset;\n  var prevLineNum = (contextLine - 1).toString();\n  var lineNum = contextLine.toString();\n  var nextLineNum = (contextLine + 1).toString();\n  var padLen = nextLineNum.length;\n  var lines = source.body.split(/\\r\\n|[\\n\\r]/g);\n  lines[0] = whitespace(source.locationOffset.column - 1) + lines[0];\n  return (line >= 2 ? lpad(padLen, prevLineNum) + ': ' + lines[line - 2] + '\\n' : '') + lpad(padLen, lineNum) + ': ' + lines[line - 1] + '\\n' + whitespace(2 + padLen + location.column - 1 + columnOffset) + '^\\n' + (line < lines.length ? lpad(padLen, nextLineNum) + ': ' + lines[line] + '\\n' : '');\n}\n\nfunction getColumnOffset(source, location) {\n  return location.line === 1 ? source.locationOffset.column - 1 : 0;\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9zeW50YXhFcnJvci5qcz9lOWZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiI4MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuc3ludGF4RXJyb3IgPSBzeW50YXhFcnJvcjtcblxudmFyIF9sb2NhdGlvbiA9IHJlcXVpcmUoJy4uL2xhbmd1YWdlL2xvY2F0aW9uJyk7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZSgnLi9HcmFwaFFMRXJyb3InKTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhIEdyYXBoUUxFcnJvciByZXByZXNlbnRpbmcgYSBzeW50YXggZXJyb3IsIGNvbnRhaW5pbmcgdXNlZnVsXG4gKiBkZXNjcmlwdGl2ZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3ludGF4IGVycm9yJ3MgcG9zaXRpb24gaW4gdGhlIHNvdXJjZS5cbiAqL1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBzeW50YXhFcnJvcihzb3VyY2UsIHBvc2l0aW9uLCBkZXNjcmlwdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSAoMCwgX2xvY2F0aW9uLmdldExvY2F0aW9uKShzb3VyY2UsIHBvc2l0aW9uKTtcbiAgdmFyIGxpbmUgPSBsb2NhdGlvbi5saW5lICsgc291cmNlLmxvY2F0aW9uT2Zmc2V0LmxpbmUgLSAxO1xuICB2YXIgY29sdW1uT2Zmc2V0ID0gZ2V0Q29sdW1uT2Zmc2V0KHNvdXJjZSwgbG9jYXRpb24pO1xuICB2YXIgY29sdW1uID0gbG9jYXRpb24uY29sdW1uICsgY29sdW1uT2Zmc2V0O1xuICB2YXIgZXJyb3IgPSBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IoJ1N5bnRheCBFcnJvciAnICsgc291cmNlLm5hbWUgKyAnICgnICsgbGluZSArICc6JyArIGNvbHVtbiArICcpICcgKyBkZXNjcmlwdGlvbiArICdcXG5cXG4nICsgaGlnaGxpZ2h0U291cmNlQXRMb2NhdGlvbihzb3VyY2UsIGxvY2F0aW9uKSwgdW5kZWZpbmVkLCBzb3VyY2UsIFtwb3NpdGlvbl0pO1xuICByZXR1cm4gZXJyb3I7XG59XG5cbi8qKlxuICogUmVuZGVyIGEgaGVscGZ1bCBkZXNjcmlwdGlvbiBvZiB0aGUgbG9jYXRpb24gb2YgdGhlIGVycm9yIGluIHRoZSBHcmFwaFFMXG4gKiBTb3VyY2UgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGhpZ2hsaWdodFNvdXJjZUF0TG9jYXRpb24oc291cmNlLCBsb2NhdGlvbikge1xuICB2YXIgbGluZSA9IGxvY2F0aW9uLmxpbmU7XG4gIHZhciBsaW5lT2Zmc2V0ID0gc291cmNlLmxvY2F0aW9uT2Zmc2V0LmxpbmUgLSAxO1xuICB2YXIgY29sdW1uT2Zmc2V0ID0gZ2V0Q29sdW1uT2Zmc2V0KHNvdXJjZSwgbG9jYXRpb24pO1xuICB2YXIgY29udGV4dExpbmUgPSBsaW5lICsgbGluZU9mZnNldDtcbiAgdmFyIHByZXZMaW5lTnVtID0gKGNvbnRleHRMaW5lIC0gMSkudG9TdHJpbmcoKTtcbiAgdmFyIGxpbmVOdW0gPSBjb250ZXh0TGluZS50b1N0cmluZygpO1xuICB2YXIgbmV4dExpbmVOdW0gPSAoY29udGV4dExpbmUgKyAxKS50b1N0cmluZygpO1xuICB2YXIgcGFkTGVuID0gbmV4dExpbmVOdW0ubGVuZ3RoO1xuICB2YXIgbGluZXMgPSBzb3VyY2UuYm9keS5zcGxpdCgvXFxyXFxufFtcXG5cXHJdL2cpO1xuICBsaW5lc1swXSA9IHdoaXRlc3BhY2Uoc291cmNlLmxvY2F0aW9uT2Zmc2V0LmNvbHVtbiAtIDEpICsgbGluZXNbMF07XG4gIHJldHVybiAobGluZSA+PSAyID8gbHBhZChwYWRMZW4sIHByZXZMaW5lTnVtKSArICc6ICcgKyBsaW5lc1tsaW5lIC0gMl0gKyAnXFxuJyA6ICcnKSArIGxwYWQocGFkTGVuLCBsaW5lTnVtKSArICc6ICcgKyBsaW5lc1tsaW5lIC0gMV0gKyAnXFxuJyArIHdoaXRlc3BhY2UoMiArIHBhZExlbiArIGxvY2F0aW9uLmNvbHVtbiAtIDEgKyBjb2x1bW5PZmZzZXQpICsgJ15cXG4nICsgKGxpbmUgPCBsaW5lcy5sZW5ndGggPyBscGFkKHBhZExlbiwgbmV4dExpbmVOdW0pICsgJzogJyArIGxpbmVzW2xpbmVdICsgJ1xcbicgOiAnJyk7XG59XG5cbmZ1bmN0aW9uIGdldENvbHVtbk9mZnNldChzb3VyY2UsIGxvY2F0aW9uKSB7XG4gIHJldHVybiBsb2NhdGlvbi5saW5lID09PSAxID8gc291cmNlLmxvY2F0aW9uT2Zmc2V0LmNvbHVtbiAtIDEgOiAwO1xufVxuXG5mdW5jdGlvbiB3aGl0ZXNwYWNlKGxlbikge1xuICByZXR1cm4gQXJyYXkobGVuICsgMSkuam9pbignICcpO1xufVxuXG5mdW5jdGlvbiBscGFkKGxlbiwgc3RyKSB7XG4gIHJldHVybiB3aGl0ZXNwYWNlKGxlbiAtIHN0ci5sZW5ndGgpICsgc3RyO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3Ivc3ludGF4RXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///81\n");

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.locatedError = locatedError;\n\nvar _GraphQLError = __webpack_require__(13);\n\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\nfunction locatedError(originalError, nodes, path) {\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  if (originalError && originalError.path) {\n    return originalError;\n  }\n\n  var message = originalError ? originalError.message || String(originalError) : 'An unknown error occurred.';\n  return new _GraphQLError.GraphQLError(message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9sb2NhdGVkRXJyb3IuanM/YjdmMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI4Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubG9jYXRlZEVycm9yID0gbG9jYXRlZEVycm9yO1xuXG52YXIgX0dyYXBoUUxFcnJvciA9IHJlcXVpcmUoJy4vR3JhcGhRTEVycm9yJyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gYXJiaXRyYXJ5IEVycm9yLCBwcmVzdW1hYmx5IHRocm93biB3aGlsZSBhdHRlbXB0aW5nIHRvIGV4ZWN1dGUgYVxuICogR3JhcGhRTCBvcGVyYXRpb24sIHByb2R1Y2UgYSBuZXcgR3JhcGhRTEVycm9yIGF3YXJlIG9mIHRoZSBsb2NhdGlvbiBpbiB0aGVcbiAqIGRvY3VtZW50IHJlc3BvbnNpYmxlIGZvciB0aGUgb3JpZ2luYWwgRXJyb3IuXG4gKi9cbmZ1bmN0aW9uIGxvY2F0ZWRFcnJvcihvcmlnaW5hbEVycm9yLCBub2RlcywgcGF0aCkge1xuICAvLyBOb3RlOiB0aGlzIHVzZXMgYSBicmFuZC1jaGVjayB0byBzdXBwb3J0IEdyYXBoUUwgZXJyb3JzIG9yaWdpbmF0aW5nIGZyb21cbiAgLy8gb3RoZXIgY29udGV4dHMuXG4gIGlmIChvcmlnaW5hbEVycm9yICYmIG9yaWdpbmFsRXJyb3IucGF0aCkge1xuICAgIHJldHVybiBvcmlnaW5hbEVycm9yO1xuICB9XG5cbiAgdmFyIG1lc3NhZ2UgPSBvcmlnaW5hbEVycm9yID8gb3JpZ2luYWxFcnJvci5tZXNzYWdlIHx8IFN0cmluZyhvcmlnaW5hbEVycm9yKSA6ICdBbiB1bmtub3duIGVycm9yIG9jY3VycmVkLic7XG4gIHJldHVybiBuZXcgX0dyYXBoUUxFcnJvci5HcmFwaFFMRXJyb3IobWVzc2FnZSwgb3JpZ2luYWxFcnJvciAmJiBvcmlnaW5hbEVycm9yLm5vZGVzIHx8IG5vZGVzLCBvcmlnaW5hbEVycm9yICYmIG9yaWdpbmFsRXJyb3Iuc291cmNlLCBvcmlnaW5hbEVycm9yICYmIG9yaWdpbmFsRXJyb3IucG9zaXRpb25zLCBwYXRoLCBvcmlnaW5hbEVycm9yKTtcbn0gLyoqXG4gICAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICAgKlxuICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAgICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICAgKlxuICAgKiBcbiAgICovXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9sb2NhdGVkRXJyb3IuanNcbi8vIG1vZHVsZSBpZCA9IDgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///82\n");

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatError = formatError;\n\nvar _invariant = __webpack_require__(26);\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n */\nfunction formatError(error) {\n  !error ? (0, _invariant2.default)(0, 'Received null or undefined error.') : void 0;\n  return {\n    message: error.message,\n    locations: error.locations,\n    path: error.path\n  };\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9mb3JtYXRFcnJvci5qcz9jZDk5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7O0FBRUEsc0NBQXNDLHVDQUF1QyxnQkFBZ0I7O0FBRTdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZvcm1hdEVycm9yID0gZm9ybWF0RXJyb3I7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnLi4vanN1dGlscy9pbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBHaXZlbiBhIEdyYXBoUUxFcnJvciwgZm9ybWF0IGl0IGFjY29yZGluZyB0byB0aGUgcnVsZXMgZGVzY3JpYmVkIGJ5IHRoZVxuICogUmVzcG9uc2UgRm9ybWF0LCBFcnJvcnMgc2VjdGlvbiBvZiB0aGUgR3JhcGhRTCBTcGVjaWZpY2F0aW9uLlxuICovXG5mdW5jdGlvbiBmb3JtYXRFcnJvcihlcnJvcikge1xuICAhZXJyb3IgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoMCwgJ1JlY2VpdmVkIG51bGwgb3IgdW5kZWZpbmVkIGVycm9yLicpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgbG9jYXRpb25zOiBlcnJvci5sb2NhdGlvbnMsXG4gICAgcGF0aDogZXJyb3IucGF0aFxuICB9O1xufSAvKipcbiAgICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gICAqXG4gICAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICAgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gICAqXG4gICAqIFxuICAgKi9cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL2Zvcm1hdEVycm9yLmpzXG4vLyBtb2R1bGUgaWQgPSA4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///83\n");

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenKind = undefined;\nexports.createLexer = createLexer;\nexports.getTokenDesc = getTokenDesc;\n\nvar _error = __webpack_require__(27);\n\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\nfunction createLexer(source, options) {\n  var startOfFileToken = new Tok(SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer\n  };\n  return lexer;\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\nfunction advanceLexer() {\n  var token = this.lastToken = this.token;\n  if (token.kind !== EOF) {\n    do {\n      token = token.next = readToken(this, token);\n    } while (token.kind === COMMENT);\n    this.token = token;\n  }\n  return token;\n}\n\n/**\n * The return type of createLexer.\n */\n\n\n// Each kind of token.\nvar SOF = '<SOF>';\nvar EOF = '<EOF>';\nvar BANG = '!';\nvar DOLLAR = '$';\nvar PAREN_L = '(';\nvar PAREN_R = ')';\nvar SPREAD = '...';\nvar COLON = ':';\nvar EQUALS = '=';\nvar AT = '@';\nvar BRACKET_L = '[';\nvar BRACKET_R = ']';\nvar BRACE_L = '{';\nvar PIPE = '|';\nvar BRACE_R = '}';\nvar NAME = 'Name';\nvar INT = 'Int';\nvar FLOAT = 'Float';\nvar STRING = 'String';\nvar COMMENT = 'Comment';\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind = exports.TokenKind = {\n  SOF: SOF,\n  EOF: EOF,\n  BANG: BANG,\n  DOLLAR: DOLLAR,\n  PAREN_L: PAREN_L,\n  PAREN_R: PAREN_R,\n  SPREAD: SPREAD,\n  COLON: COLON,\n  EQUALS: EQUALS,\n  AT: AT,\n  BRACKET_L: BRACKET_L,\n  BRACKET_R: BRACKET_R,\n  BRACE_L: BRACE_L,\n  PIPE: PIPE,\n  BRACE_R: BRACE_R,\n  NAME: NAME,\n  INT: INT,\n  FLOAT: FLOAT,\n  STRING: STRING,\n  COMMENT: COMMENT\n};\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? token.kind + ' \"' + value + '\"' : token.kind;\n}\n\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n\n/**\n * Helper function for constructing the Token object.\n */\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (\n    // NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? EOF :\n    // Trust JSON for ASCII.\n    code < 0x007F ? JSON.stringify(String.fromCharCode(code)) :\n    // Otherwise print the escaped form.\n    '\"\\\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'\n  );\n}\n\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n\n  var position = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + position - lexer.lineStart;\n\n  if (position >= bodyLength) {\n    return new Tok(EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, position);\n\n  // SourceCharacter\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000A && code !== 0x000D) {\n    throw (0, _error.syntaxError)(source, position, 'Cannot contain the invalid character ' + printCharCode(code) + '.');\n  }\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(BANG, position, position + 1, line, col, prev);\n    // #\n    case 35:\n      return readComment(source, position, line, col, prev);\n    // $\n    case 36:\n      return new Tok(DOLLAR, position, position + 1, line, col, prev);\n    // (\n    case 40:\n      return new Tok(PAREN_L, position, position + 1, line, col, prev);\n    // )\n    case 41:\n      return new Tok(PAREN_R, position, position + 1, line, col, prev);\n    // .\n    case 46:\n      if (charCodeAt.call(body, position + 1) === 46 && charCodeAt.call(body, position + 2) === 46) {\n        return new Tok(SPREAD, position, position + 3, line, col, prev);\n      }\n      break;\n    // :\n    case 58:\n      return new Tok(COLON, position, position + 1, line, col, prev);\n    // =\n    case 61:\n      return new Tok(EQUALS, position, position + 1, line, col, prev);\n    // @\n    case 64:\n      return new Tok(AT, position, position + 1, line, col, prev);\n    // [\n    case 91:\n      return new Tok(BRACKET_L, position, position + 1, line, col, prev);\n    // ]\n    case 93:\n      return new Tok(BRACKET_R, position, position + 1, line, col, prev);\n    // {\n    case 123:\n      return new Tok(BRACE_L, position, position + 1, line, col, prev);\n    // |\n    case 124:\n      return new Tok(PIPE, position, position + 1, line, col, prev);\n    // }\n    case 125:\n      return new Tok(BRACE_R, position, position + 1, line, col, prev);\n    // A-Z _ a-z\n    case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:\n    case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:\n    case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:\n    case 89:case 90:\n    case 95:\n    case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:\n    case 105:case 106:case 107:case 108:case 109:case 110:case 111:\n    case 112:case 113:case 114:case 115:case 116:case 117:case 118:\n    case 119:case 120:case 121:case 122:\n      return readName(source, position, line, col, prev);\n    // - 0-9\n    case 45:\n    case 48:case 49:case 50:case 51:case 52:\n    case 53:case 54:case 55:case 56:case 57:\n      return readNumber(source, position, code, line, col, prev);\n    // \"\n    case 34:\n      return readString(source, position, line, col, prev);\n  }\n\n  throw (0, _error.syntaxError)(source, position, unexpectedCharacterMessage(code));\n}\n\n/**\n * Report a message that an unexpected character was encountered.\n */\nfunction unexpectedCharacterMessage(code) {\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use ' + 'a double quote (\")?';\n  }\n\n  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';\n}\n\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position);\n    // tab | space | comma | BOM\n    if (code === 9 || code === 32 || code === 44 || code === 0xFEFF) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n  return position;\n}\n\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code = void 0;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && (\n  // SourceCharacter but not LineTerminator\n  code > 0x001F || code === 0x0009));\n\n  return new Tok(COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n    if (code >= 48 && code <= 57) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? FLOAT : INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n\n/**\n * Returns the new position in the source after reading digits.\n */\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n    return position;\n  }\n  throw (0, _error.syntaxError)(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');\n}\n\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&\n  // not LineTerminator\n  code !== 0x000A && code !== 0x000D &&\n  // not Quote (\")\n  code !== 34) {\n    // SourceCharacter\n    if (code < 0x0020 && code !== 0x0009) {\n      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    ++position;\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n      switch (code) {\n        case 34:\n          value += '\"';break;\n        case 47:\n          value += '/';break;\n        case 92:\n          value += '\\\\';break;\n        case 98:\n          value += '\\b';break;\n        case 102:\n          value += '\\f';break;\n        case 110:\n          value += '\\n';break;\n        case 114:\n          value += '\\r';break;\n        case 116:\n          value += '\\t';break;\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n          if (charCode < 0) {\n            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + ('\\\\u' + body.slice(position + 1, position + 5) + '.'));\n          }\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n        default:\n          throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');\n      }\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  if (code !== 34) {\n    // quote (\")\n    throw (0, _error.syntaxError)(source, position, 'Unterminated string.');\n  }\n\n  value += slice.call(body, chunkStart, position);\n  return new Tok(STRING, start, position + 1, line, col, prev, value);\n}\n\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 : // 0-9\n  a >= 65 && a <= 70 ? a - 55 : // A-F\n  a >= 97 && a <= 102 ? a - 87 : // a-f\n  -1;\n}\n\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\nfunction readName(source, position, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var end = position + 1;\n  var code = 0;\n  while (end !== bodyLength && (code = charCodeAt.call(body, end)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122 // a-z\n  )) {\n    ++end;\n  }\n  return new Tok(NAME, position, end, line, col, prev, slice.call(body, position, end));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///84\n");

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n// Name\n\nvar NAME = exports.NAME = 'Name';\n\n// Document\n\nvar DOCUMENT = exports.DOCUMENT = 'Document';\nvar OPERATION_DEFINITION = exports.OPERATION_DEFINITION = 'OperationDefinition';\nvar VARIABLE_DEFINITION = exports.VARIABLE_DEFINITION = 'VariableDefinition';\nvar VARIABLE = exports.VARIABLE = 'Variable';\nvar SELECTION_SET = exports.SELECTION_SET = 'SelectionSet';\nvar FIELD = exports.FIELD = 'Field';\nvar ARGUMENT = exports.ARGUMENT = 'Argument';\n\n// Fragments\n\nvar FRAGMENT_SPREAD = exports.FRAGMENT_SPREAD = 'FragmentSpread';\nvar INLINE_FRAGMENT = exports.INLINE_FRAGMENT = 'InlineFragment';\nvar FRAGMENT_DEFINITION = exports.FRAGMENT_DEFINITION = 'FragmentDefinition';\n\n// Values\n\nvar INT = exports.INT = 'IntValue';\nvar FLOAT = exports.FLOAT = 'FloatValue';\nvar STRING = exports.STRING = 'StringValue';\nvar BOOLEAN = exports.BOOLEAN = 'BooleanValue';\nvar NULL = exports.NULL = 'NullValue';\nvar ENUM = exports.ENUM = 'EnumValue';\nvar LIST = exports.LIST = 'ListValue';\nvar OBJECT = exports.OBJECT = 'ObjectValue';\nvar OBJECT_FIELD = exports.OBJECT_FIELD = 'ObjectField';\n\n// Directives\n\nvar DIRECTIVE = exports.DIRECTIVE = 'Directive';\n\n// Types\n\nvar NAMED_TYPE = exports.NAMED_TYPE = 'NamedType';\nvar LIST_TYPE = exports.LIST_TYPE = 'ListType';\nvar NON_NULL_TYPE = exports.NON_NULL_TYPE = 'NonNullType';\n\n// Type System Definitions\n\nvar SCHEMA_DEFINITION = exports.SCHEMA_DEFINITION = 'SchemaDefinition';\nvar OPERATION_TYPE_DEFINITION = exports.OPERATION_TYPE_DEFINITION = 'OperationTypeDefinition';\n\n// Type Definitions\n\nvar SCALAR_TYPE_DEFINITION = exports.SCALAR_TYPE_DEFINITION = 'ScalarTypeDefinition';\nvar OBJECT_TYPE_DEFINITION = exports.OBJECT_TYPE_DEFINITION = 'ObjectTypeDefinition';\nvar FIELD_DEFINITION = exports.FIELD_DEFINITION = 'FieldDefinition';\nvar INPUT_VALUE_DEFINITION = exports.INPUT_VALUE_DEFINITION = 'InputValueDefinition';\nvar INTERFACE_TYPE_DEFINITION = exports.INTERFACE_TYPE_DEFINITION = 'InterfaceTypeDefinition';\nvar UNION_TYPE_DEFINITION = exports.UNION_TYPE_DEFINITION = 'UnionTypeDefinition';\nvar ENUM_TYPE_DEFINITION = exports.ENUM_TYPE_DEFINITION = 'EnumTypeDefinition';\nvar ENUM_VALUE_DEFINITION = exports.ENUM_VALUE_DEFINITION = 'EnumValueDefinition';\nvar INPUT_OBJECT_TYPE_DEFINITION = exports.INPUT_OBJECT_TYPE_DEFINITION = 'InputObjectTypeDefinition';\n\n// Type Extensions\n\nvar TYPE_EXTENSION_DEFINITION = exports.TYPE_EXTENSION_DEFINITION = 'TypeExtensionDefinition';\n\n// Directive Definitions\n\nvar DIRECTIVE_DEFINITION = exports.DIRECTIVE_DEFINITION = 'DirectiveDefinition';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9raW5kcy5qcz8yNjRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSIsImZpbGUiOiI4NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuLy8gTmFtZVxuXG52YXIgTkFNRSA9IGV4cG9ydHMuTkFNRSA9ICdOYW1lJztcblxuLy8gRG9jdW1lbnRcblxudmFyIERPQ1VNRU5UID0gZXhwb3J0cy5ET0NVTUVOVCA9ICdEb2N1bWVudCc7XG52YXIgT1BFUkFUSU9OX0RFRklOSVRJT04gPSBleHBvcnRzLk9QRVJBVElPTl9ERUZJTklUSU9OID0gJ09wZXJhdGlvbkRlZmluaXRpb24nO1xudmFyIFZBUklBQkxFX0RFRklOSVRJT04gPSBleHBvcnRzLlZBUklBQkxFX0RFRklOSVRJT04gPSAnVmFyaWFibGVEZWZpbml0aW9uJztcbnZhciBWQVJJQUJMRSA9IGV4cG9ydHMuVkFSSUFCTEUgPSAnVmFyaWFibGUnO1xudmFyIFNFTEVDVElPTl9TRVQgPSBleHBvcnRzLlNFTEVDVElPTl9TRVQgPSAnU2VsZWN0aW9uU2V0JztcbnZhciBGSUVMRCA9IGV4cG9ydHMuRklFTEQgPSAnRmllbGQnO1xudmFyIEFSR1VNRU5UID0gZXhwb3J0cy5BUkdVTUVOVCA9ICdBcmd1bWVudCc7XG5cbi8vIEZyYWdtZW50c1xuXG52YXIgRlJBR01FTlRfU1BSRUFEID0gZXhwb3J0cy5GUkFHTUVOVF9TUFJFQUQgPSAnRnJhZ21lbnRTcHJlYWQnO1xudmFyIElOTElORV9GUkFHTUVOVCA9IGV4cG9ydHMuSU5MSU5FX0ZSQUdNRU5UID0gJ0lubGluZUZyYWdtZW50JztcbnZhciBGUkFHTUVOVF9ERUZJTklUSU9OID0gZXhwb3J0cy5GUkFHTUVOVF9ERUZJTklUSU9OID0gJ0ZyYWdtZW50RGVmaW5pdGlvbic7XG5cbi8vIFZhbHVlc1xuXG52YXIgSU5UID0gZXhwb3J0cy5JTlQgPSAnSW50VmFsdWUnO1xudmFyIEZMT0FUID0gZXhwb3J0cy5GTE9BVCA9ICdGbG9hdFZhbHVlJztcbnZhciBTVFJJTkcgPSBleHBvcnRzLlNUUklORyA9ICdTdHJpbmdWYWx1ZSc7XG52YXIgQk9PTEVBTiA9IGV4cG9ydHMuQk9PTEVBTiA9ICdCb29sZWFuVmFsdWUnO1xudmFyIE5VTEwgPSBleHBvcnRzLk5VTEwgPSAnTnVsbFZhbHVlJztcbnZhciBFTlVNID0gZXhwb3J0cy5FTlVNID0gJ0VudW1WYWx1ZSc7XG52YXIgTElTVCA9IGV4cG9ydHMuTElTVCA9ICdMaXN0VmFsdWUnO1xudmFyIE9CSkVDVCA9IGV4cG9ydHMuT0JKRUNUID0gJ09iamVjdFZhbHVlJztcbnZhciBPQkpFQ1RfRklFTEQgPSBleHBvcnRzLk9CSkVDVF9GSUVMRCA9ICdPYmplY3RGaWVsZCc7XG5cbi8vIERpcmVjdGl2ZXNcblxudmFyIERJUkVDVElWRSA9IGV4cG9ydHMuRElSRUNUSVZFID0gJ0RpcmVjdGl2ZSc7XG5cbi8vIFR5cGVzXG5cbnZhciBOQU1FRF9UWVBFID0gZXhwb3J0cy5OQU1FRF9UWVBFID0gJ05hbWVkVHlwZSc7XG52YXIgTElTVF9UWVBFID0gZXhwb3J0cy5MSVNUX1RZUEUgPSAnTGlzdFR5cGUnO1xudmFyIE5PTl9OVUxMX1RZUEUgPSBleHBvcnRzLk5PTl9OVUxMX1RZUEUgPSAnTm9uTnVsbFR5cGUnO1xuXG4vLyBUeXBlIFN5c3RlbSBEZWZpbml0aW9uc1xuXG52YXIgU0NIRU1BX0RFRklOSVRJT04gPSBleHBvcnRzLlNDSEVNQV9ERUZJTklUSU9OID0gJ1NjaGVtYURlZmluaXRpb24nO1xudmFyIE9QRVJBVElPTl9UWVBFX0RFRklOSVRJT04gPSBleHBvcnRzLk9QRVJBVElPTl9UWVBFX0RFRklOSVRJT04gPSAnT3BlcmF0aW9uVHlwZURlZmluaXRpb24nO1xuXG4vLyBUeXBlIERlZmluaXRpb25zXG5cbnZhciBTQ0FMQVJfVFlQRV9ERUZJTklUSU9OID0gZXhwb3J0cy5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OID0gJ1NjYWxhclR5cGVEZWZpbml0aW9uJztcbnZhciBPQkpFQ1RfVFlQRV9ERUZJTklUSU9OID0gZXhwb3J0cy5PQkpFQ1RfVFlQRV9ERUZJTklUSU9OID0gJ09iamVjdFR5cGVEZWZpbml0aW9uJztcbnZhciBGSUVMRF9ERUZJTklUSU9OID0gZXhwb3J0cy5GSUVMRF9ERUZJTklUSU9OID0gJ0ZpZWxkRGVmaW5pdGlvbic7XG52YXIgSU5QVVRfVkFMVUVfREVGSU5JVElPTiA9IGV4cG9ydHMuSU5QVVRfVkFMVUVfREVGSU5JVElPTiA9ICdJbnB1dFZhbHVlRGVmaW5pdGlvbic7XG52YXIgSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTiA9IGV4cG9ydHMuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTiA9ICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbic7XG52YXIgVU5JT05fVFlQRV9ERUZJTklUSU9OID0gZXhwb3J0cy5VTklPTl9UWVBFX0RFRklOSVRJT04gPSAnVW5pb25UeXBlRGVmaW5pdGlvbic7XG52YXIgRU5VTV9UWVBFX0RFRklOSVRJT04gPSBleHBvcnRzLkVOVU1fVFlQRV9ERUZJTklUSU9OID0gJ0VudW1UeXBlRGVmaW5pdGlvbic7XG52YXIgRU5VTV9WQUxVRV9ERUZJTklUSU9OID0gZXhwb3J0cy5FTlVNX1ZBTFVFX0RFRklOSVRJT04gPSAnRW51bVZhbHVlRGVmaW5pdGlvbic7XG52YXIgSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTiA9IGV4cG9ydHMuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTiA9ICdJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uJztcblxuLy8gVHlwZSBFeHRlbnNpb25zXG5cbnZhciBUWVBFX0VYVEVOU0lPTl9ERUZJTklUSU9OID0gZXhwb3J0cy5UWVBFX0VYVEVOU0lPTl9ERUZJTklUSU9OID0gJ1R5cGVFeHRlbnNpb25EZWZpbml0aW9uJztcblxuLy8gRGlyZWN0aXZlIERlZmluaXRpb25zXG5cbnZhciBESVJFQ1RJVkVfREVGSU5JVElPTiA9IGV4cG9ydHMuRElSRUNUSVZFX0RFRklOSVRJT04gPSAnRGlyZWN0aXZlRGVmaW5pdGlvbic7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9raW5kcy5qc1xuLy8gbW9kdWxlIGlkID0gODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///85\n");

/***/ }),
/* 86 */,
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { attrs: { id: \"app\" } }, [\n    _c(\"h1\", [_vm._v(_vm._s(_vm.timestamp))]),\n    _vm._v(\" \"),\n    _c(\"h3\", [\n      _c(\"a\", { attrs: { href: _vm.manifestUri } }, [\n        _vm._v(_vm._s(_vm.manifestUri))\n      ])\n    ]),\n    _vm._v(\" \"),\n    _c(\"h3\", [\n      _c(\"a\", { attrs: { href: _vm.awsConsoleUri } }, [\n        _vm._v(_vm._s(_vm.awsConsoleUri))\n      ])\n    ]),\n    _vm._v(\" \"),\n    _c(\"video\", {\n      attrs: { id: \"video\", width: \"640\", controls: \"\", autoplay: \"\" }\n    })\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require(\"vue-hot-reload-api\")      .rerender(\"data-v-7ba5bd90\", esExports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8zYTI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVMsWUFBWSxFQUFFO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUyx3QkFBd0IsRUFBRTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTLDBCQUEwQixFQUFFO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ijg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IGF0dHJzOiB7IGlkOiBcImFwcFwiIH0gfSwgW1xuICAgIF9jKFwiaDFcIiwgW192bS5fdihfdm0uX3MoX3ZtLnRpbWVzdGFtcCkpXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcImgzXCIsIFtcbiAgICAgIF9jKFwiYVwiLCB7IGF0dHJzOiB7IGhyZWY6IF92bS5tYW5pZmVzdFVyaSB9IH0sIFtcbiAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0ubWFuaWZlc3RVcmkpKVxuICAgICAgXSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwiaDNcIiwgW1xuICAgICAgX2MoXCJhXCIsIHsgYXR0cnM6IHsgaHJlZjogX3ZtLmF3c0NvbnNvbGVVcmkgfSB9LCBbXG4gICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmF3c0NvbnNvbGVVcmkpKVxuICAgICAgXSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwidmlkZW9cIiwge1xuICAgICAgYXR0cnM6IHsgaWQ6IFwidmlkZW9cIiwgd2lkdGg6IFwiNjQwXCIsIGNvbnRyb2xzOiBcIlwiLCBhdXRvcGxheTogXCJcIiB9XG4gICAgfSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpICAgICAgLnJlcmVuZGVyKFwiZGF0YS12LTdiYTViZDkwXCIsIGVzRXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtN2JhNWJkOTBcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvQXBwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gODdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///87\n");

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};$jscomp.getGlobal=function(a){return\"undefined\"!=typeof window&&window===a?a:\"undefined\"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX=\"jscomp_symbol_\";\n$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.Symbol=function(){var a=0;return function(b){return $jscomp.SYMBOL_PREFIX+(b||\"\")+a++}}();\n$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol(\"iterator\"));\"function\"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var b=0;return $jscomp.iteratorPrototype(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})};\n$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var b=a[Symbol.iterator];return b?b.call(a):$jscomp.arrayIterator(a)};\n$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(\".\");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};$jscomp.FORCE_POLYFILL_PROMISE=!1;\n$jscomp.polyfill(\"Promise\",function(a){function b(){this.batch_=null}function c(a){return a instanceof e?a:new e(function(b,c){b(a)})}if(a&&!$jscomp.FORCE_POLYFILL_PROMISE)return a;b.prototype.asyncExecute=function(a){null==this.batch_&&(this.batch_=[],this.asyncExecuteBatch_());this.batch_.push(a);return this};b.prototype.asyncExecuteBatch_=function(){var a=this;this.asyncExecuteFunction(function(){a.executeBatch_()})};var d=$jscomp.global.setTimeout;b.prototype.asyncExecuteFunction=function(a){d(a,\n0)};b.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var a=this.batch_;this.batch_=[];for(var b=0;b<a.length;++b){var c=a[b];delete a[b];try{c()}catch(l){this.asyncThrow_(l)}}}this.batch_=null};b.prototype.asyncThrow_=function(a){this.asyncExecuteFunction(function(){throw a;})};var e=function(a){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];var b=this.createResolveAndReject_();try{a(b.resolve,b.reject)}catch(k){b.reject(k)}};e.prototype.createResolveAndReject_=\nfunction(){function a(a){return function(d){c||(c=!0,a.call(b,d))}}var b=this,c=!1;return{resolve:a(this.resolveTo_),reject:a(this.reject_)}};e.prototype.resolveTo_=function(a){if(a===this)this.reject_(new TypeError(\"A Promise cannot resolve to itself\"));else if(a instanceof e)this.settleSameAsPromise_(a);else{a:switch(typeof a){case \"object\":var b=null!=a;break a;case \"function\":b=!0;break a;default:b=!1}b?this.resolveToNonPromiseObj_(a):this.fulfill_(a)}};e.prototype.resolveToNonPromiseObj_=function(a){var b=\nvoid 0;try{b=a.then}catch(k){this.reject_(k);return}\"function\"==typeof b?this.settleSameAsThenable_(b,a):this.fulfill_(a)};e.prototype.reject_=function(a){this.settle_(2,a)};e.prototype.fulfill_=function(a){this.settle_(1,a)};e.prototype.settle_=function(a,b){if(0!=this.state_)throw Error(\"Cannot settle(\"+a+\", \"+b|\"): Promise already settled in state\"+this.state_);this.state_=a;this.result_=b;this.executeOnSettledCallbacks_()};e.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var a=\nthis.onSettledCallbacks_,b=0;b<a.length;++b)a[b].call(),a[b]=null;this.onSettledCallbacks_=null}};var f=new b;e.prototype.settleSameAsPromise_=function(a){var b=this.createResolveAndReject_();a.callWhenSettled_(b.resolve,b.reject)};e.prototype.settleSameAsThenable_=function(a,b){var c=this.createResolveAndReject_();try{a.call(b,c.resolve,c.reject)}catch(l){c.reject(l)}};e.prototype.then=function(a,b){function c(a,b){return\"function\"==typeof a?function(b){try{d(a(b))}catch(v){f(v)}}:b}var d,f,g=new e(function(a,\nb){d=a;f=b});this.callWhenSettled_(c(a,d),c(b,f));return g};e.prototype[\"catch\"]=function(a){return this.then(void 0,a)};e.prototype.callWhenSettled_=function(a,b){function c(){switch(d.state_){case 1:a(d.result_);break;case 2:b(d.result_);break;default:throw Error(\"Unexpected state: \"+d.state_);}}var d=this;null==this.onSettledCallbacks_?f.asyncExecute(c):this.onSettledCallbacks_.push(function(){f.asyncExecute(c)})};e.resolve=c;e.reject=function(a){return new e(function(b,c){c(a)})};e.race=function(a){return new e(function(b,\nd){for(var e=$jscomp.makeIterator(a),f=e.next();!f.done;f=e.next())c(f.value).callWhenSettled_(b,d)})};e.all=function(a){var b=$jscomp.makeIterator(a),d=b.next();return d.done?c([]):new e(function(a,e){function f(b){return function(c){g[b]=c;h--;0==h&&a(g)}}var g=[],h=0;do g.push(void 0),h++,c(d.value).callWhenSettled_(f(g.length-1),e),d=b.next();while(!d.done)})};return e},\"es6\",\"es3\");\n$jscomp.iteratorFromArray=function(a,b){$jscomp.initSymbolIterator();a instanceof String&&(a+=\"\");var c=0,d={next:function(){if(c<a.length){var e=c++;return{value:b(e,a[e]),done:!1}}d.next=function(){return{done:!0,value:void 0}};return d.next()}};d[Symbol.iterator]=function(){return d};return d};$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}};\n$jscomp.polyfill(\"Array.prototype.find\",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},\"es6\",\"es3\");var COMPILED=!0,goog=goog||{};goog.global=this;goog.isDef=function(a){return void 0!==a};goog.exportPath_=function(a,b,c){a=a.split(\".\");c=c||goog.global;a[0]in c||!c.execScript||c.execScript(\"var \"+a[0]);for(var d;a.length&&(d=a.shift());)!a.length&&goog.isDef(b)?c[d]=b:c=c[d]?c[d]:c[d]={}};\ngoog.define=function(a,b){var c=b;COMPILED||(goog.global.CLOSURE_UNCOMPILED_DEFINES&&Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES,a)?c=goog.global.CLOSURE_UNCOMPILED_DEFINES[a]:goog.global.CLOSURE_DEFINES&&Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES,a)&&(c=goog.global.CLOSURE_DEFINES[a]));goog.exportPath_(a,c)};goog.DEBUG=!0;goog.LOCALE=\"en\";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!0;\ngoog.provide=function(a){if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace \"'+a+'\" already declared.');delete goog.implicitNamespaces_[a];for(var b=a;(b=b.substring(0,b.lastIndexOf(\".\")))&&!goog.getObjectByName(b);)goog.implicitNamespaces_[b]=!0}goog.exportPath_(a)};goog.forwardDeclare=function(a){};COMPILED||(goog.isProvided_=function(a){return!goog.implicitNamespaces_[a]&&goog.isDefAndNotNull(goog.getObjectByName(a))},goog.implicitNamespaces_={});\ngoog.getObjectByName=function(a,b){for(var c=a.split(\".\"),d=b||goog.global,e;e=c.shift();)if(goog.isDefAndNotNull(d[e]))d=d[e];else return null;return d};goog.globalize=function(a,b){var c=b||goog.global,d;for(d in a)c[d]=a[d]};goog.addDependency=function(a,b,c){if(goog.DEPENDENCIES_ENABLED){var d;a=a.replace(/\\\\/g,\"/\");for(var e=goog.dependencies_,f=0;d=b[f];f++)e.nameToPath[d]=a;for(d=0;b=c[d];d++)a in e.requires||(e.requires[a]={}),e.requires[a][b]=!0}};goog.ENABLE_DEBUG_LOADER=!1;\ngoog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};goog.require=function(a){if(!COMPILED){if(goog.isProvided_(a))return null;if(goog.ENABLE_DEBUG_LOADER){var b=goog.getPathFromDeps_(a);if(b)return goog.included_[b]=!0,goog.writeScripts_(),null}a=\"goog.require could not find: \"+a;goog.logToConsole_(a);throw Error(a);}};goog.basePath=\"\";goog.global.CLOSURE_NO_DEPS=!0;goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;\ngoog.DEPENDENCIES_ENABLED&&(goog.included_={},goog.dependencies_={nameToPath:{},requires:{},visited:{},written:{}},goog.inHtmlDocument_=function(){var a=goog.global.document;return\"undefined\"!=typeof a&&\"write\"in a},goog.findBasePath_=function(){if(goog.global.CLOSURE_BASE_PATH)goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_())for(var a=goog.global.document.getElementsByTagName(\"script\"),b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf(\"?\");d=-1==d?c.length:d;if(\"base.js\"==\nc.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}},goog.importScript_=function(a,b){(goog.global.CLOSURE_IMPORT_SCRIPT||goog.writeScriptTag_)(a,b)&&(goog.dependencies_.written[a]=!0)},goog.writeScriptTag_=function(a,b){if(goog.inHtmlDocument_()){var c=goog.global.document;if(\"complete\"==c.readyState){if(/\\bdeps.js$/.test(a))return!1;throw Error('Cannot write \"'+a+'\" after document load');}void 0===b?c.write('<script type=\"text/javascript\" src=\"'+a+'\">\\x3c/script>'):c.write('<script type=\"text/javascript\">'+\nb+\"\\x3c/script>\");return!0}return!1},goog.writeScripts_=function(){function a(e){if(!(e in d.written)){if(!(e in d.visited)&&(d.visited[e]=!0,e in d.requires))for(var f in d.requires[e])if(!goog.isProvided_(f))if(f in d.nameToPath)a(d.nameToPath[f]);else throw Error(\"Undefined nameToPath for \"+f);e in c||(c[e]=!0,b.push(e))}}var b=[],c={},d=goog.dependencies_;for(f in goog.included_)d.written[f]||a(f);for(var e=0;e<b.length;e++){var f=b[e];goog.dependencies_.written[f]=!0}for(e=0;e<b.length;e++)(f=\nb[e])&&goog.importScript_(goog.basePath+f)},goog.getPathFromDeps_=function(a){return a in goog.dependencies_.nameToPath?goog.dependencies_.nameToPath[a]:null},goog.findBasePath_(),goog.global.CLOSURE_NO_DEPS||goog.importScript_(goog.basePath+\"deps.js\"));goog.isDefAndNotNull=function(a){return null!=a};goog.isString=function(a){return\"string\"==typeof a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c)};goog.exportProperty=function(a,b,c){a[b]=c};\ngoog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){var d=Array.prototype.slice.call(arguments,2);return b.prototype[c].apply(a,d)}};COMPILED||(goog.global.COMPILED=COMPILED);/*\n\n Copyright 2016 Google Inc.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\ngoog.asserts={};goog.asserts.ENABLE_ASSERTS=!0;goog.asserts.assert=function(){};goog.asserts.patchAssert_=function(){var a=console.assert;a?a.bind||(console.assert=function(){a.apply(console,arguments)}):console.assert=function(){}};goog.asserts.ENABLE_ASSERTS&&(goog.asserts.patchAssert_(),goog.asserts.assert=console.assert.bind(console));var shaka={abr:{}};shaka.abr.Ewma=function(a){goog.asserts.assert(0<a,\"expected halfLife to be positive\");this.alpha_=Math.exp(Math.log(.5)/a);this.totalWeight_=this.estimate_=0};shaka.abr.Ewma.prototype.sample=function(a,b){var c=Math.pow(this.alpha_,a);c=b*(1-c)+c*this.estimate_;isNaN(c)||(this.estimate_=c,this.totalWeight_+=a)};shaka.abr.Ewma.prototype.getEstimate=function(){return this.estimate_/(1-Math.pow(this.alpha_,this.totalWeight_))};shaka.abr.EwmaBandwidthEstimator=function(){this.fast_=new shaka.abr.Ewma(2);this.slow_=new shaka.abr.Ewma(5);this.bytesSampled_=0;this.minTotalBytes_=128E3;this.minBytes_=16E3};shaka.abr.EwmaBandwidthEstimator.prototype.sample=function(a,b){if(!(b<this.minBytes_)){var c=8E3*b/a,d=a/1E3;this.bytesSampled_+=b;this.fast_.sample(d,c);this.slow_.sample(d,c)}};\nshaka.abr.EwmaBandwidthEstimator.prototype.getBandwidthEstimate=function(a){return this.bytesSampled_<this.minTotalBytes_?a:Math.min(this.fast_.getEstimate(),this.slow_.getEstimate())};shaka.abr.EwmaBandwidthEstimator.prototype.hasGoodEstimate=function(){return this.bytesSampled_>=this.minTotalBytes_};shaka.log={};shaka.log.Level={NONE:0,ERROR:1,WARNING:2,INFO:3,DEBUG:4,V1:5,V2:6};shaka.log.MAX_LOG_LEVEL=4;shaka.log.alwaysWarn=function(){};shaka.log.error=function(){};shaka.log.warning=function(){};shaka.log.info=function(){};shaka.log.debug=function(){};shaka.log.v1=function(){};shaka.log.v2=function(){};\nwindow.console&&window.console.log.bind&&(shaka.log.alwaysWarn=console.warn.bind(console),goog.DEBUG?(shaka.log.setLevel=function(a){var b=function(){},c=shaka.log,d=shaka.log.Level;shaka.log.currentLevel=a;c.error=a>=d.ERROR?console.error.bind(console):b;c.warning=a>=d.WARNING?console.warn.bind(console):b;c.info=a>=d.INFO?console.info.bind(console):b;c.debug=a>=d.DEBUG?console.log.bind(console):b;c.v1=a>=d.V1?console.debug.bind(console):b;c.v2=a>=d.V2?console.debug.bind(console):b},shaka.log.setLevel(shaka.log.MAX_LOG_LEVEL)):\n(shaka.log.MAX_LOG_LEVEL>=shaka.log.Level.ERROR&&(shaka.log.error=console.error.bind(console)),shaka.log.MAX_LOG_LEVEL>=shaka.log.Level.WARNING&&(shaka.log.warning=console.warn.bind(console)),shaka.log.MAX_LOG_LEVEL>=shaka.log.Level.INFO&&(shaka.log.info=console.info.bind(console)),shaka.log.MAX_LOG_LEVEL>=shaka.log.Level.DEBUG&&(shaka.log.debug=console.log.bind(console)),shaka.log.MAX_LOG_LEVEL>=shaka.log.Level.V1&&(shaka.log.v1=console.debug.bind(console)),shaka.log.MAX_LOG_LEVEL>=shaka.log.Level.V2&&\n(shaka.log.v2=console.debug.bind(console))));shaka.util={};shaka.util.Error=function(a,b,c,d){this.severity=a;this.category=b;this.code=c;this.data=Array.prototype.slice.call(arguments,3);this.handled=!1;if(goog.DEBUG){var e=\"UNKNOWN\",f=\"UNKNOWN\",g;for(g in shaka.util.Error.Category)shaka.util.Error.Category[g]==this.category&&(e=g);for(g in shaka.util.Error.Code)shaka.util.Error.Code[g]==this.code&&(f=g);this.message=\"Shaka Error \"+e+\".\"+f+\" (\"+this.data.toString()+\")\";try{throw Error(this.message);}catch(h){this.stack=h.stack}}};\ngoog.exportSymbol(\"shaka.util.Error\",shaka.util.Error);shaka.util.Error.prototype.toString=function(){return\"shaka.util.Error \"+JSON.stringify(this,null,\"  \")};shaka.util.Error.Severity={RECOVERABLE:1,CRITICAL:2};goog.exportProperty(shaka.util.Error,\"Severity\",shaka.util.Error.Severity);shaka.util.Error.Category={NETWORK:1,TEXT:2,MEDIA:3,MANIFEST:4,STREAMING:5,DRM:6,PLAYER:7,CAST:8,STORAGE:9};goog.exportProperty(shaka.util.Error,\"Category\",shaka.util.Error.Category);\nshaka.util.Error.Code={UNSUPPORTED_SCHEME:1E3,BAD_HTTP_STATUS:1001,HTTP_ERROR:1002,TIMEOUT:1003,MALFORMED_DATA_URI:1004,UNKNOWN_DATA_URI_ENCODING:1005,REQUEST_FILTER_ERROR:1006,RESPONSE_FILTER_ERROR:1007,INVALID_TEXT_HEADER:2E3,INVALID_TEXT_CUE:2001,UNABLE_TO_DETECT_ENCODING:2003,BAD_ENCODING:2004,INVALID_XML:2005,INVALID_MP4_TTML:2007,INVALID_MP4_VTT:2008,UNABLE_TO_EXTRACT_CUE_START_TIME:2009,BUFFER_READ_OUT_OF_BOUNDS:3E3,JS_INTEGER_OVERFLOW:3001,EBML_OVERFLOW:3002,EBML_BAD_FLOATING_POINT_SIZE:3003,\nMP4_SIDX_WRONG_BOX_TYPE:3004,MP4_SIDX_INVALID_TIMESCALE:3005,MP4_SIDX_TYPE_NOT_SUPPORTED:3006,WEBM_CUES_ELEMENT_MISSING:3007,WEBM_EBML_HEADER_ELEMENT_MISSING:3008,WEBM_SEGMENT_ELEMENT_MISSING:3009,WEBM_INFO_ELEMENT_MISSING:3010,WEBM_DURATION_ELEMENT_MISSING:3011,WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING:3012,WEBM_CUE_TIME_ELEMENT_MISSING:3013,MEDIA_SOURCE_OPERATION_FAILED:3014,MEDIA_SOURCE_OPERATION_THREW:3015,VIDEO_ERROR:3016,QUOTA_EXCEEDED_ERROR:3017,UNABLE_TO_GUESS_MANIFEST_TYPE:4E3,DASH_INVALID_XML:4001,\nDASH_NO_SEGMENT_INFO:4002,DASH_EMPTY_ADAPTATION_SET:4003,DASH_EMPTY_PERIOD:4004,DASH_WEBM_MISSING_INIT:4005,DASH_UNSUPPORTED_CONTAINER:4006,DASH_PSSH_BAD_ENCODING:4007,DASH_NO_COMMON_KEY_SYSTEM:4008,DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED:4009,DASH_CONFLICTING_KEY_IDS:4010,UNPLAYABLE_PERIOD:4011,RESTRICTIONS_CANNOT_BE_MET:4012,NO_PERIODS:4014,HLS_PLAYLIST_HEADER_MISSING:4015,INVALID_HLS_TAG:4016,HLS_INVALID_PLAYLIST_HIERARCHY:4017,DASH_DUPLICATE_REPRESENTATION_ID:4018,HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND:4020,\nHLS_COULD_NOT_GUESS_MIME_TYPE:4021,HLS_MASTER_PLAYLIST_NOT_PROVIDED:4022,HLS_REQUIRED_ATTRIBUTE_MISSING:4023,HLS_REQUIRED_TAG_MISSING:4024,HLS_COULD_NOT_GUESS_CODECS:4025,HLS_KEYFORMATS_NOT_SUPPORTED:4026,DASH_UNSUPPORTED_XLINK_ACTUATE:4027,DASH_XLINK_DEPTH_LIMIT:4028,HLS_COULD_NOT_PARSE_SEGMENT_START_TIME:4030,INVALID_STREAMS_CHOSEN:5005,NO_RECOGNIZED_KEY_SYSTEMS:6E3,REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE:6001,FAILED_TO_CREATE_CDM:6002,FAILED_TO_ATTACH_TO_VIDEO:6003,INVALID_SERVER_CERTIFICATE:6004,\nFAILED_TO_CREATE_SESSION:6005,FAILED_TO_GENERATE_LICENSE_REQUEST:6006,LICENSE_REQUEST_FAILED:6007,LICENSE_RESPONSE_REJECTED:6008,ENCRYPTED_CONTENT_WITHOUT_DRM_INFO:6010,NO_LICENSE_SERVER_GIVEN:6012,OFFLINE_SESSION_REMOVED:6013,EXPIRED:6014,LOAD_INTERRUPTED:7E3,CAST_API_UNAVAILABLE:8E3,NO_CAST_RECEIVERS:8001,ALREADY_CASTING:8002,UNEXPECTED_CAST_ERROR:8003,CAST_CANCELED_BY_USER:8004,CAST_CONNECTION_TIMED_OUT:8005,CAST_RECEIVER_APP_UNAVAILABLE:8006,STORAGE_NOT_SUPPORTED:9E3,INDEXED_DB_ERROR:9001,OPERATION_ABORTED:9002,\nREQUESTED_ITEM_NOT_FOUND:9003,MALFORMED_OFFLINE_URI:9004,CANNOT_STORE_LIVE_OFFLINE:9005,STORE_ALREADY_IN_PROGRESS:9006,NO_INIT_DATA_FOR_OFFLINE:9007,LOCAL_PLAYER_INSTANCE_REQUIRED:9008,CONTENT_UNSUPPORTED_BY_BROWSER:9009,UNSUPPORTED_UPGRADE_REQUEST:9010};goog.exportProperty(shaka.util.Error,\"Code\",shaka.util.Error.Code);goog.uri={};goog.uri.utils={};goog.uri.utils.splitRe_=/^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$/;goog.uri.utils.ComponentIndex={SCHEME:1,USER_INFO:2,DOMAIN:3,PORT:4,PATH:5,QUERY_DATA:6,FRAGMENT:7};goog.uri.utils.split=function(a){return a.match(goog.uri.utils.splitRe_)};goog.Uri=function(a){var b;a instanceof goog.Uri?(this.setScheme(a.getScheme()),this.setUserInfo(a.getUserInfo()),this.setDomain(a.getDomain()),this.setPort(a.getPort()),this.setPath(a.getPath()),this.setQueryData(a.getQueryData().clone()),this.setFragment(a.getFragment())):a&&(b=goog.uri.utils.split(String(a)))?(this.setScheme(b[goog.uri.utils.ComponentIndex.SCHEME]||\"\",!0),this.setUserInfo(b[goog.uri.utils.ComponentIndex.USER_INFO]||\"\",!0),this.setDomain(b[goog.uri.utils.ComponentIndex.DOMAIN]||\n\"\",!0),this.setPort(b[goog.uri.utils.ComponentIndex.PORT]),this.setPath(b[goog.uri.utils.ComponentIndex.PATH]||\"\",!0),this.setQueryData(b[goog.uri.utils.ComponentIndex.QUERY_DATA]||\"\",!0),this.setFragment(b[goog.uri.utils.ComponentIndex.FRAGMENT]||\"\",!0)):this.queryData_=new goog.Uri.QueryData(null,null)};goog.Uri.prototype.scheme_=\"\";goog.Uri.prototype.userInfo_=\"\";goog.Uri.prototype.domain_=\"\";goog.Uri.prototype.port_=null;goog.Uri.prototype.path_=\"\";goog.Uri.prototype.fragment_=\"\";\ngoog.Uri.prototype.toString=function(){var a=[],b=this.getScheme();b&&a.push(goog.Uri.encodeSpecialChars_(b,goog.Uri.reDisallowedInSchemeOrUserInfo_,!0),\":\");if(b=this.getDomain()){a.push(\"//\");var c=this.getUserInfo();c&&a.push(goog.Uri.encodeSpecialChars_(c,goog.Uri.reDisallowedInSchemeOrUserInfo_,!0),\"@\");a.push(goog.Uri.removeDoubleEncoding_(encodeURIComponent(b)));b=this.getPort();null!=b&&a.push(\":\",String(b))}if(b=this.getPath())this.hasDomain()&&\"/\"!=b.charAt(0)&&a.push(\"/\"),a.push(goog.Uri.encodeSpecialChars_(b,\n\"/\"==b.charAt(0)?goog.Uri.reDisallowedInAbsolutePath_:goog.Uri.reDisallowedInRelativePath_,!0));(b=this.getEncodedQuery())&&a.push(\"?\",b);(b=this.getFragment())&&a.push(\"#\",goog.Uri.encodeSpecialChars_(b,goog.Uri.reDisallowedInFragment_));return a.join(\"\")};\ngoog.Uri.prototype.resolve=function(a){var b=this.clone();\"data\"===b.scheme_&&(b=new goog.Uri);var c=a.hasScheme();c?b.setScheme(a.getScheme()):c=a.hasUserInfo();c?b.setUserInfo(a.getUserInfo()):c=a.hasDomain();c?b.setDomain(a.getDomain()):c=a.hasPort();var d=a.getPath();if(c)b.setPort(a.getPort());else if(c=a.hasPath()){if(\"/\"!=d.charAt(0))if(this.hasDomain()&&!this.hasPath())d=\"/\"+d;else{var e=b.getPath().lastIndexOf(\"/\");-1!=e&&(d=b.getPath().substr(0,e+1)+d)}d=goog.Uri.removeDotSegments(d)}c?\nb.setPath(d):c=a.hasQuery();c?b.setQueryData(a.getQueryData().clone()):c=a.hasFragment();c&&b.setFragment(a.getFragment());return b};goog.Uri.prototype.clone=function(){return new goog.Uri(this)};goog.Uri.prototype.getScheme=function(){return this.scheme_};goog.Uri.prototype.setScheme=function(a,b){if(this.scheme_=b?goog.Uri.decodeOrEmpty_(a,!0):a)this.scheme_=this.scheme_.replace(/:$/,\"\");return this};goog.Uri.prototype.hasScheme=function(){return!!this.scheme_};goog.Uri.prototype.getUserInfo=function(){return this.userInfo_};\ngoog.Uri.prototype.setUserInfo=function(a,b){this.userInfo_=b?goog.Uri.decodeOrEmpty_(a):a;return this};goog.Uri.prototype.hasUserInfo=function(){return!!this.userInfo_};goog.Uri.prototype.getDomain=function(){return this.domain_};goog.Uri.prototype.setDomain=function(a,b){this.domain_=b?goog.Uri.decodeOrEmpty_(a,!0):a;return this};goog.Uri.prototype.hasDomain=function(){return!!this.domain_};goog.Uri.prototype.getPort=function(){return this.port_};\ngoog.Uri.prototype.setPort=function(a){if(a){a=Number(a);if(isNaN(a)||0>a)throw Error(\"Bad port number \"+a);this.port_=a}else this.port_=null;return this};goog.Uri.prototype.hasPort=function(){return null!=this.port_};goog.Uri.prototype.getPath=function(){return this.path_};goog.Uri.prototype.setPath=function(a,b){this.path_=b?goog.Uri.decodeOrEmpty_(a,!0):a;return this};goog.Uri.prototype.hasPath=function(){return!!this.path_};goog.Uri.prototype.hasQuery=function(){return\"\"!==this.queryData_.toString()};\ngoog.Uri.prototype.setQueryData=function(a,b){a instanceof goog.Uri.QueryData?this.queryData_=a:(b||(a=goog.Uri.encodeSpecialChars_(a,goog.Uri.reDisallowedInQuery_)),this.queryData_=new goog.Uri.QueryData(a,null));return this};goog.Uri.prototype.getEncodedQuery=function(){return this.queryData_.toString()};goog.Uri.prototype.getDecodedQuery=function(){return this.queryData_.toDecodedString()};goog.Uri.prototype.getQueryData=function(){return this.queryData_};goog.Uri.prototype.getFragment=function(){return this.fragment_};\ngoog.Uri.prototype.setFragment=function(a,b){this.fragment_=b?goog.Uri.decodeOrEmpty_(a):a;return this};goog.Uri.prototype.hasFragment=function(){return!!this.fragment_};\ngoog.Uri.removeDotSegments=function(a){if(\"..\"==a||\".\"==a)return\"\";if(-1==a.indexOf(\"./\")&&-1==a.indexOf(\"/.\"))return a;var b=0==a.lastIndexOf(\"/\",0);a=a.split(\"/\");for(var c=[],d=0;d<a.length;){var e=a[d++];\".\"==e?b&&d==a.length&&c.push(\"\"):\"..\"==e?((1<c.length||1==c.length&&\"\"!=c[0])&&c.pop(),b&&d==a.length&&c.push(\"\")):(c.push(e),b=!0)}return c.join(\"/\")};goog.Uri.decodeOrEmpty_=function(a,b){return a?b?decodeURI(a):decodeURIComponent(a):\"\"};\ngoog.Uri.encodeSpecialChars_=function(a,b,c){return goog.isString(a)?(a=encodeURI(a).replace(b,goog.Uri.encodeChar_),c&&(a=goog.Uri.removeDoubleEncoding_(a)),a):null};goog.Uri.encodeChar_=function(a){a=a.charCodeAt(0);return\"%\"+(a>>4&15).toString(16)+(a&15).toString(16)};goog.Uri.removeDoubleEncoding_=function(a){return a.replace(/%25([0-9a-fA-F]{2})/g,\"%$1\")};goog.Uri.reDisallowedInSchemeOrUserInfo_=/[#\\/\\?@]/g;goog.Uri.reDisallowedInRelativePath_=/[#\\?:]/g;goog.Uri.reDisallowedInAbsolutePath_=/[#\\?]/g;\ngoog.Uri.reDisallowedInQuery_=/[#\\?@]/g;goog.Uri.reDisallowedInFragment_=/#/g;goog.Uri.QueryData=function(a,b){this.encodedQuery_=a||null};\ngoog.Uri.QueryData.prototype.ensureKeyMapInitialized_=function(){if(!this.keyMap_&&(this.keyMap_={},this.count_=0,this.encodedQuery_))for(var a=this.encodedQuery_.split(\"&\"),b=0;b<a.length;b++){var c=a[b].indexOf(\"=\"),d=null;if(0<=c){var e=a[b].substring(0,c);d=a[b].substring(c+1)}else e=a[b];e=decodeURIComponent(e.replace(/\\+/g,\" \"));d=d||\"\";this.add(e,decodeURIComponent(d.replace(/\\+/g,\" \")))}};goog.Uri.QueryData.prototype.keyMap_=null;goog.Uri.QueryData.prototype.count_=null;\ngoog.Uri.QueryData.prototype.getCount=function(){this.ensureKeyMapInitialized_();return this.count_};goog.Uri.QueryData.prototype.add=function(a,b){this.ensureKeyMapInitialized_();this.encodedQuery_=null;var c=this.keyMap_.hasOwnProperty(a)&&this.keyMap_[a];c||(this.keyMap_[a]=c=[]);c.push(b);this.count_++;return this};\ngoog.Uri.QueryData.prototype.toString=function(){if(this.encodedQuery_)return this.encodedQuery_;if(!this.keyMap_)return\"\";var a=[],b;for(b in this.keyMap_)for(var c=encodeURIComponent(b),d=this.keyMap_[b],e=0;e<d.length;e++){var f=c;\"\"!==d[e]&&(f+=\"=\"+encodeURIComponent(d[e]));a.push(f)}return this.encodedQuery_=a.join(\"&\")};goog.Uri.QueryData.prototype.toDecodedString=function(){return goog.Uri.decodeOrEmpty_(this.toString())};\ngoog.Uri.QueryData.prototype.clone=function(){var a=new goog.Uri.QueryData;a.encodedQuery_=this.encodedQuery_;if(this.keyMap_){var b={},c;for(c in this.keyMap_)b[c]=this.keyMap_[c].concat();a.keyMap_=b;a.count_=this.count_}return a};shaka.util.PublicPromise=function(){var a,b,c=new Promise(function(c,e){a=c;b=e});c.resolve=a;c.reject=b;return c};shaka.util.PublicPromise.prototype.resolve=function(a){};shaka.util.PublicPromise.prototype.reject=function(a){};shaka.net={};\nshaka.net.Backoff=function(a,b,c){var d=shaka.net.Backoff.defaultRetryParameters();this.maxAttempts_=null==a.maxAttempts?d.maxAttempts:a.maxAttempts;goog.asserts.assert(1<=this.maxAttempts_,\"maxAttempts should be >= 1\");this.baseDelay_=null==a.baseDelay?d.baseDelay:a.baseDelay;goog.asserts.assert(0<=this.baseDelay_,\"baseDelay should be >= 0\");this.fuzzFactor_=null==a.fuzzFactor?d.fuzzFactor:a.fuzzFactor;goog.asserts.assert(0<=this.fuzzFactor_,\"fuzzFactor should be >= 0\");this.backoffFactor_=null==\na.backoffFactor?d.backoffFactor:a.backoffFactor;goog.asserts.assert(0<=this.backoffFactor_,\"backoffFactor should be >= 0\");this.numAttempts_=0;this.nextUnfuzzedDelay_=this.baseDelay_;this.autoReset_=b||!1;this.isCanceled_=c||null;this.autoReset_&&(goog.asserts.assert(2<=this.maxAttempts_,\"maxAttempts must be >= 2 for autoReset == true\"),this.numAttempts_=1)};\nshaka.net.Backoff.prototype.attempt=function(){if(this.numAttempts_>=this.maxAttempts_)if(this.autoReset_)this.reset_();else return Promise.reject();var a=new shaka.util.PublicPromise;if(this.numAttempts_){var b=shaka.net.Backoff.fuzz_(this.nextUnfuzzedDelay_,this.fuzzFactor_);this.cancelableTimeout_(a.resolve,b);this.nextUnfuzzedDelay_*=this.backoffFactor_}else goog.asserts.assert(!this.autoReset_,\"Failed to delay with auto-reset!\"),a.resolve();this.numAttempts_++;return a};\nshaka.net.Backoff.defaultRetryParameters=function(){return{maxAttempts:2,baseDelay:1E3,backoffFactor:2,fuzzFactor:.5,timeout:0}};shaka.net.Backoff.fuzz_=function(a,b){return a*(1+(2*Math.random()-1)*b)};shaka.net.Backoff.prototype.reset_=function(){goog.asserts.assert(this.autoReset_,\"Should only be used for auto-reset!\");this.numAttempts_=1;this.nextUnfuzzedDelay_=this.baseDelay_};\nshaka.net.Backoff.prototype.cancelableTimeout_=function(a,b){if(this.isCanceled_)if(this.isCanceled_()||0==b)a();else{var c=Math.min(200,b);shaka.net.Backoff.setTimeout_(function(){this.cancelableTimeout_(a,b-c)}.bind(this),c)}else shaka.net.Backoff.setTimeout_(a,b)};shaka.net.Backoff.setTimeout_=function(a,b){return window.setTimeout(a,b)};shaka.util.ConfigUtils={};\nshaka.util.ConfigUtils.mergeConfigObjects=function(a,b,c,d,e){goog.asserts.assert(a,\"Destination config must not be null!\");var f=e in d,g;for(g in b){var h=e+\".\"+g,k=f?d[e]:c[g];f||g in a?void 0===b[g]?void 0===k||f?delete a[g]:a[g]=k:k.constructor==Object&&b[g]&&b[g].constructor==Object?(a[g]||(goog.asserts.assert(f,\"Null destination without ignoreKeys!\"),a[g]=k),shaka.util.ConfigUtils.mergeConfigObjects(a[g],b[g],k,d,h)):typeof b[g]!=typeof k||null==b[g]||b[g].constructor!=k.constructor?shaka.log.error(\"Invalid config, wrong type for \"+\nh):(\"function\"==typeof a[g]&&a[g].length!=b[g].length&&shaka.log.warning(\"Invalid config, wrong number of arguments for \"+h),a[g]=b[g]):shaka.log.error(\"Invalid config, unrecognized key \"+h)}};\nshaka.util.ConfigUtils.cloneObject=function(a){var b=[],c=function(a){switch(typeof a){case \"undefined\":case \"boolean\":case \"number\":case \"string\":case \"symbol\":case \"function\":return a;default:if(!a)return a;if(0<=b.indexOf(a))return null;var d=a.constructor==Array;if(a.constructor!=Object&&!d)return null;b.push(a);var f=d?[]:{},g;for(g in a)f[g]=c(a[g]);d&&(f.length=a.length);return f}};return c(a)};shaka.util.Functional={};shaka.util.Functional.createFallbackPromiseChain=function(a,b){return a.reduce(function(a,b,e){return b[\"catch\"](a.bind(null,e))}.bind(null,b),Promise.reject())};shaka.util.Functional.collapseArrays=function(a,b){return a.concat(b)};shaka.util.Functional.noop=function(){};shaka.util.Functional.isNotNull=function(a){return null!=a};shaka.util.Functional.isNotDuplicate=function(a,b,c){return c.indexOf(a)==b};shaka.util.IDestroyable=function(){};shaka.util.IDestroyable.prototype.destroy=function(){};shaka.net.NetworkingEngine=function(a){this.destroyed_=!1;this.requests_=[];this.requestFilters_=[];this.responseFilters_=[];this.onSegmentDownloaded_=a||null};goog.exportSymbol(\"shaka.net.NetworkingEngine\",shaka.net.NetworkingEngine);shaka.net.NetworkingEngine.RequestType={MANIFEST:0,SEGMENT:1,LICENSE:2,APP:3};goog.exportProperty(shaka.net.NetworkingEngine,\"RequestType\",shaka.net.NetworkingEngine.RequestType);shaka.net.NetworkingEngine.PluginPriority={FALLBACK:1,PREFERRED:2,APPLICATION:3};\ngoog.exportProperty(shaka.net.NetworkingEngine,\"PluginPriority\",shaka.net.NetworkingEngine.PluginPriority);shaka.net.NetworkingEngine.schemes_={};shaka.net.NetworkingEngine.registerScheme=function(a,b,c){goog.asserts.assert(void 0==c||0<c,\"explicit priority must be > 0\");c=c||shaka.net.NetworkingEngine.PluginPriority.APPLICATION;var d=shaka.net.NetworkingEngine.schemes_[a];if(!d||c>=d.priority)shaka.net.NetworkingEngine.schemes_[a]={priority:c,plugin:b}};\ngoog.exportProperty(shaka.net.NetworkingEngine,\"registerScheme\",shaka.net.NetworkingEngine.registerScheme);shaka.net.NetworkingEngine.unregisterScheme=function(a){delete shaka.net.NetworkingEngine.schemes_[a]};goog.exportProperty(shaka.net.NetworkingEngine,\"unregisterScheme\",shaka.net.NetworkingEngine.unregisterScheme);shaka.net.NetworkingEngine.prototype.registerRequestFilter=function(a){this.requestFilters_.push(a)};\ngoog.exportProperty(shaka.net.NetworkingEngine.prototype,\"registerRequestFilter\",shaka.net.NetworkingEngine.prototype.registerRequestFilter);shaka.net.NetworkingEngine.prototype.unregisterRequestFilter=function(a){var b=this.requestFilters_;a=b.indexOf(a);0<=a&&b.splice(a,1)};goog.exportProperty(shaka.net.NetworkingEngine.prototype,\"unregisterRequestFilter\",shaka.net.NetworkingEngine.prototype.unregisterRequestFilter);\nshaka.net.NetworkingEngine.prototype.clearAllRequestFilters=function(){this.requestFilters_=[]};goog.exportProperty(shaka.net.NetworkingEngine.prototype,\"clearAllRequestFilters\",shaka.net.NetworkingEngine.prototype.clearAllRequestFilters);shaka.net.NetworkingEngine.prototype.registerResponseFilter=function(a){this.responseFilters_.push(a)};goog.exportProperty(shaka.net.NetworkingEngine.prototype,\"registerResponseFilter\",shaka.net.NetworkingEngine.prototype.registerResponseFilter);\nshaka.net.NetworkingEngine.prototype.unregisterResponseFilter=function(a){var b=this.responseFilters_;a=b.indexOf(a);0<=a&&b.splice(a,1)};goog.exportProperty(shaka.net.NetworkingEngine.prototype,\"unregisterResponseFilter\",shaka.net.NetworkingEngine.prototype.unregisterResponseFilter);shaka.net.NetworkingEngine.prototype.clearAllResponseFilters=function(){this.responseFilters_=[]};goog.exportProperty(shaka.net.NetworkingEngine.prototype,\"clearAllResponseFilters\",shaka.net.NetworkingEngine.prototype.clearAllResponseFilters);\nshaka.net.NetworkingEngine.defaultRetryParameters=shaka.net.Backoff.defaultRetryParameters;shaka.net.NetworkingEngine.makeRequest=function(a,b){return{uris:a,method:\"GET\",body:null,headers:{},allowCrossSiteCredentials:!1,retryParameters:b}};shaka.net.NetworkingEngine.prototype.destroy=function(){var a=shaka.util.Functional;this.destroyed_=!0;this.requestFilters_=[];this.responseFilters_=[];for(var b=[],c=0;c<this.requests_.length;++c)b.push(this.requests_[c][\"catch\"](a.noop));return Promise.all(b)};\ngoog.exportProperty(shaka.net.NetworkingEngine.prototype,\"destroy\",shaka.net.NetworkingEngine.prototype.destroy);\nshaka.net.NetworkingEngine.prototype.request=function(a,b,c){var d=c||function(){return!1},e=shaka.util.ConfigUtils.cloneObject;if(this.destroyed_)return Promise.reject();goog.asserts.assert(b.uris&&b.uris.length,\"Request without URIs!\");b.method=b.method||\"GET\";b.headers=b.headers||{};b.retryParameters=b.retryParameters?e(b.retryParameters):shaka.net.NetworkingEngine.defaultRetryParameters();b.uris=e(b.uris);var f=Date.now(),g=Promise.resolve();this.requestFilters_.forEach(function(c){g=g.then(c.bind(null,\na,b))});g=g[\"catch\"](function(a){throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.NETWORK,shaka.util.Error.Code.REQUEST_FILTER_ERROR,a);});g=g.then(function(){var e=Date.now()-f,g=new shaka.net.Backoff(b.retryParameters,!1,c);return g.attempt().then(function(){return this.send_(a,b,g,0,e,d)}.bind(this))}.bind(this));this.requests_.push(g);return g.then(function(b){0<=this.requests_.indexOf(g)&&this.requests_.splice(this.requests_.indexOf(g),1);if(this.onSegmentDownloaded_&&\n!b.fromCache&&a==shaka.net.NetworkingEngine.RequestType.SEGMENT)this.onSegmentDownloaded_(b.timeMs,b.data.byteLength);return b}.bind(this))[\"catch\"](function(a){a&&(goog.asserts.assert(a instanceof shaka.util.Error,\"Wrong error type\"),a.severity=shaka.util.Error.Severity.CRITICAL);0<=this.requests_.indexOf(g)&&this.requests_.splice(this.requests_.indexOf(g),1);return Promise.reject(a)}.bind(this))};goog.exportProperty(shaka.net.NetworkingEngine.prototype,\"request\",shaka.net.NetworkingEngine.prototype.request);\nshaka.net.NetworkingEngine.prototype.send_=function(a,b,c,d,e,f){if(this.destroyed_||f())return Promise.reject();var g=new goog.Uri(b.uris[d]),h=g.getScheme();h||(h=shaka.net.NetworkingEngine.getLocationProtocol_(),goog.asserts.assert(\":\"==h[h.length-1],\"location.protocol expected to end with a colon!\"),h=h.slice(0,-1),g.setScheme(h),b.uris[d]=g.toString());h=(h=shaka.net.NetworkingEngine.schemes_[h])?h.plugin:null;if(!h)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.NETWORK,shaka.util.Error.Code.UNSUPPORTED_SCHEME,g));var k=Date.now();return h(b.uris[d],b,a).then(function(b){void 0==b.timeMs&&(b.timeMs=Date.now()-k);var c=Date.now(),d=Promise.resolve();this.responseFilters_.forEach(function(c){d=d.then(function(){return Promise.resolve(c(a,b))}.bind(this))}.bind(this));d=d[\"catch\"](function(a){var b=shaka.util.Error.Severity.CRITICAL;a instanceof shaka.util.Error&&(b=a.severity);throw new shaka.util.Error(b,shaka.util.Error.Category.NETWORK,\nshaka.util.Error.Code.RESPONSE_FILTER_ERROR,a);});return d.then(function(){b.timeMs+=Date.now()-c;b.timeMs+=e;return b})}.bind(this))[\"catch\"](function(g){if(g&&g.severity==shaka.util.Error.Severity.RECOVERABLE)return d=(d+1)%b.uris.length,f()?Promise.reject():c.attempt().then(function(){return this.send_(a,b,c,d,e,f)}.bind(this),function(){throw g;});throw g;}.bind(this))};shaka.net.NetworkingEngine.getLocationProtocol_=function(){return location.protocol};shaka.util.ArrayUtils={};shaka.util.ArrayUtils.removeDuplicates=function(a,b){for(var c=[],d=0;d<a.length;++d){for(var e=!1,f=0;f<c.length&&!(e=b?b(a[d],c[f]):a[d]===c[f]);++f);e||c.push(a[d])}return c};shaka.util.ArrayUtils.indexOf=function(a,b,c){for(var d=0;d<a.length;++d)if(c(a[d],b))return d;return-1};shaka.util.ArrayUtils.remove=function(a,b){var c=a.indexOf(b);-1<c&&a.splice(c,1)};shaka.util.ArrayUtils.count=function(a,b){var c=0;a.forEach(function(a){c+=b(a)?1:0});return c};shaka.util.MultiMap=function(){this.map_={}};shaka.util.MultiMap.prototype.push=function(a,b){this.map_.hasOwnProperty(a)?this.map_[a].push(b):this.map_[a]=[b]};shaka.util.MultiMap.prototype.get=function(a){return(a=this.map_[a])?a.slice():null};shaka.util.MultiMap.prototype.getAll=function(){var a=[],b;for(b in this.map_)a.push.apply(a,this.map_[b]);return a};shaka.util.MultiMap.prototype.remove=function(a,b){var c=this.map_[a];if(c)for(var d=0;d<c.length;++d)c[d]==b&&(c.splice(d,1),--d)};\nshaka.util.MultiMap.prototype.clear=function(){this.map_={}};shaka.util.EventManager=function(){this.bindingMap_=new shaka.util.MultiMap};shaka.util.EventManager.prototype.destroy=function(){this.removeAll();this.bindingMap_=null;return Promise.resolve()};shaka.util.EventManager.prototype.listen=function(a,b,c){this.bindingMap_&&(a=new shaka.util.EventManager.Binding_(a,b,c),this.bindingMap_.push(b,a))};shaka.util.EventManager.prototype.listenOnce=function(a,b,c){this.listen(a,b,function(d){this.unlisten(a,b);c(d)}.bind(this))};\nshaka.util.EventManager.prototype.unlisten=function(a,b){if(this.bindingMap_)for(var c=this.bindingMap_.get(b)||[],d=0;d<c.length;++d){var e=c[d];e.target==a&&(e.unlisten(),this.bindingMap_.remove(b,e))}};shaka.util.EventManager.prototype.removeAll=function(){if(this.bindingMap_){for(var a=this.bindingMap_.getAll(),b=0;b<a.length;++b)a[b].unlisten();this.bindingMap_.clear()}};\nshaka.util.EventManager.Binding_=function(a,b,c){this.target=a;this.type=b;this.listener=c;this.target.addEventListener(b,c,!1)};shaka.util.EventManager.Binding_.prototype.unlisten=function(){goog.asserts.assert(this.target,\"Missing target\");this.target.removeEventListener(this.type,this.listener,!1);this.listener=this.target=null};shaka.util.FakeEvent=function(a,b){var c=b||{},d;for(d in c)this[d]=c[d];this.defaultPrevented=this.cancelable=this.bubbles=!1;this.timeStamp=window.performance&&window.performance.now?window.performance.now():Date.now();this.type=a;this.isTrusted=!1;this.target=this.currentTarget=null;this.stopped=!1};shaka.util.FakeEvent.prototype.preventDefault=function(){this.cancelable&&(this.defaultPrevented=!0)};shaka.util.FakeEvent.prototype.stopImmediatePropagation=function(){this.stopped=!0};\nshaka.util.FakeEvent.prototype.stopPropagation=function(){};shaka.util.ManifestParserUtils={};shaka.util.ManifestParserUtils.resolveUris=function(a,b){var c=shaka.util.Functional;if(0==b.length)return a;var d=b.map(function(a){return new goog.Uri(a)});return a.map(function(a){return new goog.Uri(a)}).map(function(a){return d.map(a.resolve.bind(a))}).reduce(c.collapseArrays,[]).map(function(a){return a.toString()})};\nshaka.util.ManifestParserUtils.createDrmInfo=function(a,b){return{keySystem:a,licenseServerUri:\"\",distinctiveIdentifierRequired:!1,persistentStateRequired:!1,audioRobustness:\"\",videoRobustness:\"\",serverCertificate:null,initData:b||[],keyIds:[]}};shaka.util.ManifestParserUtils.ContentType={VIDEO:\"video\",AUDIO:\"audio\",TEXT:\"text\",APPLICATION:\"application\"};shaka.util.ManifestParserUtils.TextStreamKind={SUBTITLE:\"subtitle\",CLOSED_CAPTION:\"caption\"};\nshaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS=1/15;shaka.util.MapUtils={};shaka.util.MapUtils.empty=function(a){return!a||0==Object.keys(a).length};shaka.util.MapUtils.values=function(a){return Object.keys(a).map(function(b){return a[b]})};shaka.util.MapUtils.map=function(a,b){return Object.keys(a).reduce(function(c,d){c[d]=b(a[d],d);return c},{})};shaka.util.MapUtils.every=function(a,b){return Object.keys(a).every(function(c){return b(c,a[c])})};shaka.util.MapUtils.forEach=function(a,b){Object.keys(a).forEach(function(c){b(c,a[c])})};shaka.util.MimeUtils={};shaka.util.MimeUtils.getFullType=function(a,b){var c=a;b&&(c+='; codecs=\"'+b+'\"');return c};shaka.util.MimeUtils.getExtendedType=function(a){var b=a.mimeType,c;for(c in shaka.util.MimeUtils.EXTENDED_MIME_PARAMETERS_){var d=a[c],e=shaka.util.MimeUtils.EXTENDED_MIME_PARAMETERS_[c];d&&(b+=\"; \"+e+'=\"'+d+'\"')}return b};shaka.util.MimeUtils.EXTENDED_MIME_PARAMETERS_={codecs:\"codecs\",frameRate:\"framerate\",bandwidth:\"bitrate\",width:\"width\",height:\"height\",channelsCount:\"channels\"};shaka.util.StringUtils={};shaka.util.StringUtils.fromUTF8=function(a){if(!a)return\"\";a=new Uint8Array(a);239==a[0]&&187==a[1]&&191==a[2]&&(a=a.subarray(3));a=shaka.util.StringUtils.fromCharCode_(a);a=escape(a);try{return decodeURIComponent(a)}catch(b){throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.BAD_ENCODING);}};goog.exportSymbol(\"shaka.util.StringUtils.fromUTF8\",shaka.util.StringUtils.fromUTF8);\nshaka.util.StringUtils.fromUTF16=function(a,b,c){if(!a)return\"\";if(!c&&0!=a.byteLength%2)throw shaka.log.error(\"Data has an incorrect length, must be even.\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.BAD_ENCODING);if(a instanceof ArrayBuffer)var d=a;else c=new Uint8Array(a.byteLength),c.set(new Uint8Array(a)),d=c.buffer;a=Math.floor(a.byteLength/2);c=new Uint16Array(a);d=new DataView(d);for(var e=0;e<a;e++)c[e]=d.getUint16(2*e,b);\nreturn shaka.util.StringUtils.fromCharCode_(c)};goog.exportSymbol(\"shaka.util.StringUtils.fromUTF16\",shaka.util.StringUtils.fromUTF16);\nshaka.util.StringUtils.fromBytesAutoDetect=function(a){var b=shaka.util.StringUtils,c=new Uint8Array(a);if(239==c[0]&&187==c[1]&&191==c[2])return b.fromUTF8(c);if(254==c[0]&&255==c[1])return b.fromUTF16(c.subarray(2),!1);if(255==c[0]&&254==c[1])return b.fromUTF16(c.subarray(2),!0);var d=function(a,b){return a.byteLength<=b||32<=a[b]&&126>=a[b]}.bind(null,c);shaka.log.debug(\"Unable to find byte-order-mark, making an educated guess.\");if(0==c[0]&&0==c[2])return b.fromUTF16(a,!1);if(0==c[1]&&0==c[3])return b.fromUTF16(a,\n!0);if(d(0)&&d(1)&&d(2)&&d(3))return b.fromUTF8(a);throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.UNABLE_TO_DETECT_ENCODING);};goog.exportSymbol(\"shaka.util.StringUtils.fromBytesAutoDetect\",shaka.util.StringUtils.fromBytesAutoDetect);shaka.util.StringUtils.toUTF8=function(a){a=encodeURIComponent(a);a=unescape(a);for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b.buffer};\ngoog.exportSymbol(\"shaka.util.StringUtils.toUTF8\",shaka.util.StringUtils.toUTF8);shaka.util.StringUtils.fromCharCode_=function(a){for(var b=\"\",c=0;c<a.length;c+=16E3){var d=a.subarray(c,c+16E3);b+=String.fromCharCode.apply(null,d)}return b};shaka.util.Timer=function(a){this.id_=null;this.callback_=function(){this.id_=null;a()}.bind(this)};shaka.util.Timer.prototype.cancel=function(){null!=this.id_&&(clearTimeout(this.id_),this.id_=null)};shaka.util.Timer.prototype.schedule=function(a){this.cancel();this.id_=setTimeout(this.callback_,1E3*a)};shaka.util.Timer.prototype.scheduleRepeated=function(a){this.cancel();var b=function(){this.callback_();this.id_=setTimeout(b,1E3*a)}.bind(this);this.id_=setTimeout(b,1E3*a)};shaka.util.Uint8ArrayUtils={};shaka.util.Uint8ArrayUtils.toBase64=function(a,b){var c=String.fromCharCode.apply(null,a),d=void 0==b?!0:b;c=window.btoa(c).replace(/\\+/g,\"-\").replace(/\\//g,\"_\");return d?c:c.replace(/=*$/,\"\")};goog.exportSymbol(\"shaka.util.Uint8ArrayUtils.toBase64\",shaka.util.Uint8ArrayUtils.toBase64);shaka.util.Uint8ArrayUtils.fromBase64=function(a){a=window.atob(a.replace(/-/g,\"+\").replace(/_/g,\"/\"));for(var b=new Uint8Array(a.length),c=0;c<a.length;++c)b[c]=a.charCodeAt(c);return b};\ngoog.exportSymbol(\"shaka.util.Uint8ArrayUtils.fromBase64\",shaka.util.Uint8ArrayUtils.fromBase64);shaka.util.Uint8ArrayUtils.fromHex=function(a){for(var b=new Uint8Array(a.length/2),c=0;c<a.length;c+=2)b[c/2]=window.parseInt(a.substr(c,2),16);return b};goog.exportSymbol(\"shaka.util.Uint8ArrayUtils.fromHex\",shaka.util.Uint8ArrayUtils.fromHex);shaka.util.Uint8ArrayUtils.toHex=function(a){for(var b=\"\",c=0;c<a.length;++c){var d=a[c].toString(16);1==d.length&&(d=\"0\"+d);b+=d}return b};\ngoog.exportSymbol(\"shaka.util.Uint8ArrayUtils.toHex\",shaka.util.Uint8ArrayUtils.toHex);shaka.util.Uint8ArrayUtils.equal=function(a,b){if(!a&&!b)return!0;if(!a||!b||a.length!=b.length)return!1;for(var c=0;c<a.length;++c)if(a[c]!=b[c])return!1;return!0};goog.exportSymbol(\"shaka.util.Uint8ArrayUtils.equal\",shaka.util.Uint8ArrayUtils.equal);\nshaka.util.Uint8ArrayUtils.concat=function(a){for(var b=0,c=0;c<arguments.length;++c)b+=arguments[c].length;b=new Uint8Array(b);var d=0;for(c=0;c<arguments.length;++c)b.set(arguments[c],d),d+=arguments[c].length;return b};goog.exportSymbol(\"shaka.util.Uint8ArrayUtils.concat\",shaka.util.Uint8ArrayUtils.concat);shaka.media={};\nshaka.media.DrmEngine=function(a){this.playerInterface_=a;this.video_=this.mediaKeys_=this.supportedTypes_=null;this.initialized_=!1;this.currentDrmInfo_=null;this.eventManager_=new shaka.util.EventManager;this.activeSessions_=[];this.offlineSessionIds_=[];this.allSessionsLoaded_=new shaka.util.PublicPromise;this.config_=null;this.onError_=function(b){this.allSessionsLoaded_.reject(b);a.onError(b)}.bind(this);this.keyStatusByKeyId_={};this.keyStatusTimer_=new shaka.util.Timer(this.processKeyStatusChanges_.bind(this));this.isOffline_=\nthis.destroyed_=!1;this.mediaKeyMessageEvents_=[];this.initialRequestsSent_=!1;this.expirationTimer_=new shaka.util.Timer(this.pollExpiration_.bind(this));this.expirationTimer_.scheduleRepeated(1);this.allSessionsLoaded_[\"catch\"](function(){})};\nshaka.media.DrmEngine.prototype.destroy=function(){var a=shaka.util.Functional;this.destroyed_=!0;var b=[];this.activeSessions_.forEach(function(c){c=c.session.close()[\"catch\"](a.noop);var d=new Promise(function(a){setTimeout(a,1E3)});b.push(Promise.race([c,d]))});this.allSessionsLoaded_.reject();this.eventManager_&&b.push(this.eventManager_.destroy());this.video_&&(goog.asserts.assert(!this.video_.src,\"video src must be removed first!\"),b.push(this.video_.setMediaKeys(null)[\"catch\"](a.noop)));this.expirationTimer_&&\n(this.expirationTimer_.cancel(),this.expirationTimer_=null);this.keyStatusTimer_&&(this.keyStatusTimer_.cancel(),this.keyStatusTimer_=null);this.eventManager_=this.video_=this.mediaKeys_=this.supportedTypes_=this.currentDrmInfo_=null;this.activeSessions_=[];this.offlineSessionIds_=[];this.playerInterface_=this.onError_=this.config_=null;return Promise.all(b)};shaka.media.DrmEngine.prototype.configure=function(a){this.config_=a};\nshaka.media.DrmEngine.prototype.init=function(a,b){goog.asserts.assert(this.config_,\"DrmEngine configure() must be called before init()!\");var c={},d=[];this.isOffline_=b;this.offlineSessionIds_=a.offlineSessionIds;this.prepareMediaKeyConfigs_(a,b||0<a.offlineSessionIds.length,c,d);return d.length?this.queryMediaKeys_(c,d):(this.initialized_=!0,Promise.resolve())};\nshaka.media.DrmEngine.prototype.attach=function(a){if(!this.mediaKeys_)return this.eventManager_.listenOnce(a,\"encrypted\",function(a){this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.ENCRYPTED_CONTENT_WITHOUT_DRM_INFO))}.bind(this)),Promise.resolve();this.video_=a;this.eventManager_.listenOnce(this.video_,\"play\",this.onPlay_.bind(this));a=this.video_.setMediaKeys(this.mediaKeys_);a=a[\"catch\"](function(a){return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.DRM,shaka.util.Error.Code.FAILED_TO_ATTACH_TO_VIDEO,a.message))});var b=null;this.currentDrmInfo_.serverCertificate&&this.currentDrmInfo_.serverCertificate.length&&(b=this.mediaKeys_.setServerCertificate(this.currentDrmInfo_.serverCertificate).then(function(a){a||shaka.log.warning(\"Server certificates are not supported by the key system.  The server certificate has been ignored.\")})[\"catch\"](function(a){return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.DRM,shaka.util.Error.Code.INVALID_SERVER_CERTIFICATE,a.message))}));return Promise.all([a,b]).then(function(){if(this.destroyed_)return Promise.reject();this.createOrLoad();if(!this.currentDrmInfo_.initData.length&&!this.offlineSessionIds_.length){var a=this.onEncrypted_.bind(this);this.eventManager_.listen(this.video_,\"encrypted\",a)}}.bind(this))[\"catch\"](function(a){return this.destroyed_?Promise.resolve():Promise.reject(a)}.bind(this))};\nshaka.media.DrmEngine.prototype.removeSessions=function(a){goog.asserts.assert(this.mediaKeys_||!a.length,\"Must call init() before removeSessions\");return Promise.all(a.map(function(a){return this.loadOfflineSession_(a).then(function(a){if(a){for(var b=new shaka.util.PublicPromise,c=0;c<this.activeSessions_.length;c++)if(this.activeSessions_[c].session==a){this.activeSessions_[c].updatePromise=b;break}return Promise.all([a.remove(),b])}}.bind(this))}.bind(this)))};\nshaka.media.DrmEngine.prototype.createOrLoad=function(){var a=this.currentDrmInfo_?this.currentDrmInfo_.initData:[];a.forEach(function(a){this.createTemporarySession_(a.initDataType,a.initData)}.bind(this));this.offlineSessionIds_.forEach(function(a){this.loadOfflineSession_(a)}.bind(this));a.length||this.offlineSessionIds_.length||this.allSessionsLoaded_.resolve();return this.allSessionsLoaded_};shaka.media.DrmEngine.prototype.initialized=function(){return this.initialized_};\nshaka.media.DrmEngine.prototype.keySystem=function(){return this.currentDrmInfo_?this.currentDrmInfo_.keySystem:\"\"};shaka.media.DrmEngine.prototype.getSupportedTypes=function(){return this.supportedTypes_};shaka.media.DrmEngine.prototype.getSessionIds=function(){return this.activeSessions_.map(function(a){return a.session.sessionId})};\nshaka.media.DrmEngine.prototype.getExpiration=function(){var a=this.activeSessions_.map(function(a){a=a.session.expiration;return isNaN(a)?Infinity:a});return Math.min.apply(Math,a)};shaka.media.DrmEngine.prototype.getDrmInfo=function(){return this.currentDrmInfo_};\nshaka.media.DrmEngine.prototype.prepareMediaKeyConfigs_=function(a,b,c,d){var e=this.configureClearKey_(),f=this.getDrmInfosByConfig_(a);a.periods.forEach(function(a){a.variants.forEach(function(a){e&&(a.drmInfos=[e]);f&&(a.drmInfos=f);a.drmInfos.forEach(function(e){this.fillInDrmInfoDefaults_(e);window.cast&&window.cast.__platform__&&\"com.microsoft.playready\"==e.keySystem&&(e.keySystem=\"com.chromecast.playready\");var f=c[e.keySystem];f||(f={audioCapabilities:[],videoCapabilities:[],distinctiveIdentifier:\"optional\",\npersistentState:b?\"required\":\"optional\",sessionTypes:[b?\"persistent-license\":\"temporary\"],label:e.keySystem,drmInfos:[]},c[e.keySystem]=f,d.push(e.keySystem));f.drmInfos.push(e);e.distinctiveIdentifierRequired&&(f.distinctiveIdentifier=\"required\");e.persistentStateRequired&&(f.persistentState=\"required\");var g=[];a.video&&g.push(a.video);a.audio&&g.push(a.audio);g.forEach(function(a){var b=shaka.util.ManifestParserUtils.ContentType,c=a.type==b.VIDEO?f.videoCapabilities:f.audioCapabilities;b=(a.type==\nb.VIDEO?e.videoRobustness:e.audioRobustness)||\"\";a=shaka.util.MimeUtils.getFullType(a.mimeType,a.codecs);c.push({robustness:b,contentType:a})}.bind(this))}.bind(this))}.bind(this))}.bind(this))};\nshaka.media.DrmEngine.prototype.queryMediaKeys_=function(a,b){if(1==b.length&&\"\"==b[0])return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.NO_RECOGNIZED_KEY_SYSTEMS));var c=new shaka.util.PublicPromise,d=c;[!0,!1].forEach(function(c){b.forEach(function(b){var e=a[b];e.drmInfos.some(function(a){return!!a.licenseServerUri})==c&&(0==e.audioCapabilities.length&&delete e.audioCapabilities,0==e.videoCapabilities.length&&delete e.videoCapabilities,\nd=d[\"catch\"](function(){return this.destroyed_?Promise.reject():navigator.requestMediaKeySystemAccess(b,[e])}.bind(this)))}.bind(this))}.bind(this));d=d[\"catch\"](function(){return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE))});d=d.then(function(b){if(this.destroyed_)return Promise.reject();var c=0<=navigator.userAgent.indexOf(\"Edge/\"),d=b.getConfiguration();this.supportedTypes_=\n(d.audioCapabilities||[]).concat(d.videoCapabilities||[]).map(function(a){return a.contentType});c&&(this.supportedTypes_=null);goog.asserts.assert(!this.supportedTypes_||this.supportedTypes_.length,\"We should get at least one supported MIME type\");c=a[b.keySystem];this.createCurrentDrmInfo_(b.keySystem,c,c.drmInfos);return this.currentDrmInfo_.licenseServerUri?b.createMediaKeys():Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.NO_LICENSE_SERVER_GIVEN))}.bind(this)).then(function(a){if(this.destroyed_)return Promise.reject();\nthis.mediaKeys_=a;this.initialized_=!0}.bind(this))[\"catch\"](function(a){if(this.destroyed_)return Promise.resolve();this.supportedTypes_=this.currentDrmInfo_=null;return a instanceof shaka.util.Error?Promise.reject(a):Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.FAILED_TO_CREATE_CDM,a.message))}.bind(this));c.reject();return d};\nshaka.media.DrmEngine.prototype.fillInDrmInfoDefaults_=function(a){var b=a.keySystem;if(b){if(!a.licenseServerUri){var c=this.config_.servers[b];c&&(a.licenseServerUri=c)}a.keyIds||(a.keyIds=[]);if(b=this.config_.advanced[b])a.distinctiveIdentifierRequired||(a.distinctiveIdentifierRequired=b.distinctiveIdentifierRequired),a.persistentStateRequired||(a.persistentStateRequired=b.persistentStateRequired),a.videoRobustness||(a.videoRobustness=b.videoRobustness),a.audioRobustness||(a.audioRobustness=b.audioRobustness),\na.serverCertificate||(a.serverCertificate=b.serverCertificate)}};\nshaka.media.DrmEngine.prototype.configureClearKey_=function(){if(shaka.util.MapUtils.empty(this.config_.clearKeys))return null;var a=shaka.util.StringUtils,b=shaka.util.Uint8ArrayUtils,c=[],d=[],e;for(e in this.config_.clearKeys){var f=this.config_.clearKeys[e],g=b.fromHex(e);f=b.fromHex(f);g={kty:\"oct\",kid:b.toBase64(g,!1),k:b.toBase64(f,!1)};c.push(g);d.push(g.kid)}b=JSON.stringify({keys:c});d=JSON.stringify({kids:d});a=[{initData:new Uint8Array(a.toUTF8(d)),initDataType:\"keyids\"}];return{keySystem:\"org.w3.clearkey\",\nlicenseServerUri:\"data:application/json;base64,\"+window.btoa(b),distinctiveIdentifierRequired:!1,persistentStateRequired:!1,audioRobustness:\"\",videoRobustness:\"\",serverCertificate:null,initData:a,keyIds:[]}};\nshaka.media.DrmEngine.prototype.getDrmInfosByConfig_=function(a){var b=this.config_,c=Object.keys(b.servers);return!c.length||a.periods.some(function(a){return a.variants.some(function(a){return a.drmInfos.length})})?null:c.map(function(a){return{keySystem:a,licenseServerUri:b.servers[a],distinctiveIdentifierRequired:!1,persistentStateRequired:!1,audioRobustness:\"\",videoRobustness:\"\",serverCertificate:null,initData:[],keyIds:[]}})};\nshaka.media.DrmEngine.prototype.createCurrentDrmInfo_=function(a,b,c){var d=[],e=[],f=[],g=[];this.processDrmInfos_(c,d,e,f,g);1<e.length&&shaka.log.warning(\"Multiple unique server certificates found! Only the first will be used.\");1<d.length&&shaka.log.warning(\"Multiple unique license server URIs found! Only the first will be used.\");this.currentDrmInfo_={keySystem:a,licenseServerUri:d[0],distinctiveIdentifierRequired:\"required\"==b.distinctiveIdentifier,persistentStateRequired:\"required\"==b.persistentState,\naudioRobustness:b.audioCapabilities?b.audioCapabilities[0].robustness:\"\",videoRobustness:b.videoCapabilities?b.videoCapabilities[0].robustness:\"\",serverCertificate:e[0],initData:f,keyIds:g}};\nshaka.media.DrmEngine.prototype.processDrmInfos_=function(a,b,c,d,e){function f(a,b){return a.keyId&&a.keyId==b.keyId?!0:a.initDataType==b.initDataType&&shaka.util.Uint8ArrayUtils.equal(a.initData,b.initData)}a.forEach(function(a){var g=shaka.util.ArrayUtils,k=shaka.util.Uint8ArrayUtils;-1==b.indexOf(a.licenseServerUri)&&b.push(a.licenseServerUri);a.serverCertificate&&-1==g.indexOf(c,a.serverCertificate,k.equal)&&c.push(a.serverCertificate);a.initData&&a.initData.forEach(function(a){-1==g.indexOf(d,\na,f)&&d.push(a)});if(a.keyIds)for(k=0;k<a.keyIds.length;++k)-1==e.indexOf(a.keyIds[k])&&e.push(a.keyIds[k])})};shaka.media.DrmEngine.prototype.onEncrypted_=function(a){for(var b=shaka.util.Uint8ArrayUtils,c=new Uint8Array(a.initData),d=0;d<this.activeSessions_.length;++d)if(b.equal(c,this.activeSessions_[d].initData)){shaka.log.debug(\"Ignoring duplicate init data.\");return}this.createTemporarySession_(a.initDataType,c)};\nshaka.media.DrmEngine.prototype.loadOfflineSession_=function(a){try{var b=this.mediaKeys_.createSession(\"persistent-license\")}catch(d){return a=new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.FAILED_TO_CREATE_SESSION,d.message),this.onError_(a),Promise.reject(a)}this.eventManager_.listen(b,\"message\",this.onSessionMessage_.bind(this));this.eventManager_.listen(b,\"keystatuseschange\",this.onKeyStatusesChange_.bind(this));var c={initData:null,\nsession:b,loaded:!1,oldExpiration:Infinity,updatePromise:null};this.activeSessions_.push(c);return b.load(a).then(function(a){if(!this.destroyed_){if(a)return c.loaded=!0,this.activeSessions_.every(function(a){return a.loaded})&&this.allSessionsLoaded_.resolve(),b;a=this.activeSessions_.indexOf(c);goog.asserts.assert(0<=a,\"Session must be in the array\");this.activeSessions_.splice(a,1);this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.OFFLINE_SESSION_REMOVED))}}.bind(this),\nfunction(a){if(!this.destroyed_){var b=this.activeSessions_.indexOf(c);goog.asserts.assert(0<=b,\"Session must be in the array\");this.activeSessions_.splice(b,1);this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.FAILED_TO_CREATE_SESSION,a.message))}}.bind(this))};\nshaka.media.DrmEngine.prototype.createTemporarySession_=function(a,b){try{var c=this.isOffline_?this.mediaKeys_.createSession(\"persistent-license\"):this.mediaKeys_.createSession()}catch(d){this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.FAILED_TO_CREATE_SESSION,d.message));return}this.eventManager_.listen(c,\"message\",this.onSessionMessage_.bind(this));this.eventManager_.listen(c,\"keystatuseschange\",this.onKeyStatusesChange_.bind(this));\nthis.activeSessions_.push({initData:b,session:c,loaded:!1,oldExpiration:Infinity,updatePromise:null});c.generateRequest(a,b.buffer)[\"catch\"](function(a){if(!this.destroyed_){for(var b=0;b<this.activeSessions_.length;++b)if(this.activeSessions_[b].session==c){this.activeSessions_.splice(b,1);break}this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.FAILED_TO_GENERATE_LICENSE_REQUEST,a.message))}}.bind(this))};\nshaka.media.DrmEngine.prototype.onSessionMessage_=function(a){this.delayLicenseRequest_()?this.mediaKeyMessageEvents_.push(a):this.sendLicenseRequest_(a)};shaka.media.DrmEngine.prototype.delayLicenseRequest_=function(){return this.config_.delayLicenseRequestUntilPlayed&&this.video_.paused&&!this.initialRequestsSent_};\nshaka.media.DrmEngine.prototype.sendLicenseRequest_=function(a){for(var b=a.target,c,d=0;d<this.activeSessions_.length;d++)if(this.activeSessions_[d].session==b){c=this.activeSessions_[d];break}d=shaka.net.NetworkingEngine.RequestType.LICENSE;var e=shaka.net.NetworkingEngine.makeRequest([this.currentDrmInfo_.licenseServerUri],this.config_.retryParameters);e.body=a.message;e.method=\"POST\";\"com.microsoft.playready\"!=this.currentDrmInfo_.keySystem&&\"com.chromecast.playready\"!=this.currentDrmInfo_.keySystem||\nthis.unpackPlayReadyRequest_(e);this.playerInterface_.netEngine.request(d,e).then(function(a){return this.destroyed_?Promise.reject():b.update(a.data).then(function(){var a=new shaka.util.FakeEvent(\"drmsessionupdate\");this.playerInterface_.onEvent(a);c&&(c.updatePromise&&c.updatePromise.resolve(),setTimeout(function(){c.loaded=!0;this.activeSessions_.every(function(a){return a.loaded})&&this.allSessionsLoaded_.resolve()}.bind(this),5E3))}.bind(this))}.bind(this),function(a){if(this.destroyed_)return Promise.resolve();\ngoog.asserts.assert(a instanceof shaka.util.Error,\"Wrong NetworkingEngine error type!\");a=new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.LICENSE_REQUEST_FAILED,a);this.onError_(a);c&&c.updatePromise&&c.updatePromise.reject(a)}.bind(this))[\"catch\"](function(a){if(this.destroyed_)return Promise.resolve();a=new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.LICENSE_RESPONSE_REJECTED,\na.message);this.onError_(a);c&&c.updatePromise&&c.updatePromise.reject(a)}.bind(this))};\nshaka.media.DrmEngine.prototype.unpackPlayReadyRequest_=function(a){var b=shaka.util.StringUtils.fromUTF16(a.body,!0,!0);if(-1==b.indexOf(\"PlayReadyKeyMessage\"))shaka.log.debug(\"PlayReady request is already unwrapped.\"),a.headers[\"Content-Type\"]=\"text/xml; charset=utf-8\";else{shaka.log.debug(\"Unwrapping PlayReady request.\");b=(new DOMParser).parseFromString(b,\"application/xml\");for(var c=b.getElementsByTagName(\"HttpHeader\"),d=0;d<c.length;++d){var e=c[d].querySelector(\"name\"),f=c[d].querySelector(\"value\");\ngoog.asserts.assert(e&&f,\"Malformed PlayReady headers!\");a.headers[e.textContent]=f.textContent}b=b.querySelector(\"Challenge\");goog.asserts.assert(b,\"Malformed PlayReady challenge!\");goog.asserts.assert(\"base64encoded\"==b.getAttribute(\"encoding\"),\"Unexpected PlayReady challenge encoding!\");a.body=shaka.util.Uint8ArrayUtils.fromBase64(b.textContent).buffer}};\nshaka.media.DrmEngine.prototype.onKeyStatusesChange_=function(a){a=a.target;var b;for(b=0;b<this.activeSessions_.length&&this.activeSessions_[b].session!=a;++b);goog.asserts.assert(b<this.activeSessions_.length,\"Key status change for inactive session!\");if(b!=this.activeSessions_.length){var c=!1;a.keyStatuses.forEach(function(a,d){if(\"string\"==typeof d){var e=d;d=a;a=e}if(\"com.microsoft.playready\"==this.currentDrmInfo_.keySystem&&16==d.byteLength){e=new DataView(d);var f=e.getUint32(0,!0),k=e.getUint16(4,\n!0),l=e.getUint16(6,!0);e.setUint32(0,f,!1);e.setUint16(4,k,!1);e.setUint16(6,l,!1)}\"com.microsoft.playready\"==this.currentDrmInfo_.keySystem&&\"status-pending\"==a&&(a=\"usable\");\"status-pending\"!=a&&(this.activeSessions_[b].loaded=!0,this.activeSessions_.every(function(a){return a.loaded})&&this.allSessionsLoaded_.resolve());\"expired\"==a&&(c=!0);e=shaka.util.Uint8ArrayUtils.toHex(new Uint8Array(d));this.keyStatusByKeyId_[e]=a}.bind(this));var d=a.expiration-Date.now();(0>d||c&&1E3>d)&&!this.activeSessions_[b].updatePromise&&\n(shaka.log.debug(\"Session has expired\",a),this.activeSessions_.splice(b,1),a.close());this.keyStatusTimer_.schedule(.5)}};shaka.media.DrmEngine.prototype.processKeyStatusChanges_=function(){function a(a,b){return\"expired\"==b}var b=shaka.util.MapUtils;if(!b.empty(this.keyStatusByKeyId_)&&b.every(this.keyStatusByKeyId_,a))this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.DRM,shaka.util.Error.Code.EXPIRED));this.playerInterface_.onKeyStatus(this.keyStatusByKeyId_)};\nshaka.media.DrmEngine.isBrowserSupported=function(){return!!window.MediaKeys&&!!window.navigator&&!!window.navigator.requestMediaKeySystemAccess&&!!window.MediaKeySystemAccess&&!!window.MediaKeySystemAccess.prototype.getConfiguration};\nshaka.media.DrmEngine.probeSupport=function(){goog.asserts.assert(shaka.media.DrmEngine.isBrowserSupported(),\"Must have basic EME support\");var a=[],b=[{contentType:'video/mp4; codecs=\"avc1.42E01E\"'},{contentType:'video/webm; codecs=\"vp8\"'}],c=[{videoCapabilities:b,persistentState:\"required\",sessionTypes:[\"persistent-license\"]},{videoCapabilities:b}],d={};\"org.w3.clearkey com.widevine.alpha com.microsoft.playready com.apple.fps.2_0 com.apple.fps.1_0 com.apple.fps com.adobe.primetime\".split(\" \").forEach(function(b){var e=\nnavigator.requestMediaKeySystemAccess(b,c).then(function(a){var c=a.getConfiguration().sessionTypes;c=c?0<=c.indexOf(\"persistent-license\"):!1;0<=navigator.userAgent.indexOf(\"Tizen 3\")&&(c=!1);d[b]={persistentState:c};return a.createMediaKeys()})[\"catch\"](function(){d[b]=null});a.push(e)});return Promise.all(a).then(function(){return d})};\nshaka.media.DrmEngine.prototype.onPlay_=function(){for(var a=0;a<this.mediaKeyMessageEvents_.length;a++)this.sendLicenseRequest_(this.mediaKeyMessageEvents_[a]);this.initialRequestsSent_=!0;this.mediaKeyMessageEvents_=[]};shaka.media.DrmEngine.prototype.isSupportedByKeySystem=function(a){var b=this.keySystem();return 0==a.drmInfos.length||a.drmInfos.some(function(a){return a.keySystem==b})};\nshaka.media.DrmEngine.areDrmCompatible=function(a,b){return a.length&&b.length?0<shaka.media.DrmEngine.getCommonDrmInfos(a,b).length:!0};\nshaka.media.DrmEngine.getCommonDrmInfos=function(a,b){if(!a.length)return b;if(!b.length)return a;for(var c=[],d=0;d<a.length;d++)for(var e=0;e<b.length;e++)if(a[d].keySystem==b[e].keySystem){var f=a[d];e=b[e];var g=[];g=g.concat(f.initData||[]);g=g.concat(e.initData||[]);var h=[];h=h.concat(f.keyIds);h=h.concat(e.keyIds);c.push({keySystem:f.keySystem,licenseServerUri:f.licenseServerUri||e.licenseServerUri,distinctiveIdentifierRequired:f.distinctiveIdentifierRequired||e.distinctiveIdentifierRequired,\npersistentStateRequired:f.persistentStateRequired||e.persistentStateRequired,videoRobustness:f.videoRobustness||e.videoRobustness,audioRobustness:f.audioRobustness||e.audioRobustness,serverCertificate:f.serverCertificate||e.serverCertificate,initData:g,keyIds:h});break}return c};\nshaka.media.DrmEngine.prototype.pollExpiration_=function(){this.activeSessions_.forEach(function(a){var b=a.oldExpiration,c=a.session.expiration;isNaN(c)&&(c=Infinity);c!=b&&(this.playerInterface_.onExpirationUpdated(a.session.sessionId,c),a.oldExpiration=c)}.bind(this))};shaka.media.TimeRangesUtils={};shaka.media.TimeRangesUtils.bufferStart=function(a){return!a||1==a.length&&1E-6>a.end(0)-a.start(0)?null:1==a.length&&0>a.start(0)?0:a.length?a.start(0):null};shaka.media.TimeRangesUtils.bufferEnd=function(a){return!a||1==a.length&&1E-6>a.end(0)-a.start(0)?null:a.length?a.end(a.length-1):null};shaka.media.TimeRangesUtils.isBuffered=function(a,b){return!a||!a.length||1==a.length&&1E-6>a.end(0)-a.start(0)?!1:b>=a.start(0)&&b<=a.end(a.length-1)};\nshaka.media.TimeRangesUtils.bufferedAheadOf=function(a,b){if(!a||!a.length||1==a.length&&1E-6>a.end(0)-a.start(0))return 0;for(var c=0,d=a.length-1;0<=d&&a.end(d)>b;--d)c+=a.end(d)-Math.max(a.start(d),b);return c};shaka.media.TimeRangesUtils.getGapIndex=function(a,b){if(!a||!a.length||1==a.length&&1E-6>a.end(0)-a.start(0))return null;var c=.1;/(Edge\\/|Trident\\/|Tizen)/.test(navigator.userAgent)&&(c=.5);for(var d=0;d<a.length;d++)if(a.start(d)>b&&(0==d||a.end(d-1)-b<=c))return d;return null};\nshaka.media.TimeRangesUtils.getBufferedInfo=function(a){if(!a)return[];for(var b=[],c=0;c<a.length;c++)b.push({start:a.start(c),end:a.end(c)});return b};shaka.media.Transmuxer=function(){this.muxTransmuxer_=new muxjs.mp4.Transmuxer({keepOriginalTimestamps:!0});this.transmuxPromise_=null;this.transmuxedData_=[];this.isTransmuxing_=!1;this.muxTransmuxer_.on(\"data\",this.onTransmuxed_.bind(this));this.muxTransmuxer_.on(\"done\",this.onTransmuxDone_.bind(this))};shaka.media.Transmuxer.prototype.destroy=function(){this.muxTransmuxer_.dispose();this.muxTransmuxer_=null;return Promise.resolve()};\nshaka.media.Transmuxer.isSupported=function(a,b){return window.muxjs&&shaka.media.Transmuxer.isTsContainer(b)&&MediaSource.isTypeSupported(shaka.media.Transmuxer.convertTsCodecs(a,b))};shaka.media.Transmuxer.isTsContainer=function(a){return\"mp2t\"==a.split(\";\")[0].split(\"/\")[1]};\nshaka.media.Transmuxer.convertTsCodecs=function(a,b){var c=shaka.util.ManifestParserUtils.ContentType,d=b.replace(\"mp2t\",\"mp4\");a==c.AUDIO&&(d=d.replace(\"video\",\"audio\"));if(c=/avc1\\.(66|77|100)\\.(\\d+)/.exec(d)){var e=\"avc1.\",f=c[1];\"66\"==f?e+=\"4200\":\"77\"==f?e+=\"4d00\":(goog.asserts.assert(\"100\"==f,\"Legacy avc1 parsing code out of sync with regex!\"),e+=\"6400\");f=Number(c[2]);goog.asserts.assert(256>f,\"Invalid legacy avc1 level number!\");e+=(f>>4).toString(16);e+=(f&15).toString(16);d=d.replace(c[0],\ne)}return d};shaka.media.Transmuxer.prototype.transmux=function(a){goog.asserts.assert(!this.isTransmuxing_,\"No transmuxing should be in progress.\");this.isTransmuxing_=!0;this.transmuxPromise_=new shaka.util.PublicPromise;this.transmuxedData_=[];a=new Uint8Array(a);this.muxTransmuxer_.push(a);this.muxTransmuxer_.flush();return this.transmuxPromise_};\nshaka.media.Transmuxer.prototype.onTransmuxed_=function(a){var b=new Uint8Array(a.data.byteLength+a.initSegment.byteLength);b.set(a.initSegment,0);b.set(a.data,a.initSegment.byteLength);this.transmuxedData_.push(b)};shaka.media.Transmuxer.prototype.onTransmuxDone_=function(){var a=shaka.util.Uint8ArrayUtils.concat.apply(null,this.transmuxedData_);this.transmuxPromise_.resolve(a);this.isTransmuxing_=!1};shaka.text={};shaka.text.TextEngine=function(a){this.parser_=null;this.displayer_=a;this.appendWindowStart_=this.timestampOffset_=0;this.appendWindowEnd_=Infinity;this.bufferEnd_=this.bufferStart_=null};shaka.text.TextEngine.parserMap_={};shaka.text.TextEngine.registerParser=function(a,b){shaka.text.TextEngine.parserMap_[a]=b};goog.exportSymbol(\"shaka.text.TextEngine.registerParser\",shaka.text.TextEngine.registerParser);shaka.text.TextEngine.unregisterParser=function(a){delete shaka.text.TextEngine.parserMap_[a]};\ngoog.exportSymbol(\"shaka.text.TextEngine.unregisterParser\",shaka.text.TextEngine.unregisterParser);shaka.text.TextEngine.isTypeSupported=function(a){return!!shaka.text.TextEngine.parserMap_[a]};shaka.text.TextEngine.prototype.destroy=function(){this.displayer_=this.parser_=null;return Promise.resolve()};shaka.text.TextEngine.prototype.setDisplayer=function(a){this.displayer_=a};goog.exportProperty(shaka.text.TextEngine.prototype,\"setDisplayer\",shaka.text.TextEngine.prototype.setDisplayer);\nshaka.text.TextEngine.prototype.initParser=function(a){a=shaka.text.TextEngine.parserMap_[a];goog.asserts.assert(a,\"Text type negotiation should have happened already\");this.parser_=new a};\nshaka.text.TextEngine.prototype.getStartTime=function(a){goog.asserts.assert(this.parser_,\"The parser should already be initialized\");var b={periodStart:0,segmentStart:null,segmentEnd:0};try{return this.parser_.parseMedia(new Uint8Array(a),b)[0].startTime}catch(c){throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.UNABLE_TO_EXTRACT_CUE_START_TIME,c);}};\nshaka.text.TextEngine.prototype.appendBuffer=function(a,b,c){goog.asserts.assert(this.parser_,\"The parser should already be initialized\");return Promise.resolve().then(function(){if(this.parser_&&this.displayer_)if(null==b||null==c)this.parser_.parseInit(new Uint8Array(a));else{var d={periodStart:this.timestampOffset_,segmentStart:this.timestampOffset_+b,segmentEnd:this.timestampOffset_+c};d=this.parser_.parseMedia(new Uint8Array(a),d).filter(function(a){return a.startTime>=this.appendWindowStart_&&\na.startTime<this.appendWindowEnd_}.bind(this));this.displayer_.append(d);null==this.bufferStart_?this.bufferStart_=Math.max(b,this.appendWindowStart_):goog.asserts.assert(1>=b-this.bufferEnd_,\"There should not be a gap in text references >1s\");this.bufferEnd_=Math.min(c,this.appendWindowEnd_)}}.bind(this))};\nshaka.text.TextEngine.prototype.remove=function(a,b){return Promise.resolve().then(function(){this.displayer_&&this.displayer_.remove(a,b)&&(null==this.bufferStart_?goog.asserts.assert(null==this.bufferEnd_,\"end must be null if start is null\"):(goog.asserts.assert(null!=this.bufferEnd_,\"end must be non-null if start is non-null\"),b<=this.bufferStart_||a>=this.bufferEnd_||(a<=this.bufferStart_&&b>=this.bufferEnd_?this.bufferStart_=this.bufferEnd_=null:a<=this.bufferStart_&&b<this.bufferEnd_?this.bufferStart_=\nb:a>this.bufferStart_&&b>=this.bufferEnd_?this.bufferEnd_=a:goog.asserts.assert(!1,\"removal from the middle is not supported by TextEngine\"))))}.bind(this))};shaka.text.TextEngine.prototype.setTimestampOffset=function(a){this.timestampOffset_=a};shaka.text.TextEngine.prototype.setAppendWindow=function(a,b){this.appendWindowStart_=a;this.appendWindowEnd_=b};shaka.text.TextEngine.prototype.bufferStart=function(){return this.bufferStart_};shaka.text.TextEngine.prototype.bufferEnd=function(){return this.bufferEnd_};\nshaka.text.TextEngine.prototype.isBuffered=function(a){return a>=this.bufferStart_&&a<this.bufferEnd_};shaka.text.TextEngine.prototype.bufferedAheadOf=function(a){if(null==this.bufferEnd_||this.bufferEnd_<a)return 0;goog.asserts.assert(null!=this.bufferStart_,\"start should not be null if end is not null\");return this.bufferEnd_-Math.max(a,this.bufferStart_)};shaka.media.MediaSourceEngine=function(a,b,c){goog.asserts.assert(\"open\"==b.readyState,\"The MediaSource should be in the 'open' state.\");this.video_=a;this.mediaSource_=b;this.textDisplayer_=c;this.sourceBuffers_={};this.textEngine_=null;this.queues_={};this.eventManager_=new shaka.util.EventManager;this.destroyed_=!1;this.transmuxers_={}};\nshaka.media.MediaSourceEngine.isStreamSupported=function(a){var b=shaka.util.MimeUtils.getFullType(a.mimeType,a.codecs),c=shaka.util.MimeUtils.getExtendedType(a);return shaka.text.TextEngine.isTypeSupported(b)||MediaSource.isTypeSupported(c)||shaka.media.Transmuxer.isSupported(a.type,b)};shaka.media.MediaSourceEngine.isBrowserSupported=function(){return!!window.MediaSource&&!!MediaSource.isTypeSupported};\nshaka.media.MediaSourceEngine.probeSupport=function(){goog.asserts.assert(shaka.media.MediaSourceEngine.isBrowserSupported(),\"Requires basic support\");var a={};'video/mp4; codecs=\"avc1.42E01E\",video/mp4; codecs=\"avc3.42E01E\",video/mp4; codecs=\"hev1.1.6.L93.90\",video/mp4; codecs=\"hvc1.1.6.L93.90\",video/mp4; codecs=\"hev1.2.4.L153.B0\"; eotf=\"smpte2084\",video/mp4; codecs=\"hvc1.2.4.L153.B0\"; eotf=\"smpte2084\",video/mp4; codecs=\"vp9\",video/mp4; codecs=\"vp09.00.10.08\",audio/mp4; codecs=\"mp4a.40.2\",audio/mp4; codecs=\"ac-3\",audio/mp4; codecs=\"ec-3\",audio/mp4; codecs=\"opus\",audio/mp4; codecs=\"flac\",video/webm; codecs=\"vp8\",video/webm; codecs=\"vp9\",video/webm; codecs=\"av1\",audio/webm; codecs=\"vorbis\",audio/webm; codecs=\"opus\",video/mp2t; codecs=\"avc1.42E01E\",video/mp2t; codecs=\"avc3.42E01E\",video/mp2t; codecs=\"hvc1.1.6.L93.90\",video/mp2t; codecs=\"mp4a.40.2\",video/mp2t; codecs=\"ac-3\",video/mp2t; codecs=\"ec-3\",text/vtt,application/mp4; codecs=\"wvtt\",application/ttml+xml,application/mp4; codecs=\"stpp\"'.split(\",\").forEach(function(b){a[b]=\nshaka.text.TextEngine.isTypeSupported(b)||MediaSource.isTypeSupported(b);var c=b.split(\";\")[0];a[c]=a[c]||a[b]});return a};\nshaka.media.MediaSourceEngine.prototype.destroy=function(){var a=shaka.util.Functional;this.destroyed_=!0;var b=[],c;for(c in this.queues_){var d=this.queues_[c],e=d[0];this.queues_[c]=d.slice(0,1);e&&b.push(e.p[\"catch\"](a.noop));for(e=1;e<d.length;++e)d[e].p[\"catch\"](a.noop),d[e].p.reject()}this.textEngine_&&b.push(this.textEngine_.destroy());for(c in this.transmuxers_)b.push(this.transmuxers_[c].destroy());return Promise.all(b).then(function(){this.eventManager_.destroy();this.textDisplayer_=this.textEngine_=\nthis.mediaSource_=this.video_=this.eventManager_=null;this.sourceBuffers_={};this.transmuxers_={};if(goog.DEBUG)for(var a in this.queues_)goog.asserts.assert(0==this.queues_[a].length,a+\" queue should be empty after destroy!\");this.queues_={}}.bind(this))};\nshaka.media.MediaSourceEngine.prototype.init=function(a){var b=shaka.util.ManifestParserUtils.ContentType,c;for(c in a){var d=a[c];goog.asserts.assert(shaka.media.MediaSourceEngine.isStreamSupported(d),\"Type negotiation should happen before MediaSourceEngine.init!\");d=shaka.util.MimeUtils.getFullType(d.mimeType,d.codecs);c==b.TEXT?this.reinitText(d):(!MediaSource.isTypeSupported(d)&&shaka.media.Transmuxer.isSupported(c,d)&&(this.transmuxers_[c]=new shaka.media.Transmuxer,d=shaka.media.Transmuxer.convertTsCodecs(c,\nd)),d=this.mediaSource_.addSourceBuffer(d),this.eventManager_.listen(d,\"error\",this.onError_.bind(this,c)),this.eventManager_.listen(d,\"updateend\",this.onUpdateEnd_.bind(this,c)),this.sourceBuffers_[c]=d,this.queues_[c]=[])}};shaka.media.MediaSourceEngine.prototype.reinitText=function(a){this.textEngine_||(this.textEngine_=new shaka.text.TextEngine(this.textDisplayer_));this.textEngine_.initParser(a)};\nshaka.media.MediaSourceEngine.prototype.bufferStart=function(a){return a==shaka.util.ManifestParserUtils.ContentType.TEXT?this.textEngine_.bufferStart():shaka.media.TimeRangesUtils.bufferStart(this.getBuffered_(a))};shaka.media.MediaSourceEngine.prototype.bufferEnd=function(a){return a==shaka.util.ManifestParserUtils.ContentType.TEXT?this.textEngine_.bufferEnd():shaka.media.TimeRangesUtils.bufferEnd(this.getBuffered_(a))};\nshaka.media.MediaSourceEngine.prototype.isBuffered=function(a,b){if(a==shaka.util.ManifestParserUtils.ContentType.TEXT)return this.textEngine_.isBuffered(b);var c=this.getBuffered_(a);return shaka.media.TimeRangesUtils.isBuffered(c,b)};shaka.media.MediaSourceEngine.prototype.bufferedAheadOf=function(a,b){if(a==shaka.util.ManifestParserUtils.ContentType.TEXT)return this.textEngine_.bufferedAheadOf(b);var c=this.getBuffered_(a);return shaka.media.TimeRangesUtils.bufferedAheadOf(c,b)};\nshaka.media.MediaSourceEngine.prototype.getBufferedInfo=function(){var a=shaka.util.ManifestParserUtils.ContentType,b=shaka.media.TimeRangesUtils.getBufferedInfo;var c=this.textEngine_&&null!=this.textEngine_.bufferStart()?[{start:this.textEngine_.bufferStart(),end:this.textEngine_.bufferEnd()}]:[];return{total:b(this.video_.buffered),audio:b(this.getBuffered_(a.AUDIO)),video:b(this.getBuffered_(a.VIDEO)),text:c}};\nshaka.media.MediaSourceEngine.prototype.getBuffered_=function(a){try{return this.sourceBuffers_[a].buffered}catch(b){return a in this.sourceBuffers_&&shaka.log.error(\"failed to get buffered range for \"+a,b),null}};\nshaka.media.MediaSourceEngine.prototype.appendBuffer=function(a,b,c,d){return a==shaka.util.ManifestParserUtils.ContentType.TEXT?this.textEngine_.appendBuffer(b,c,d):this.transmuxers_[a]?this.transmuxers_[a].transmux(b).then(function(b){return this.enqueueOperation_(a,this.append_.bind(this,a,b.buffer))}.bind(this)):this.enqueueOperation_(a,this.append_.bind(this,a,b))};\nshaka.media.MediaSourceEngine.prototype.remove=function(a,b,c){goog.asserts.assert(c<Number.MAX_VALUE,\"remove() with MAX_VALUE or Infinity is not IE-compatible!\");return a==shaka.util.ManifestParserUtils.ContentType.TEXT?this.textEngine_.remove(b,c):this.enqueueOperation_(a,this.remove_.bind(this,a,b,c))};\nshaka.media.MediaSourceEngine.prototype.clear=function(a){return a==shaka.util.ManifestParserUtils.ContentType.TEXT?this.textEngine_?this.textEngine_.remove(0,Infinity):Promise.resolve():this.enqueueOperation_(a,this.remove_.bind(this,a,0,this.mediaSource_.duration))};shaka.media.MediaSourceEngine.prototype.flush=function(a){return a==shaka.util.ManifestParserUtils.ContentType.TEXT?Promise.resolve():this.enqueueOperation_(a,this.flush_.bind(this,a))};\nshaka.media.MediaSourceEngine.prototype.setStreamProperties=function(a,b,c,d){return a==shaka.util.ManifestParserUtils.ContentType.TEXT?(this.textEngine_.setTimestampOffset(b),this.textEngine_.setAppendWindow(c,d),Promise.resolve()):Promise.all([this.enqueueOperation_(a,this.abort_.bind(this,a)),this.enqueueOperation_(a,this.setTimestampOffset_.bind(this,a,b)),this.enqueueOperation_(a,this.setAppendWindow_.bind(this,a,c,d))])};\nshaka.media.MediaSourceEngine.prototype.endOfStream=function(a){return this.enqueueBlockingOperation_(function(){a?this.mediaSource_.endOfStream(a):this.mediaSource_.endOfStream()}.bind(this))};shaka.media.MediaSourceEngine.prototype.setDuration=function(a){goog.asserts.assert(isNaN(this.mediaSource_.duration)||this.mediaSource_.duration<=a,\"duration cannot decrease: \"+this.mediaSource_.duration+\" -> \"+a);return this.enqueueBlockingOperation_(function(){this.mediaSource_.duration=a}.bind(this))};\nshaka.media.MediaSourceEngine.prototype.getDuration=function(){return this.mediaSource_.duration};shaka.media.MediaSourceEngine.prototype.append_=function(a,b){this.sourceBuffers_[a].appendBuffer(b)};shaka.media.MediaSourceEngine.prototype.remove_=function(a,b,c){if(c<=b)this.onUpdateEnd_(a);else this.sourceBuffers_[a].remove(b,c)};\nshaka.media.MediaSourceEngine.prototype.abort_=function(a){var b=this.sourceBuffers_[a].appendWindowStart,c=this.sourceBuffers_[a].appendWindowEnd;this.sourceBuffers_[a].abort();this.sourceBuffers_[a].appendWindowStart=b;this.sourceBuffers_[a].appendWindowEnd=c;this.onUpdateEnd_(a)};shaka.media.MediaSourceEngine.prototype.flush_=function(a){goog.asserts.assert(0==this.video_.buffered.length,\"MediaSourceEngine.flush_ should only be used after clearing all data!\");this.video_.currentTime-=.001;this.onUpdateEnd_(a)};\nshaka.media.MediaSourceEngine.prototype.setTimestampOffset_=function(a,b){0>b&&(b+=.001);this.sourceBuffers_[a].timestampOffset=b;this.onUpdateEnd_(a)};shaka.media.MediaSourceEngine.prototype.setAppendWindow_=function(a,b,c){this.sourceBuffers_[a].appendWindowStart=0;this.sourceBuffers_[a].appendWindowEnd=c;this.sourceBuffers_[a].appendWindowStart=b;this.onUpdateEnd_(a)};\nshaka.media.MediaSourceEngine.prototype.onError_=function(a,b){var c=this.queues_[a][0];goog.asserts.assert(c,\"Spurious error event!\");goog.asserts.assert(!this.sourceBuffers_[a].updating,\"SourceBuffer should not be updating on error!\");c.p.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_FAILED,this.video_.error?this.video_.error.code:0))};\nshaka.media.MediaSourceEngine.prototype.onUpdateEnd_=function(a){var b=this.queues_[a][0];goog.asserts.assert(b,\"Spurious updateend event!\");b&&(goog.asserts.assert(!this.sourceBuffers_[a].updating,\"SourceBuffer should not be updating on updateend!\"),b.p.resolve(),this.popFromQueue_(a))};\nshaka.media.MediaSourceEngine.prototype.enqueueOperation_=function(a,b){if(this.destroyed_)return Promise.reject();var c={start:b,p:new shaka.util.PublicPromise};this.queues_[a].push(c);if(1==this.queues_[a].length)try{c.start()}catch(d){\"QuotaExceededError\"==d.name?c.p.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.QUOTA_EXCEEDED_ERROR,a)):c.p.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,\nshaka.util.Error.Code.MEDIA_SOURCE_OPERATION_THREW,d)),this.popFromQueue_(a)}return c.p};\nshaka.media.MediaSourceEngine.prototype.enqueueBlockingOperation_=function(a){if(this.destroyed_)return Promise.reject();var b=[],c;for(c in this.sourceBuffers_){var d=new shaka.util.PublicPromise,e={start:function(a){a.resolve()}.bind(null,d),p:d};this.queues_[c].push(e);b.push(d);1==this.queues_[c].length&&e.start()}return Promise.all(b).then(function(){if(goog.DEBUG)for(var b in this.sourceBuffers_)goog.asserts.assert(0==this.sourceBuffers_[b].updating,\"SourceBuffers should not be updating after a blocking op!\");\ntry{a()}catch(h){var c=Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_THREW,h))}for(b in this.sourceBuffers_)this.popFromQueue_(b);return c}.bind(this),function(){goog.asserts.assert(this.destroyed_,\"Should be destroyed by now\");if(goog.DEBUG)for(var a in this.sourceBuffers_)this.queues_[a].length&&(goog.asserts.assert(1==this.queues_[a].length,\"Should be at most one item in queue!\"),goog.asserts.assert(-1!=\nb.indexOf(this.queues_[a][0].p),\"The item in queue should be one of our waiters!\"),this.queues_[a].shift());return Promise.reject()}.bind(this))};shaka.media.MediaSourceEngine.prototype.popFromQueue_=function(a){this.queues_[a].shift();var b=this.queues_[a][0];if(b)try{b.start()}catch(c){b.p.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.MEDIA_SOURCE_OPERATION_THREW,c)),this.popFromQueue_(a)}};shaka.util.LanguageUtils={};shaka.util.LanguageUtils.match=function(a,b,c){var d=shaka.util.LanguageUtils;goog.asserts.assert(b==d.normalize(b),\"Language pref should be normalized first\");goog.asserts.assert(c==d.normalize(c),\"Language candidate should be normalized first\");return c==b||a>=shaka.util.LanguageUtils.MatchType.BASE_LANGUAGE_OKAY&&c==b.split(\"-\")[0]||a>=shaka.util.LanguageUtils.MatchType.OTHER_SUB_LANGUAGE_OKAY&&c.split(\"-\")[0]==b.split(\"-\")[0]?!0:!1};\nshaka.util.LanguageUtils.MatchType={EXACT:0,BASE_LANGUAGE_OKAY:1,OTHER_SUB_LANGUAGE_OKAY:2};shaka.util.LanguageUtils.normalize=function(a){a=a.toLowerCase().split(\"-\");var b=shaka.util.LanguageUtils.isoMap_[a[0]];b&&(a[0]=b);return a.join(\"-\")};\nshaka.util.LanguageUtils.isoMap_={aar:\"aa\",abk:\"ab\",afr:\"af\",aka:\"ak\",alb:\"sq\",amh:\"am\",ara:\"ar\",arg:\"an\",arm:\"hy\",asm:\"as\",ava:\"av\",ave:\"ae\",aym:\"ay\",aze:\"az\",bak:\"ba\",bam:\"bm\",baq:\"eu\",bel:\"be\",ben:\"bn\",bih:\"bh\",bis:\"bi\",bod:\"bo\",bos:\"bs\",bre:\"br\",bul:\"bg\",bur:\"my\",cat:\"ca\",ces:\"cs\",cha:\"ch\",che:\"ce\",chi:\"zh\",chu:\"cu\",chv:\"cv\",cor:\"kw\",cos:\"co\",cre:\"cr\",cym:\"cy\",cze:\"cs\",dan:\"da\",deu:\"de\",div:\"dv\",dut:\"nl\",dzo:\"dz\",ell:\"el\",eng:\"en\",epo:\"eo\",est:\"et\",eus:\"eu\",ewe:\"ee\",fao:\"fo\",fas:\"fa\",fij:\"fj\",\nfin:\"fi\",fra:\"fr\",fre:\"fr\",fry:\"fy\",ful:\"ff\",geo:\"ka\",ger:\"de\",gla:\"gd\",gle:\"ga\",glg:\"gl\",glv:\"gv\",gre:\"el\",grn:\"gn\",guj:\"gu\",hat:\"ht\",hau:\"ha\",heb:\"he\",her:\"hz\",hin:\"hi\",hmo:\"ho\",hrv:\"hr\",hun:\"hu\",hye:\"hy\",ibo:\"ig\",ice:\"is\",ido:\"io\",iii:\"ii\",iku:\"iu\",ile:\"ie\",ina:\"ia\",ind:\"id\",ipk:\"ik\",isl:\"is\",ita:\"it\",jav:\"jv\",jpn:\"ja\",kal:\"kl\",kan:\"kn\",kas:\"ks\",kat:\"ka\",kau:\"kr\",kaz:\"kk\",khm:\"km\",kik:\"ki\",kin:\"rw\",kir:\"ky\",kom:\"kv\",kon:\"kg\",kor:\"ko\",kua:\"kj\",kur:\"ku\",lao:\"lo\",lat:\"la\",lav:\"lv\",lim:\"li\",lin:\"ln\",\nlit:\"lt\",ltz:\"lb\",lub:\"lu\",lug:\"lg\",mac:\"mk\",mah:\"mh\",mal:\"ml\",mao:\"mi\",mar:\"mr\",may:\"ms\",mkd:\"mk\",mlg:\"mg\",mlt:\"mt\",mon:\"mn\",mri:\"mi\",msa:\"ms\",mya:\"my\",nau:\"na\",nav:\"nv\",nbl:\"nr\",nde:\"nd\",ndo:\"ng\",nep:\"ne\",nld:\"nl\",nno:\"nn\",nob:\"nb\",nor:\"no\",nya:\"ny\",oci:\"oc\",oji:\"oj\",ori:\"or\",orm:\"om\",oss:\"os\",pan:\"pa\",per:\"fa\",pli:\"pi\",pol:\"pl\",por:\"pt\",pus:\"ps\",que:\"qu\",roh:\"rm\",ron:\"ro\",rum:\"ro\",run:\"rn\",rus:\"ru\",sag:\"sg\",san:\"sa\",sin:\"si\",slk:\"sk\",slo:\"sk\",slv:\"sl\",sme:\"se\",smo:\"sm\",sna:\"sn\",snd:\"sd\",som:\"so\",\nsot:\"st\",spa:\"es\",sqi:\"sq\",srd:\"sc\",srp:\"sr\",ssw:\"ss\",sun:\"su\",swa:\"sw\",swe:\"sv\",tah:\"ty\",tam:\"ta\",tat:\"tt\",tel:\"te\",tgk:\"tg\",tgl:\"tl\",tha:\"th\",tib:\"bo\",tir:\"ti\",ton:\"to\",tsn:\"tn\",tso:\"ts\",tuk:\"tk\",tur:\"tr\",twi:\"tw\",uig:\"ug\",ukr:\"uk\",urd:\"ur\",uzb:\"uz\",ven:\"ve\",vie:\"vi\",vol:\"vo\",wel:\"cy\",wln:\"wa\",wol:\"wo\",xho:\"xh\",yid:\"yi\",yor:\"yo\",zha:\"za\",zho:\"zh\",zul:\"zu\"};shaka.util.StreamUtils={};shaka.util.StreamUtils.meetsRestrictions=function(a,b,c){var d=a.video;return d&&(d.width<b.minWidth||d.width>b.maxWidth||d.width>c.width||d.height<b.minHeight||d.height>b.maxHeight||d.height>c.height||d.width*d.height<b.minPixels||d.width*d.height>b.maxPixels)||a.bandwidth<b.minBandwidth||a.bandwidth>b.maxBandwidth?!1:!0};\nshaka.util.StreamUtils.applyRestrictions=function(a,b,c){var d=!1;a.variants.forEach(function(a){var e=a.allowedByApplication;a.allowedByApplication=shaka.util.StreamUtils.meetsRestrictions(a,b,c);e!=a.allowedByApplication&&(d=!0)});return d};\nshaka.util.StreamUtils.filterNewPeriod=function(a,b,c,d){var e=shaka.util.StreamUtils;b&&goog.asserts.assert(shaka.util.StreamUtils.isAudio(b),\"Audio streams must have the audio type.\");c&&goog.asserts.assert(shaka.util.StreamUtils.isVideo(c),\"Video streams must have the video type.\");d.variants=d.variants.filter(function(d){var f=e.isVariantCompatible_(d,a,b,c);f||shaka.log.debug(\"Dropping Variant (not compatible with key system, platform, or active Variant)\",d);return f});d.textStreams=d.textStreams.filter(function(a){var b=\nshaka.util.MimeUtils.getFullType(a.mimeType,a.codecs);(b=shaka.text.TextEngine.isTypeSupported(b))||shaka.log.debug(\"Dropping text stream. Is not supported by the platform.\",a);return b})};\nshaka.util.StreamUtils.isStreamCompatible_=function(a,b,c){if(!a)return!0;goog.asserts.assert(a.type!=shaka.util.ManifestParserUtils.ContentType.TEXT,\"Should not be called on a text stream!\");var d=null;b&&b.initialized()&&(d=b.getSupportedTypes());b=shaka.util.MimeUtils.getFullType(a.mimeType,a.codecs);return!shaka.media.MediaSourceEngine.isStreamSupported(a)||d&&a.encrypted&&0>d.indexOf(b)||c&&(a.mimeType!=c.mimeType||a.codecs.split(\".\")[0]!=c.codecs.split(\".\")[0])?!1:!0};\nshaka.util.StreamUtils.isVariantCompatible_=function(a,b,c,d){if(b&&b.initialized()&&!b.isSupportedByKeySystem(a))return!1;var e=shaka.util.StreamUtils.isStreamCompatible_;return e(a.audio,b,c)&&e(a.video,b,d)};\nshaka.util.StreamUtils.variantToTrack=function(a){var b=a.audio,c=a.video,d=b?b.codecs:null,e=c?c.codecs:null,f=[];e&&f.push(e);d&&f.push(d);var g=[];c&&g.push(c.mimeType);b&&g.push(b.mimeType);g=g[0]||null;var h=[];b&&h.push(b.kind);c&&h.push(c.kind);h=h[0]||null;var k=[];b&&k.push.apply(k,b.roles);c&&k.push.apply(k,c.roles);k=shaka.util.ArrayUtils.removeDuplicates(k);a={id:a.id,active:!1,type:\"variant\",bandwidth:a.bandwidth,language:a.language,label:null,kind:h,width:null,height:null,frameRate:null,\nmimeType:g,codecs:f.join(\", \"),audioCodec:d,videoCodec:e,primary:a.primary,roles:k,videoId:null,audioId:null,channelsCount:null,audioBandwidth:null,videoBandwidth:null};c&&(a.videoId=c.id,a.width=c.width||null,a.height=c.height||null,a.frameRate=c.frameRate||null,a.videoBandwidth=c.bandwidth||null);b&&(a.audioId=b.id,a.channelsCount=b.channelsCount,a.audioBandwidth=b.bandwidth||null,a.label=b.label);return a};\nshaka.util.StreamUtils.textStreamToTrack=function(a){return{id:a.id,active:!1,type:shaka.util.ManifestParserUtils.ContentType.TEXT,bandwidth:0,language:a.language,label:a.label,kind:a.kind||null,width:null,height:null,frameRate:null,mimeType:a.mimeType,codecs:a.codecs||null,audioCodec:null,videoCodec:null,primary:a.primary,roles:a.roles,videoId:null,audioId:null,channelsCount:null,audioBandwidth:null,videoBandwidth:null}};\nshaka.util.StreamUtils.getTracks=function(a){var b=shaka.util.StreamUtils,c=[],d=b.getPlayableVariants(a.variants);a=a.textStreams;d.forEach(function(a){c.push(b.variantToTrack(a))});a.forEach(function(a){c.push(b.textStreamToTrack(a))});return c};\nshaka.util.StreamUtils.getVariantTracks=function(a,b,c){var d=shaka.util.StreamUtils;return d.getPlayableVariants(a.variants).map(function(a){var e=d.variantToTrack(a);a.video&&a.audio?e.active=c==a.video.id&&b==a.audio.id:a.video?e.active=c==a.video.id:a.audio&&(e.active=b==a.audio.id);return e})};shaka.util.StreamUtils.getTextTracks=function(a,b){return a.textStreams.map(function(a){var c=shaka.util.StreamUtils.textStreamToTrack(a);c.active=b==a.id;return c})};\nshaka.util.StreamUtils.findVariantForTrack=function(a,b){for(var c=0;c<a.variants.length;c++)if(a.variants[c].id==b.id)return a.variants[c];return null};shaka.util.StreamUtils.findTextStreamForTrack=function(a,b){for(var c=0;c<a.textStreams.length;c++)if(a.textStreams[c].id==b.id)return a.textStreams[c];return null};shaka.util.StreamUtils.isPlayable=function(a){return a.allowedByApplication&&a.allowedByKeySystem};shaka.util.StreamUtils.getPlayableVariants=function(a){return a.filter(function(a){return shaka.util.StreamUtils.isPlayable(a)})};\nshaka.util.StreamUtils.filterVariantsByLanguageAndRole=function(a,b,c,d){var e=shaka.util.LanguageUtils,f=shaka.util.ManifestParserUtils.ContentType,g=shaka.util.StreamUtils.getPlayableVariants(a),h=g;a=g.filter(function(a){return a.primary});a.length&&(h=a);var k=h.length?h[0].language:\"\";h=h.filter(function(a){return a.language==k});if(b){var l=e.normalize(b);[e.MatchType.OTHER_SUB_LANGUAGE_OKAY,e.MatchType.BASE_LANGUAGE_OKAY,e.MatchType.EXACT].forEach(function(a){var b=!1;g.forEach(function(c){l=\ne.normalize(l);var g=e.normalize(c.language);e.match(a,l,g)&&(b?h.push(c):(h=[c],b=!0),d&&(d[f.AUDIO]=!0))})})}if(c){b=shaka.util.StreamUtils.filterVariantsByRole_(h,c);if(b.length)return b;shaka.log.warning(\"No exact match for the variant role could be found.\")}b=h.map(function(a){return(a.audio?a.audio.roles:[]).concat(a.video?a.video.roles:[])}).reduce(shaka.util.Functional.collapseArrays,[]);return b.length?shaka.util.StreamUtils.filterVariantsByRole_(h,b[0]):h};\nshaka.util.StreamUtils.filterStreamsByLanguageAndRole=function(a,b,c,d){var e=shaka.util.LanguageUtils,f=shaka.util.ManifestParserUtils.ContentType,g=a,h=a.filter(function(a){return a.primary});h.length&&(g=h);var k=g.length?g[0].language:\"\";g=g.filter(function(a){return a.language==k});if(b){var l=e.normalize(b);[e.MatchType.OTHER_SUB_LANGUAGE_OKAY,e.MatchType.BASE_LANGUAGE_OKAY,e.MatchType.EXACT].forEach(function(b){var c=!1;a.forEach(function(a){var h=e.normalize(a.language);e.match(b,l,h)&&(c?\ng.push(a):(g=[a],c=!0),d&&(d[f.TEXT]=!0))})})}if(c){b=shaka.util.StreamUtils.filterTextStreamsByRole_(g,c);if(b.length)return b;shaka.log.warning(\"No exact match for the text role could be found.\")}else if(b=g.filter(function(a){return 0==a.roles.length}),b.length)return b;b=g.map(function(a){return a.roles}).reduce(shaka.util.Functional.collapseArrays,[]);return b.length?shaka.util.StreamUtils.filterTextStreamsByRole_(g,b[0]):g};\nshaka.util.StreamUtils.filterVariantsByRole_=function(a,b){return a.filter(function(a){return a.audio&&0<=a.audio.roles.indexOf(b)||a.video&&0<=a.video.roles.indexOf(b)})};shaka.util.StreamUtils.filterTextStreamsByRole_=function(a,b){return a.filter(function(a){return 0<=a.roles.indexOf(b)})};\nshaka.util.StreamUtils.getVariantByStreams=function(a,b,c){a&&goog.asserts.assert(shaka.util.StreamUtils.isAudio(a),\"Audio streams must have the audio type.\");b&&goog.asserts.assert(shaka.util.StreamUtils.isVideo(b),\"Video streams must have the video type.\");for(var d=0;d<c.length;d++)if(c[d].audio==a&&c[d].video==b)return c[d];return null};\nshaka.util.StreamUtils.getVariantByStreamIds=function(a,b,c){function d(a,b){return null==a?null==b:b.id==a}for(var e=0;e<c.length;e++)if(d(a,c[e].audio)&&d(b,c[e].video))return c[e];return null};shaka.util.StreamUtils.findPeriodContainingTime=function(a,b){for(var c=shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS,d=a.periods.length-1;0<d;--d)if(b+c>=a.periods[d].startTime)return d;return 0};\nshaka.util.StreamUtils.findPeriodContainingStream=function(a,b){for(var c=shaka.util.ManifestParserUtils.ContentType,d=0;d<a.periods.length;++d){var e=a.periods[d];if(b.type==c.TEXT)for(var f=0;f<e.textStreams.length;++f){if(e.textStreams[f]==b)return d}else for(f=0;f<e.variants.length;++f){var g=e.variants[f];if(g.audio==b||g.video==b||g.video&&g.video.trickModeVideo==b)return d}}return-1};\nshaka.util.StreamUtils.findPeriodContainingVariant=function(a,b){for(var c=0;c<a.periods.length;++c)for(var d=a.periods[c],e=0;e<d.variants.length;++e)if(d.variants[e]==b)return c;return-1};shaka.util.StreamUtils.getRebufferingGoal=function(a,b,c){return c*Math.max(a.minBufferTime||0,b.rebufferingGoal)};shaka.util.StreamUtils.isAudio=function(a){return a.type==shaka.util.ManifestParserUtils.ContentType.AUDIO};shaka.util.StreamUtils.isVideo=function(a){return a.type==shaka.util.ManifestParserUtils.ContentType.VIDEO};shaka.abr.SimpleAbrManager=function(){this.switch_=null;this.enabled_=!1;this.bandwidthEstimator_=new shaka.abr.EwmaBandwidthEstimator;this.variants_=[];this.startupComplete_=!1;this.config_=this.lastTimeChosenMs_=null};goog.exportSymbol(\"shaka.abr.SimpleAbrManager\",shaka.abr.SimpleAbrManager);shaka.abr.SimpleAbrManager.prototype.stop=function(){this.switch_=null;this.enabled_=!1;this.variants_=[];this.lastTimeChosenMs_=null};goog.exportProperty(shaka.abr.SimpleAbrManager.prototype,\"stop\",shaka.abr.SimpleAbrManager.prototype.stop);\nshaka.abr.SimpleAbrManager.prototype.init=function(a){this.switch_=a};goog.exportProperty(shaka.abr.SimpleAbrManager.prototype,\"init\",shaka.abr.SimpleAbrManager.prototype.init);\nshaka.abr.SimpleAbrManager.prototype.chooseVariant=function(){var a=shaka.abr.SimpleAbrManager.filterAndSortVariants_(this.config_.restrictions,this.variants_),b=this.bandwidthEstimator_.getBandwidthEstimate(this.config_.defaultBandwidthEstimate);if(this.variants_.length&&!a.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.RESTRICTIONS_CANNOT_BE_MET);for(var c=a[0]||null,d=0;d<a.length;++d){var e=a[d],f=e.bandwidth/this.config_.bandwidthDowngradeTarget,\ng=(a[d+1]||{bandwidth:Infinity}).bandwidth/this.config_.bandwidthUpgradeTarget;shaka.log.v2(\"Bandwidth ranges:\",(e.bandwidth/1E6).toFixed(3),(f/1E6).toFixed(3),(g/1E6).toFixed(3));b>=f&&b<=g&&(c=e)}this.lastTimeChosenMs_=Date.now();return c};goog.exportProperty(shaka.abr.SimpleAbrManager.prototype,\"chooseVariant\",shaka.abr.SimpleAbrManager.prototype.chooseVariant);shaka.abr.SimpleAbrManager.prototype.enable=function(){this.enabled_=!0};\ngoog.exportProperty(shaka.abr.SimpleAbrManager.prototype,\"enable\",shaka.abr.SimpleAbrManager.prototype.enable);shaka.abr.SimpleAbrManager.prototype.disable=function(){this.enabled_=!1};goog.exportProperty(shaka.abr.SimpleAbrManager.prototype,\"disable\",shaka.abr.SimpleAbrManager.prototype.disable);\nshaka.abr.SimpleAbrManager.prototype.segmentDownloaded=function(a,b){shaka.log.v2(\"Segment downloaded:\",\"deltaTimeMs=\"+a,\"numBytes=\"+b,\"lastTimeChosenMs=\"+this.lastTimeChosenMs_,\"enabled=\"+this.enabled_);goog.asserts.assert(0<=a,\"expected a non-negative duration\");this.bandwidthEstimator_.sample(a,b);null!=this.lastTimeChosenMs_&&this.enabled_&&this.suggestStreams_()};goog.exportProperty(shaka.abr.SimpleAbrManager.prototype,\"segmentDownloaded\",shaka.abr.SimpleAbrManager.prototype.segmentDownloaded);\nshaka.abr.SimpleAbrManager.prototype.getBandwidthEstimate=function(){return this.bandwidthEstimator_.getBandwidthEstimate(this.config_.defaultBandwidthEstimate)};goog.exportProperty(shaka.abr.SimpleAbrManager.prototype,\"getBandwidthEstimate\",shaka.abr.SimpleAbrManager.prototype.getBandwidthEstimate);shaka.abr.SimpleAbrManager.prototype.setVariants=function(a){this.variants_=a};goog.exportProperty(shaka.abr.SimpleAbrManager.prototype,\"setVariants\",shaka.abr.SimpleAbrManager.prototype.setVariants);\nshaka.abr.SimpleAbrManager.prototype.configure=function(a){this.config_=a};goog.exportProperty(shaka.abr.SimpleAbrManager.prototype,\"configure\",shaka.abr.SimpleAbrManager.prototype.configure);\nshaka.abr.SimpleAbrManager.prototype.suggestStreams_=function(){shaka.log.v2(\"Suggesting Streams...\");goog.asserts.assert(null!=this.lastTimeChosenMs_,\"lastTimeChosenMs_ should not be null\");if(!this.startupComplete_){if(!this.bandwidthEstimator_.hasGoodEstimate()){shaka.log.v2(\"Still waiting for a good estimate...\");return}this.startupComplete_=!0}else if(Date.now()-this.lastTimeChosenMs_<1E3*this.config_.switchInterval){shaka.log.v2(\"Still within switch interval...\");return}var a=this.chooseVariant(),\nb=this.bandwidthEstimator_.getBandwidthEstimate(this.config_.defaultBandwidthEstimate);shaka.log.debug(\"Calling switch_(), bandwidth=\"+Math.round(b/1E3)+\" kbps\");this.switch_(a)};shaka.abr.SimpleAbrManager.filterAndSortVariants_=function(a,b){return b.filter(function(b){return shaka.util.StreamUtils.meetsRestrictions(b,a,{width:Infinity,height:Infinity})}).sort(function(a,b){return a.bandwidth-b.bandwidth})};shaka.cast={};shaka.cast.CastUtils={};shaka.cast.CastUtils.VideoEvents=\"ended play playing pause pausing ratechange seeked seeking timeupdate volumechange\".split(\" \");shaka.cast.CastUtils.VideoAttributes=\"buffered currentTime duration ended loop muted paused playbackRate seeking videoHeight videoWidth volume\".split(\" \");shaka.cast.CastUtils.VideoInitStateAttributes=[\"loop\",\"playbackRate\"];shaka.cast.CastUtils.VideoVoidMethods=[\"pause\",\"play\"];shaka.cast.CastUtils.PlayerEvents=\"adaptation buffering emsg error loading streaming texttrackvisibility timelineregionadded timelineregionenter timelineregionexit trackschanged unloading\".split(\" \");\nshaka.cast.CastUtils.PlayerGetterMethods={drmInfo:20,getAudioLanguages:2,getAudioLanguagesAndRoles:2,getBufferedInfo:2,getConfiguration:2,getExpiration:2,getManifestUri:2,getPlaybackRate:2,getTextLanguages:2,getTextLanguagesAndRoles:2,getTextTracks:2,getStats:5,getVariantTracks:2,isAudioOnly:10,isBuffering:1,isInProgress:1,isLive:10,isTextTrackVisible:1,keySystem:10,seekRange:1};shaka.cast.CastUtils.PlayerGetterMethodsThatRequireLive={getPlayheadTimeAsDate:1,getPresentationStartTimeAsDate:20};\nshaka.cast.CastUtils.PlayerInitState=[[\"getConfiguration\",\"configure\"]];shaka.cast.CastUtils.PlayerInitAfterLoadState=[[\"isTextTrackVisible\",\"setTextTrackVisibility\"]];shaka.cast.CastUtils.PlayerVoidMethods=\"addTextTrack cancelTrickPlay configure resetConfiguration retryStreaming selectAudioLanguage selectTextLanguage selectTextTrack selectVariantTrack setTextTrackVisibility trickPlay\".split(\" \");shaka.cast.CastUtils.PlayerPromiseMethods=[\"load\",\"unload\"];\nshaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE=\"urn:x-cast:com.google.shaka.v2\";shaka.cast.CastUtils.GENERIC_MESSAGE_NAMESPACE=\"urn:x-cast:com.google.cast.media\";\nshaka.cast.CastUtils.serialize=function(a){return JSON.stringify(a,function(a,c){if(\"function\"!=typeof c){if(c instanceof Event||c instanceof shaka.util.FakeEvent){var b={},e;for(e in c){var f=c[e];f&&\"object\"==typeof f?\"detail\"==e&&(b[e]=f):e in Event||(b[e]=f)}return b}return c instanceof TimeRanges?shaka.cast.CastUtils.unpackTimeRanges_(c):\"number\"==typeof c?isNaN(c)?\"NaN\":isFinite(c)?c:0>c?\"-Infinity\":\"Infinity\":c}})};\nshaka.cast.CastUtils.deserialize=function(a){return JSON.parse(a,function(a,c){return\"NaN\"==c?NaN:\"-Infinity\"==c?-Infinity:\"Infinity\"==c?Infinity:c&&\"object\"==typeof c&&\"TimeRanges\"==c.__type__?shaka.cast.CastUtils.simulateTimeRanges_(c):c})};shaka.cast.CastUtils.unpackTimeRanges_=function(a){for(var b={__type__:\"TimeRanges\",length:a.length,start:[],end:[]},c=0;c<a.length;++c)b.start.push(a.start(c)),b.end.push(a.end(c));return b};\nshaka.cast.CastUtils.simulateTimeRanges_=function(a){return{length:a.length,start:function(b){return a.start[b]},end:function(b){return a.end[b]}}};shaka.cast.CastSender=function(a,b,c,d,e,f){this.receiverAppId_=a;this.onStatusChanged_=b;this.onFirstCastStateUpdate_=c;this.hasJoinedExistingSession_=!1;this.onRemoteEvent_=d;this.onResumeLocal_=e;this.onInitStateRequired_=f;this.isCasting_=this.apiReady_=!1;this.receiverName_=\"\";this.appData_=null;this.onConnectionStatusChangedBound_=this.onConnectionStatusChanged_.bind(this);this.onMessageReceivedBound_=this.onMessageReceived_.bind(this);this.cachedProperties_={video:{},player:{}};this.nextAsyncCallId_=\n0;this.asyncCallPromises_={};this.castPromise_=null};shaka.cast.CastSender.hasReceivers_=!1;shaka.cast.CastSender.session_=null;\nshaka.cast.CastSender.prototype.destroy=function(){this.rejectAllPromises_();shaka.cast.CastSender.session_&&this.removeListeners_();this.onResumeLocal_=this.onRemoteEvent_=this.onStatusChanged_=null;this.isCasting_=this.apiReady_=!1;this.onMessageReceivedBound_=this.onConnectionStatusChangedBound_=this.castPromise_=this.asyncCallPromises_=this.cachedProperties_=this.appData_=null;return Promise.resolve()};shaka.cast.CastSender.prototype.apiReady=function(){return this.apiReady_};\nshaka.cast.CastSender.prototype.hasReceivers=function(){return shaka.cast.CastSender.hasReceivers_};shaka.cast.CastSender.prototype.isCasting=function(){return this.isCasting_};shaka.cast.CastSender.prototype.receiverName=function(){return this.receiverName_};shaka.cast.CastSender.prototype.hasRemoteProperties=function(){return 0!=Object.keys(this.cachedProperties_.video).length};\nshaka.cast.CastSender.prototype.init=function(){if(window.chrome&&chrome.cast&&chrome.cast.isAvailable){delete window.__onGCastApiAvailable;this.apiReady_=!0;this.onStatusChanged_();var a=new chrome.cast.SessionRequest(this.receiverAppId_);a=new chrome.cast.ApiConfig(a,this.onExistingSessionJoined_.bind(this),this.onReceiverStatusChanged_.bind(this),\"origin_scoped\");chrome.cast.initialize(a,function(){shaka.log.debug(\"CastSender: init\")},function(a){shaka.log.error(\"CastSender: init error\",a)});shaka.cast.CastSender.hasReceivers_&&\nsetTimeout(this.onStatusChanged_.bind(this),20);(a=shaka.cast.CastSender.session_)&&a.status!=chrome.cast.SessionStatus.STOPPED?(shaka.log.debug(\"CastSender: re-using existing connection\"),this.onExistingSessionJoined_(a)):shaka.cast.CastSender.session_=null}else window.__onGCastApiAvailable=function(a){a&&this.init()}.bind(this)};shaka.cast.CastSender.prototype.setAppData=function(a){this.appData_=a;this.isCasting_&&this.sendMessage_({type:\"appData\",appData:this.appData_})};\nshaka.cast.CastSender.prototype.cast=function(a){if(!this.apiReady_)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE,shaka.util.Error.Category.CAST,shaka.util.Error.Code.CAST_API_UNAVAILABLE));if(!shaka.cast.CastSender.hasReceivers_)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE,shaka.util.Error.Category.CAST,shaka.util.Error.Code.NO_CAST_RECEIVERS));if(this.isCasting_)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE,\nshaka.util.Error.Category.CAST,shaka.util.Error.Code.ALREADY_CASTING));this.castPromise_=new shaka.util.PublicPromise;chrome.cast.requestSession(this.onSessionInitiated_.bind(this,a),this.onConnectionError_.bind(this));return this.castPromise_};shaka.cast.CastSender.prototype.showDisconnectDialog=function(){if(this.isCasting_){var a=this.onInitStateRequired_();chrome.cast.requestSession(this.onSessionInitiated_.bind(this,a),this.onConnectionError_.bind(this))}};\nshaka.cast.CastSender.prototype.forceDisconnect=function(){this.isCasting_&&(this.rejectAllPromises_(),shaka.cast.CastSender.session_&&(this.removeListeners_(),shaka.cast.CastSender.session_.stop(function(){},function(){}),shaka.cast.CastSender.session_=null))};\nshaka.cast.CastSender.prototype.get=function(a,b){goog.asserts.assert(\"video\"==a||\"player\"==a,\"Unexpected target name\");var c=shaka.cast.CastUtils;if(\"video\"==a){if(0<=c.VideoVoidMethods.indexOf(b))return this.remoteCall_.bind(this,a,b)}else if(\"player\"==a){if(c.PlayerGetterMethodsThatRequireLive[b]){var d=this.get(\"player\",\"isLive\")();goog.asserts.assert(d,b+\" should be called on a live stream!\");if(!d)return function(){}}if(0<=c.PlayerVoidMethods.indexOf(b))return this.remoteCall_.bind(this,a,b);\nif(0<=c.PlayerPromiseMethods.indexOf(b))return this.remoteAsyncCall_.bind(this,a,b);if(c.PlayerGetterMethods[b])return this.propertyGetter_.bind(this,a,b)}return this.propertyGetter_(a,b)};shaka.cast.CastSender.prototype.set=function(a,b,c){goog.asserts.assert(\"video\"==a||\"player\"==a,\"Unexpected target name\");this.cachedProperties_[a][b]=c;this.sendMessage_({type:\"set\",targetName:a,property:b,value:c})};\nshaka.cast.CastSender.prototype.onSessionInitiated_=function(a,b){shaka.log.debug(\"CastSender: onSessionInitiated\");this.onSessionCreated_(b);this.sendMessage_({type:\"init\",initState:a,appData:this.appData_});this.castPromise_.resolve()};\nshaka.cast.CastSender.prototype.onConnectionError_=function(a){var b=shaka.util.Error.Code.UNEXPECTED_CAST_ERROR;switch(a.code){case \"cancel\":b=shaka.util.Error.Code.CAST_CANCELED_BY_USER;break;case \"timeout\":b=shaka.util.Error.Code.CAST_CONNECTION_TIMED_OUT;break;case \"receiver_unavailable\":b=shaka.util.Error.Code.CAST_RECEIVER_APP_UNAVAILABLE}this.castPromise_.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.CAST,b,a))};\nshaka.cast.CastSender.prototype.propertyGetter_=function(a,b){goog.asserts.assert(\"video\"==a||\"player\"==a,\"Unexpected target name\");return this.cachedProperties_[a][b]};shaka.cast.CastSender.prototype.remoteCall_=function(a,b){goog.asserts.assert(\"video\"==a||\"player\"==a,\"Unexpected target name\");var c=Array.prototype.slice.call(arguments,2);this.sendMessage_({type:\"call\",targetName:a,methodName:b,args:c})};\nshaka.cast.CastSender.prototype.remoteAsyncCall_=function(a,b){goog.asserts.assert(\"video\"==a||\"player\"==a,\"Unexpected target name\");var c=Array.prototype.slice.call(arguments,2),d=new shaka.util.PublicPromise,e=this.nextAsyncCallId_.toString();this.nextAsyncCallId_++;this.asyncCallPromises_[e]=d;this.sendMessage_({type:\"asyncCall\",targetName:a,methodName:b,args:c,id:e});return d};\nshaka.cast.CastSender.prototype.onExistingSessionJoined_=function(a){shaka.log.debug(\"CastSender: onExistingSessionJoined\");var b=this.onInitStateRequired_();this.castPromise_=new shaka.util.PublicPromise;this.hasJoinedExistingSession_=!0;this.onSessionInitiated_(b,a)};shaka.cast.CastSender.prototype.onReceiverStatusChanged_=function(a){shaka.log.debug(\"CastSender: receiver status\",a);shaka.cast.CastSender.hasReceivers_=\"available\"==a;this.onStatusChanged_()};\nshaka.cast.CastSender.prototype.onSessionCreated_=function(a){shaka.cast.CastSender.session_=a;a.addUpdateListener(this.onConnectionStatusChangedBound_);a.addMessageListener(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE,this.onMessageReceivedBound_);this.onConnectionStatusChanged_()};\nshaka.cast.CastSender.prototype.removeListeners_=function(){var a=shaka.cast.CastSender.session_;a.removeUpdateListener(this.onConnectionStatusChangedBound_);a.removeMessageListener(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE,this.onMessageReceivedBound_)};\nshaka.cast.CastSender.prototype.onConnectionStatusChanged_=function(){var a=shaka.cast.CastSender.session_?\"connected\"==shaka.cast.CastSender.session_.status:!1;shaka.log.debug(\"CastSender: connection status\",a);if(this.isCasting_&&!a){this.onResumeLocal_();for(var b in this.cachedProperties_)this.cachedProperties_[b]={};this.rejectAllPromises_()}this.receiverName_=(this.isCasting_=a)?shaka.cast.CastSender.session_.receiver.friendlyName:\"\";this.onStatusChanged_()};\nshaka.cast.CastSender.prototype.rejectAllPromises_=function(){for(var a in this.asyncCallPromises_){var b=this.asyncCallPromises_[a];delete this.asyncCallPromises_[a];b.reject(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE,shaka.util.Error.Category.PLAYER,shaka.util.Error.Code.LOAD_INTERRUPTED))}};\nshaka.cast.CastSender.prototype.onMessageReceived_=function(a,b){var c=shaka.cast.CastUtils.deserialize(b);shaka.log.v2(\"CastSender: message\",c);switch(c.type){case \"event\":var d=c.targetName,e=c.event;e=new shaka.util.FakeEvent(e.type,e);this.onRemoteEvent_(d,e);break;case \"update\":e=c.update;for(d in e){c=this.cachedProperties_[d]||{};for(var f in e[d])c[f]=e[d][f]}this.hasJoinedExistingSession_&&(this.onFirstCastStateUpdate_(),this.hasJoinedExistingSession_=!1);break;case \"asyncComplete\":if(d=\nc.id,f=c.error,c=this.asyncCallPromises_[d],delete this.asyncCallPromises_[d],goog.asserts.assert(c,\"Unexpected async id\"),c)if(f){d=new shaka.util.Error(f.severity,f.category,f.code);for(e in f)d[e]=f[e];c.reject(d)}else c.resolve()}};shaka.cast.CastSender.prototype.sendMessage_=function(a){a=shaka.cast.CastUtils.serialize(a);shaka.cast.CastSender.session_.sendMessage(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE,a,function(){},shaka.log.error)};shaka.util.FakeEventTarget=function(){this.listeners_=new shaka.util.MultiMap;this.dispatchTarget=this};shaka.util.FakeEventTarget.prototype.addEventListener=function(a,b,c){this.listeners_.push(a,b)};shaka.util.FakeEventTarget.prototype.removeEventListener=function(a,b,c){this.listeners_.remove(a,b)};\nshaka.util.FakeEventTarget.prototype.dispatchEvent=function(a){goog.asserts.assert(a instanceof shaka.util.FakeEvent,\"FakeEventTarget can only dispatch FakeEvents!\");for(var b=this.listeners_.get(a.type)||[],c=0;c<b.length;++c){a.target=this.dispatchTarget;a.currentTarget=this.dispatchTarget;var d=b[c];try{d.handleEvent?d.handleEvent(a):d.call(this,a)}catch(e){shaka.log.error(\"Uncaught exception in event handler\",e,e?e.message:null,e?e.stack:null)}if(a.stopped)break}return a.defaultPrevented};shaka.cast.CastProxy=function(a,b,c){shaka.util.FakeEventTarget.call(this);this.localVideo_=a;this.localPlayer_=b;this.eventManager_=this.playerEventTarget_=this.videoEventTarget_=this.playerProxy_=this.videoProxy_=null;this.sender_=new shaka.cast.CastSender(c,this.onCastStatusChanged_.bind(this),this.onFirstCastStateUpdate_.bind(this),this.onRemoteEvent_.bind(this),this.onResumeLocal_.bind(this),this.getInitState_.bind(this));this.init_()};goog.inherits(shaka.cast.CastProxy,shaka.util.FakeEventTarget);\ngoog.exportSymbol(\"shaka.cast.CastProxy\",shaka.cast.CastProxy);shaka.cast.CastProxy.prototype.destroy=function(a){a&&this.sender_&&this.sender_.forceDisconnect();a=[this.eventManager_?this.eventManager_.destroy():null,this.localPlayer_?this.localPlayer_.destroy():null,this.sender_?this.sender_.destroy():null];this.sender_=this.eventManager_=this.playerProxy_=this.videoProxy_=this.localPlayer_=this.localVideo_=null;return Promise.all(a)};\ngoog.exportProperty(shaka.cast.CastProxy.prototype,\"destroy\",shaka.cast.CastProxy.prototype.destroy);shaka.cast.CastProxy.prototype.getVideo=function(){return this.videoProxy_};goog.exportProperty(shaka.cast.CastProxy.prototype,\"getVideo\",shaka.cast.CastProxy.prototype.getVideo);shaka.cast.CastProxy.prototype.getPlayer=function(){return this.playerProxy_};goog.exportProperty(shaka.cast.CastProxy.prototype,\"getPlayer\",shaka.cast.CastProxy.prototype.getPlayer);\nshaka.cast.CastProxy.prototype.canCast=function(){return this.sender_?this.sender_.apiReady()&&this.sender_.hasReceivers():!1};goog.exportProperty(shaka.cast.CastProxy.prototype,\"canCast\",shaka.cast.CastProxy.prototype.canCast);shaka.cast.CastProxy.prototype.isCasting=function(){return this.sender_?this.sender_.isCasting():!1};goog.exportProperty(shaka.cast.CastProxy.prototype,\"isCasting\",shaka.cast.CastProxy.prototype.isCasting);\nshaka.cast.CastProxy.prototype.receiverName=function(){return this.sender_?this.sender_.receiverName():\"\"};goog.exportProperty(shaka.cast.CastProxy.prototype,\"receiverName\",shaka.cast.CastProxy.prototype.receiverName);shaka.cast.CastProxy.prototype.cast=function(){var a=this.getInitState_();return this.sender_.cast(a).then(function(){return this.localPlayer_.unload()}.bind(this))};goog.exportProperty(shaka.cast.CastProxy.prototype,\"cast\",shaka.cast.CastProxy.prototype.cast);\nshaka.cast.CastProxy.prototype.setAppData=function(a){this.sender_.setAppData(a)};goog.exportProperty(shaka.cast.CastProxy.prototype,\"setAppData\",shaka.cast.CastProxy.prototype.setAppData);shaka.cast.CastProxy.prototype.suggestDisconnect=function(){this.sender_.showDisconnectDialog()};goog.exportProperty(shaka.cast.CastProxy.prototype,\"suggestDisconnect\",shaka.cast.CastProxy.prototype.suggestDisconnect);shaka.cast.CastProxy.prototype.forceDisconnect=function(){this.sender_.forceDisconnect()};\ngoog.exportProperty(shaka.cast.CastProxy.prototype,\"forceDisconnect\",shaka.cast.CastProxy.prototype.forceDisconnect);\nshaka.cast.CastProxy.prototype.init_=function(){this.sender_.init();this.eventManager_=new shaka.util.EventManager;shaka.cast.CastUtils.VideoEvents.forEach(function(a){this.eventManager_.listen(this.localVideo_,a,this.videoProxyLocalEvent_.bind(this))}.bind(this));shaka.cast.CastUtils.PlayerEvents.forEach(function(a){this.eventManager_.listen(this.localPlayer_,a,this.playerProxyLocalEvent_.bind(this))}.bind(this));this.videoProxy_={};for(var a in this.localVideo_)Object.defineProperty(this.videoProxy_,\na,{configurable:!1,enumerable:!0,get:this.videoProxyGet_.bind(this,a),set:this.videoProxySet_.bind(this,a)});this.playerProxy_={};for(a in this.localPlayer_)Object.defineProperty(this.playerProxy_,a,{configurable:!1,enumerable:!0,get:this.playerProxyGet_.bind(this,a)});this.videoEventTarget_=new shaka.util.FakeEventTarget;this.videoEventTarget_.dispatchTarget=this.videoProxy_;this.playerEventTarget_=new shaka.util.FakeEventTarget;this.playerEventTarget_.dispatchTarget=this.playerProxy_};\nshaka.cast.CastProxy.prototype.getInitState_=function(){var a={video:{},player:{},playerAfterLoad:{},manifest:this.localPlayer_.getManifestUri(),startTime:null};this.localVideo_.pause();shaka.cast.CastUtils.VideoInitStateAttributes.forEach(function(b){a.video[b]=this.localVideo_[b]}.bind(this));this.localVideo_.ended||(a.startTime=this.localVideo_.currentTime);shaka.cast.CastUtils.PlayerInitState.forEach(function(b){var c=b[1];b=this.localPlayer_[b[0]]();a.player[c]=b}.bind(this));shaka.cast.CastUtils.PlayerInitAfterLoadState.forEach(function(b){var c=\nb[1];b=this.localPlayer_[b[0]]();a.playerAfterLoad[c]=b}.bind(this));return a};shaka.cast.CastProxy.prototype.onCastStatusChanged_=function(){var a=new shaka.util.FakeEvent(\"caststatuschanged\");this.dispatchEvent(a)};shaka.cast.CastProxy.prototype.onFirstCastStateUpdate_=function(){var a=new shaka.util.FakeEvent(this.videoProxy_.paused?\"pause\":\"play\");this.videoEventTarget_.dispatchEvent(a)};\nshaka.cast.CastProxy.prototype.onResumeLocal_=function(){shaka.cast.CastUtils.PlayerInitState.forEach(function(a){var b=a[1];a=this.sender_.get(\"player\",a[0])();this.localPlayer_[b](a)}.bind(this));var a=this.sender_.get(\"player\",\"getManifestUri\")(),b=this.sender_.get(\"video\",\"ended\"),c=Promise.resolve(),d=this.localVideo_.autoplay,e=null;b||(e=this.sender_.get(\"video\",\"currentTime\"));a&&(this.localVideo_.autoplay=!1,c=this.localPlayer_.load(a,e),c[\"catch\"](function(a){goog.asserts.assert(a instanceof\nshaka.util.Error,\"Wrong error type!\");a=new shaka.util.FakeEvent(\"error\",{detail:a});this.localPlayer_.dispatchEvent(a)}.bind(this)));var f={};shaka.cast.CastUtils.VideoInitStateAttributes.forEach(function(a){f[a]=this.sender_.get(\"video\",a)}.bind(this));c.then(function(){shaka.cast.CastUtils.VideoInitStateAttributes.forEach(function(a){this.localVideo_[a]=f[a]}.bind(this));shaka.cast.CastUtils.PlayerInitAfterLoadState.forEach(function(a){var b=a[1];a=this.sender_.get(\"player\",a[0])();this.localPlayer_[b](a)}.bind(this));\nthis.localVideo_.autoplay=d;a&&this.localVideo_.play()}.bind(this))};\nshaka.cast.CastProxy.prototype.videoProxyGet_=function(a){if(\"addEventListener\"==a)return this.videoEventTarget_.addEventListener.bind(this.videoEventTarget_);if(\"removeEventListener\"==a)return this.videoEventTarget_.removeEventListener.bind(this.videoEventTarget_);if(this.sender_.isCasting()&&!this.sender_.hasRemoteProperties()){var b=this.localVideo_[a];if(\"function\"!=typeof b)return b}return this.sender_.isCasting()?this.sender_.get(\"video\",a):(b=this.localVideo_[a],\"function\"==typeof b&&(b=b.bind(this.localVideo_)),\nb)};shaka.cast.CastProxy.prototype.videoProxySet_=function(a,b){this.sender_.isCasting()?this.sender_.set(\"video\",a,b):this.localVideo_[a]=b};shaka.cast.CastProxy.prototype.videoProxyLocalEvent_=function(a){this.sender_.isCasting()||(a=new shaka.util.FakeEvent(a.type,a),this.videoEventTarget_.dispatchEvent(a))};\nshaka.cast.CastProxy.prototype.playerProxyGet_=function(a){return\"addEventListener\"==a?this.playerEventTarget_.addEventListener.bind(this.playerEventTarget_):\"removeEventListener\"==a?this.playerEventTarget_.removeEventListener.bind(this.playerEventTarget_):\"getMediaElement\"==a?function(){return this.videoProxy_}.bind(this):\"getNetworkingEngine\"==a?(this.sender_.isCasting()&&shaka.log.warning(\"NOTE: getNetworkingEngine() is always local!\"),this.localPlayer_.getNetworkingEngine.bind(this.localPlayer_)):\n\"getManifest\"==a?this.sender_.isCasting()?function(){shaka.log.error(\"getManifest() does not work while casting!\");return null}:this.localPlayer_.getManifest.bind(this.localPlayer_):this.sender_.isCasting()&&!this.sender_.hasRemoteProperties()&&shaka.cast.CastUtils.PlayerGetterMethods[a]||!this.sender_.isCasting()?(a=this.localPlayer_[a],goog.asserts.assert(\"function\"==typeof a,\"only methods on Player\"),a.bind(this.localPlayer_)):this.sender_.get(\"player\",a)};\nshaka.cast.CastProxy.prototype.playerProxyLocalEvent_=function(a){this.sender_.isCasting()||this.playerEventTarget_.dispatchEvent(a)};shaka.cast.CastProxy.prototype.onRemoteEvent_=function(a,b){goog.asserts.assert(this.sender_.isCasting(),\"Should only receive remote events while casting\");this.sender_.isCasting()&&(\"video\"==a?this.videoEventTarget_.dispatchEvent(b):\"player\"==a&&this.playerEventTarget_.dispatchEvent(b))};shaka.cast.CastReceiver=function(a,b,c,d){shaka.util.FakeEventTarget.call(this);this.video_=a;this.player_=b;this.targets_={video:a,player:b};this.appDataCallback_=c||function(){};this.opt_contentIdCallback_=d||function(a){return a};this.isConnected_=!1;this.isIdle_=!0;this.updateNumber_=0;this.startUpdatingUpdateNumber_=!1;this.initialStatusUpdatePending_=!0;this.pollTimerId_=this.genericBus_=this.shakaBus_=null;this.init_()};goog.inherits(shaka.cast.CastReceiver,shaka.util.FakeEventTarget);\ngoog.exportSymbol(\"shaka.cast.CastReceiver\",shaka.cast.CastReceiver);shaka.cast.CastReceiver.prototype.isConnected=function(){return this.isConnected_};goog.exportProperty(shaka.cast.CastReceiver.prototype,\"isConnected\",shaka.cast.CastReceiver.prototype.isConnected);shaka.cast.CastReceiver.prototype.isIdle=function(){return this.isIdle_};goog.exportProperty(shaka.cast.CastReceiver.prototype,\"isIdle\",shaka.cast.CastReceiver.prototype.isIdle);\nshaka.cast.CastReceiver.prototype.destroy=function(){var a=this.player_?this.player_.destroy():Promise.resolve();null!=this.pollTimerId_&&window.clearTimeout(this.pollTimerId_);this.appDataCallback_=this.targets_=this.player_=this.video_=null;this.isConnected_=!1;this.isIdle_=!0;this.pollTimerId_=this.genericBus_=this.shakaBus_=null;return a.then(function(){cast.receiver.CastReceiverManager.getInstance().stop()})};goog.exportProperty(shaka.cast.CastReceiver.prototype,\"destroy\",shaka.cast.CastReceiver.prototype.destroy);\nshaka.cast.CastReceiver.prototype.init_=function(){var a=cast.receiver.CastReceiverManager.getInstance();a.onSenderConnected=this.onSendersChanged_.bind(this);a.onSenderDisconnected=this.onSendersChanged_.bind(this);a.onSystemVolumeChanged=this.fakeVolumeChangeEvent_.bind(this);this.genericBus_=a.getCastMessageBus(shaka.cast.CastUtils.GENERIC_MESSAGE_NAMESPACE);this.genericBus_.onMessage=this.onGenericMessage_.bind(this);this.shakaBus_=a.getCastMessageBus(shaka.cast.CastUtils.SHAKA_MESSAGE_NAMESPACE);\nthis.shakaBus_.onMessage=this.onShakaMessage_.bind(this);goog.DEBUG?0<=navigator.userAgent.indexOf(\"CrKey\")&&a.start():a.start();shaka.cast.CastUtils.VideoEvents.forEach(function(a){this.video_.addEventListener(a,this.proxyEvent_.bind(this,\"video\"))}.bind(this));shaka.cast.CastUtils.PlayerEvents.forEach(function(a){this.player_.addEventListener(a,this.proxyEvent_.bind(this,\"player\"))}.bind(this));cast.__platform__&&cast.__platform__.canDisplayType('video/mp4; codecs=\"avc1.640028\"; width=3840; height=2160')?\nthis.player_.setMaxHardwareResolution(3840,2160):this.player_.setMaxHardwareResolution(1920,1080);this.video_.addEventListener(\"loadeddata\",function(){this.startUpdatingUpdateNumber_=!0}.bind(this));this.player_.addEventListener(\"loading\",function(){this.isIdle_=!1;this.onCastStatusChanged_()}.bind(this));this.video_.addEventListener(\"playing\",function(){this.isIdle_=!1;this.onCastStatusChanged_()}.bind(this));this.video_.addEventListener(\"pause\",function(){this.onCastStatusChanged_()}.bind(this));\nthis.player_.addEventListener(\"unloading\",function(){this.isIdle_=!0;this.onCastStatusChanged_()}.bind(this));this.video_.addEventListener(\"ended\",function(){window.setTimeout(function(){this.video_&&this.video_.ended&&(this.isIdle_=!0,this.onCastStatusChanged_())}.bind(this),5E3)}.bind(this))};\nshaka.cast.CastReceiver.prototype.onSendersChanged_=function(){this.updateNumber_=0;this.initialStatusUpdatePending_=!0;this.isConnected_=0!=cast.receiver.CastReceiverManager.getInstance().getSenders().length;this.onCastStatusChanged_()};shaka.cast.CastReceiver.prototype.onCastStatusChanged_=function(){Promise.resolve().then(function(){var a=new shaka.util.FakeEvent(\"caststatuschanged\");this.dispatchEvent(a);this.maybeSendMediaInfoMessage_()||this.sendMediaStatus_(0)}.bind(this))};\nshaka.cast.CastReceiver.prototype.initState_=function(a,b){for(var c in a.player)this.player_[c](a.player[c]);this.appDataCallback_(b);c=Promise.resolve();var d=this.video_.autoplay;a.manifest&&(this.video_.autoplay=!1,c=this.player_.load(a.manifest,a.startTime),c[\"catch\"](function(a){goog.asserts.assert(a instanceof shaka.util.Error,\"Wrong error type!\");a=new shaka.util.FakeEvent(\"error\",{detail:a});this.player_.dispatchEvent(a)}.bind(this)));c.then(function(){for(var b in a.video){var c=a.video[b];\nthis.video_[b]=c}for(b in a.playerAfterLoad)c=a.playerAfterLoad[b],this.player_[b](c);this.video_.autoplay=d;a.manifest&&(this.video_.play(),this.sendMediaStatus_(0))}.bind(this))};shaka.cast.CastReceiver.prototype.proxyEvent_=function(a,b){this.player_&&(this.pollAttributes_(),this.sendMessage_({type:\"event\",targetName:a,event:b},this.shakaBus_))};\nshaka.cast.CastReceiver.prototype.pollAttributes_=function(){null!=this.pollTimerId_&&window.clearTimeout(this.pollTimerId_);this.pollTimerId_=window.setTimeout(this.pollAttributes_.bind(this),500);var a={video:{},player:{}};shaka.cast.CastUtils.VideoAttributes.forEach(function(b){a.video[b]=this.video_[b]}.bind(this));if(this.player_.isLive())for(var b in shaka.cast.CastUtils.PlayerGetterMethodsThatRequireLive){var c=shaka.cast.CastUtils.PlayerGetterMethodsThatRequireLive[b];0==this.updateNumber_%\nc&&(a.player[b]=this.player_[b]())}for(b in shaka.cast.CastUtils.PlayerGetterMethods)c=shaka.cast.CastUtils.PlayerGetterMethods[b],0==this.updateNumber_%c&&(a.player[b]=this.player_[b]());if(b=cast.receiver.CastReceiverManager.getInstance().getSystemVolume())a.video.volume=b.level,a.video.muted=b.muted;this.startUpdatingUpdateNumber_&&(this.updateNumber_+=1);this.sendMessage_({type:\"update\",update:a},this.shakaBus_);this.maybeSendMediaInfoMessage_()};\nshaka.cast.CastReceiver.prototype.maybeSendMediaInfoMessage_=function(){return this.initialStatusUpdatePending_&&(this.video_.duration||this.player_.isLive())?(this.sendMediaInfoMessage_(),this.initialStatusUpdatePending_=!1,!0):!1};shaka.cast.CastReceiver.prototype.sendMediaInfoMessage_=function(){var a={contentId:this.player_.getManifestUri(),streamType:this.player_.isLive()?\"LIVE\":\"BUFFERED\",duration:this.video_.duration,contentType:\"\"};this.sendMediaStatus_(0,a)};\nshaka.cast.CastReceiver.prototype.fakeVolumeChangeEvent_=function(){var a=cast.receiver.CastReceiverManager.getInstance().getSystemVolume();goog.asserts.assert(a,\"System volume should not be null!\");a&&this.sendMessage_({type:\"update\",update:{video:{volume:a.level,muted:a.muted}}},this.shakaBus_);this.sendMessage_({type:\"event\",targetName:\"video\",event:{type:\"volumechange\"}},this.shakaBus_)};\nshaka.cast.CastReceiver.prototype.onShakaMessage_=function(a){var b=shaka.cast.CastUtils.deserialize(a.data);shaka.log.debug(\"CastReceiver: message\",b);switch(b.type){case \"init\":this.updateNumber_=0;this.startUpdatingUpdateNumber_=!1;this.initialStatusUpdatePending_=!0;this.initState_(b.initState,b.appData);this.pollAttributes_();break;case \"appData\":this.appDataCallback_(b.appData);break;case \"set\":var c=b.targetName,d=b.property,e=b.value;if(\"video\"==c)if(b=cast.receiver.CastReceiverManager.getInstance(),\n\"volume\"==d){b.setSystemVolumeLevel(e);break}else if(\"muted\"==d){b.setSystemVolumeMuted(e);break}this.targets_[c][d]=e;break;case \"call\":c=b.targetName;d=b.methodName;e=b.args;var f=this.targets_[c];f[d].apply(f,e);break;case \"asyncCall\":c=b.targetName,d=b.methodName,\"player\"==c&&\"load\"==d&&(this.updateNumber_=0,this.startUpdatingUpdateNumber_=!1),e=b.args,b=b.id,a=a.senderId,f=this.targets_[c],e=f[d].apply(f,e),\"player\"==c&&\"load\"==d&&(e=e.then(function(){this.initialStatusUpdatePending_=!0}.bind(this))),\ne.then(this.sendAsyncComplete_.bind(this,a,b,null),this.sendAsyncComplete_.bind(this,a,b))}};\nshaka.cast.CastReceiver.prototype.onGenericMessage_=function(a){var b=shaka.cast.CastUtils.deserialize(a.data);shaka.log.debug(\"CastReceiver: message\",b);switch(b.type){case \"PLAY\":this.video_.play();this.sendMediaStatus_(0);break;case \"PAUSE\":this.video_.pause();this.sendMediaStatus_(0);break;case \"SEEK\":a=b.currentTime;var c=b.resumeState;null!=a&&(this.video_.currentTime=Number(a));c&&\"PLAYBACK_START\"==c?(this.video_.play(),this.sendMediaStatus_(0)):c&&\"PLAYBACK_PAUSE\"==c&&(this.video_.pause(),\nthis.sendMediaStatus_(0));break;case \"STOP\":this.player_.unload().then(function(){this.sendMediaStatus_(0)}.bind(this));break;case \"GET_STATUS\":this.sendMediaStatus_(Number(b.requestId));break;case \"VOLUME\":c=b.volume;a=c.level;c=c.muted;var d=this.video_.volume,e=this.video_.muted;null!=a&&(this.video_.volume=Number(a));null!=c&&(this.video_.muted=c);d==this.video_.volume&&e==this.video_.muted||this.sendMediaStatus_(0);break;case \"LOAD\":this.updateNumber_=0;this.initialStatusUpdatePending_=this.startUpdatingUpdateNumber_=\n!1;c=b.media.contentId;a=b.currentTime;c=this.opt_contentIdCallback_(c);this.video_.autoplay=!0;this.player_.load(c,a).then(function(){this.sendMediaInfoMessage_()}.bind(this))[\"catch\"](function(a){var c=\"LOAD_FAILED\";a.category==shaka.util.Error.Category.PLAYER&&a.code==shaka.util.Error.Code.LOAD_INTERRUPTED&&(c=\"LOAD_CANCELLED\");this.sendMessage_({requestId:Number(b.requestId),type:c},this.genericBus_)}.bind(this));break;default:shaka.log.warning(\"Unrecognized message type from the generic Chromecast controller!\",\nb.type),this.sendMessage_({requestId:Number(b.requestId),type:\"INVALID_REQUEST\",reason:\"INVALID_COMMAND\"},this.genericBus_)}};shaka.cast.CastReceiver.prototype.sendAsyncComplete_=function(a,b,c){this.sendMessage_({type:\"asyncComplete\",id:b,error:c},this.shakaBus_,a)};shaka.cast.CastReceiver.prototype.sendMessage_=function(a,b,c){this.isConnected_&&(a=shaka.cast.CastUtils.serialize(a),c?b.getCastChannel(c).send(a):b.broadcast(a))};\nshaka.cast.CastReceiver.prototype.getPlayState_=function(){var a=shaka.cast.CastReceiver.PLAY_STATE;return this.isIdle_?a.IDLE:this.player_.isBuffering()?a.BUFFERING:this.video_.paused?a.PAUSED:a.PLAYING};\nshaka.cast.CastReceiver.prototype.sendMediaStatus_=function(a,b){var c={mediaSessionId:0,playbackRate:this.video_.playbackRate,playerState:this.getPlayState_(),currentTime:this.video_.currentTime,supportedMediaCommands:15,volume:{level:this.video_.volume,muted:this.video_.muted}};b&&(c.media=b);this.sendMessage_({requestId:a,type:\"MEDIA_STATUS\",status:[c]},this.genericBus_)};shaka.cast.CastReceiver.PLAY_STATE={IDLE:\"IDLE\",PLAYING:\"PLAYING\",BUFFERING:\"BUFFERING\",PAUSED:\"PAUSED\"};shaka.util.XmlUtils={};shaka.util.XmlUtils.findChild=function(a,b){var c=shaka.util.XmlUtils.findChildren(a,b);return 1!=c.length?null:c[0]};shaka.util.XmlUtils.findChildren=function(a,b){return Array.prototype.filter.call(a.childNodes,function(a){return a instanceof Element&&a.tagName==b})};shaka.util.XmlUtils.getContents=function(a){var b=a.firstChild;return b&&b.nodeType==Node.TEXT_NODE?a.textContent.trim():null};\nshaka.util.XmlUtils.parseAttr=function(a,b,c,d){var e=null;a=a.getAttribute(b);null!=a&&(e=c(a));return null==e?void 0!=d?d:null:e};shaka.util.XmlUtils.parseDate=function(a){if(!a)return null;/^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/.test(a)&&(a+=\"Z\");a=Date.parse(a);return isNaN(a)?null:Math.floor(a/1E3)};\nshaka.util.XmlUtils.parseDuration=function(a){if(!a)return null;var b=/^P(?:([0-9]*)Y)?(?:([0-9]*)M)?(?:([0-9]*)D)?(?:T(?:([0-9]*)H)?(?:([0-9]*)M)?(?:([0-9.]*)S)?)?$/.exec(a);if(!b)return shaka.log.warning(\"Invalid duration string:\",a),null;a=31536E3*Number(b[1]||null)+2592E3*Number(b[2]||null)+86400*Number(b[3]||null)+3600*Number(b[4]||null)+60*Number(b[5]||null)+Number(b[6]||null);return isFinite(a)?a:null};\nshaka.util.XmlUtils.parseRange=function(a){var b=/([0-9]+)-([0-9]+)/.exec(a);if(!b)return null;a=Number(b[1]);if(!isFinite(a))return null;b=Number(b[2]);return isFinite(b)?{start:a,end:b}:null};shaka.util.XmlUtils.parseInt=function(a){a=Number(a);return 0===a%1?a:null};shaka.util.XmlUtils.parsePositiveInt=function(a){a=Number(a);return 0===a%1&&0<a?a:null};shaka.util.XmlUtils.parseNonNegativeInt=function(a){a=Number(a);return 0===a%1&&0<=a?a:null};\nshaka.util.XmlUtils.parseFloat=function(a){a=Number(a);return isNaN(a)?null:a};shaka.util.XmlUtils.evalDivision=function(a){var b;a=(b=a.match(/^(\\d+)\\/(\\d+)$/))?Number(b[1]/b[2]):Number(a);return isNaN(a)?null:a};shaka.dash={};shaka.dash.ContentProtection={};shaka.dash.ContentProtection.defaultKeySystems_={\"urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b\":\"org.w3.clearkey\",\"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed\":\"com.widevine.alpha\",\"urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95\":\"com.microsoft.playready\",\"urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb\":\"com.adobe.primetime\"};shaka.dash.ContentProtection.MP4Protection_=\"urn:mpeg:dash:mp4protection:2011\";\nshaka.dash.ContentProtection.parseFromAdaptationSet=function(a,b,c){var d=shaka.dash.ContentProtection,e=shaka.util.Functional,f=shaka.util.MapUtils,g=shaka.util.ManifestParserUtils;a=d.parseElements_(a);var h=null,k=[],l=[],m=a.map(function(a){return a.keyId}).filter(e.isNotNull);if(m.length&&1<m.filter(e.isNotDuplicate).length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_CONFLICTING_KEY_IDS);c||(l=a.filter(function(a){return a.schemeUri==\nd.MP4Protection_?(goog.asserts.assert(!a.init||a.init.length,\"Init data must be null or non-empty.\"),h=a.init||h,!1):!0}),l.length&&(k=d.convertElements_(h,b,l),0==k.length&&(k=[g.createDrmInfo(\"\",h)])));!a.length||!c&&l.length||(k=f.values(d.defaultKeySystems_).map(function(a){return g.createDrmInfo(a,h)}));var n=m[0]||null;n&&k.forEach(function(a){a.initData.forEach(function(a){a.keyId=n})});return{defaultKeyId:n,defaultInit:h,drmInfos:k,firstRepresentation:!0}};\nshaka.dash.ContentProtection.parseFromRepresentation=function(a,b,c,d){var e=shaka.dash.ContentProtection.parseFromAdaptationSet(a,b,d);if(c.firstRepresentation){a=1==c.drmInfos.length&&!c.drmInfos[0].keySystem;b=0==e.drmInfos.length;if(0==c.drmInfos.length||a&&!b)c.drmInfos=e.drmInfos;c.firstRepresentation=!1}else if(0<e.drmInfos.length&&(c.drmInfos=c.drmInfos.filter(function(a){return e.drmInfos.some(function(b){return b.keySystem==a.keySystem})}),0==c.drmInfos.length))throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_NO_COMMON_KEY_SYSTEM);return e.defaultKeyId||c.defaultKeyId};\nshaka.dash.ContentProtection.convertElements_=function(a,b,c){var d=shaka.util.Functional;return c.map(function(c){var d=shaka.util.ManifestParserUtils,e=shaka.dash.ContentProtection.defaultKeySystems_[c.schemeUri];if(e)return goog.asserts.assert(!c.init||c.init.length,\"Init data must be null or non-empty.\"),[d.createDrmInfo(e,c.init||a)];goog.asserts.assert(b,\"ContentProtection callback is required\");return b(c.node)||[]}).reduce(d.collapseArrays,[])};\nshaka.dash.ContentProtection.parseElements_=function(a){var b=shaka.util.Functional;return a.map(function(a){var b=a.getAttribute(\"schemeIdUri\"),c=a.getAttribute(\"cenc:default_KID\"),f=shaka.util.XmlUtils.findChildren(a,\"cenc:pssh\").map(shaka.util.XmlUtils.getContents);if(!b)return shaka.log.error(\"Missing required schemeIdUri attribute on\",\"ContentProtection element\",a),null;b=b.toLowerCase();if(c&&(c=c.replace(/-/g,\"\").toLowerCase(),0<=c.indexOf(\" \")))throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED);var g=[];try{g=f.map(function(a){return{initDataType:\"cenc\",initData:shaka.util.Uint8ArrayUtils.fromBase64(a),keyId:null}})}catch(h){throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_PSSH_BAD_ENCODING);}return{node:a,schemeUri:b,keyId:c,init:0<g.length?g:null}}).filter(b.isNotNull)};shaka.dash.MpdUtils={};\nshaka.dash.MpdUtils.fillUriTemplate=function(a,b,c,d,e){null!=e&&(goog.asserts.assert(.2>Math.abs(e-Math.round(e)),\"Calculated $Time$ values must be close to integers!\"),e=Math.round(e));var f={RepresentationID:b,Number:c,Bandwidth:d,Time:e};return a.replace(/\\$(RepresentationID|Number|Bandwidth|Time)?(?:%0([0-9]+)d)?\\$/g,function(b,c,d){if(\"$$\"==b)return\"$\";var e=f[c];goog.asserts.assert(void 0!==e,\"Unrecognized identifier\");if(null==e)return shaka.log.warning(\"URL template does not have an available substitution for identifier\",'\"'+\nc+'\":',a),b;\"RepresentationID\"==c&&d&&(shaka.log.warning(\"URL template should not contain a width specifier for identifier\",'\"RepresentationID\":',a),d=void 0);b=e.toString();d=window.parseInt(d,10)||1;return Array(Math.max(0,d-b.length)+1).join(\"0\")+b})};\nshaka.dash.MpdUtils.createTimeline=function(a,b,c,d){goog.asserts.assert(0<b&&Infinity>b,\"timescale must be a positive, finite integer\");goog.asserts.assert(0<d,\"period duration must be a positive integer\");var e=shaka.util.XmlUtils;a=e.findChildren(a,\"S\");for(var f=[],g=0,h=0;h<a.length;++h){var k=a[h],l=e.parseAttr(k,\"t\",e.parseNonNegativeInt),m=e.parseAttr(k,\"d\",e.parseNonNegativeInt),n=e.parseAttr(k,\"r\",e.parseInt);null!=l&&(l-=c);if(!m){shaka.log.warning('\"S\" element must have a duration:','ignoring the remaining \"S\" elements.',\nk);break}l=null!=l?l:g;n=n||0;if(0>n)if(h+1<a.length){n=e.parseAttr(a[h+1],\"t\",e.parseNonNegativeInt);if(null==n){shaka.log.warning('\"S\" element cannot have a negative repeat','if the next \"S\" element does not have a valid start time:','ignoring the remaining \"S\" elements.',k);break}else if(l>=n){shaka.log.warning('\"S\" element cannot have a negative repeat','if its start time exceeds the next \"S\" element\\'s start time:','ignoring the remaining \"S\" elements.',k);break}n=Math.ceil((n-l)/m)-1}else{if(Infinity==\nd){shaka.log.warning('The last \"S\" element cannot have a negative repeat',\"if the Period has an infinite duration:\",'ignoring the last \"S\" element.',k);break}else if(l/b>=d){shaka.log.warning('The last \"S\" element cannot have a negative repeat',\"if its start time exceeds the Period's duration:\",'igoring the last \"S\" element.',k);break}n=Math.ceil((d*b-l)/m)-1}0<f.length&&l!=g&&(Math.abs((l-g)/b)>=shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS&&shaka.log.warning(\"SegmentTimeline contains a large gap/overlap:\",\n\"the content may have errors in it.\",k),f[f.length-1].end=l/b);for(k=0;k<=n;++k)g=l+m,f.push({start:l/b,end:g/b,unscaledStart:l}),l=g}return f};\nshaka.dash.MpdUtils.parseSegmentInfo=function(a,b){goog.asserts.assert(b(a.representation),\"There must be at least one element of the given type.\");var c=shaka.dash.MpdUtils,d=shaka.util.XmlUtils,e=c.inheritAttribute(a,b,\"timescale\"),f=1;e&&(f=d.parsePositiveInt(e)||1);e=c.inheritAttribute(a,b,\"duration\");(e=d.parsePositiveInt(e||\"\"))&&(e/=f);var g=c.inheritAttribute(a,b,\"startNumber\"),h=Number(c.inheritAttribute(a,b,\"presentationTimeOffset\"))||0;d=d.parseNonNegativeInt(g||\"\");if(null==g||null==d)d=\n1;g=c.inheritChild(a,b,\"SegmentTimeline\");var k=null;g&&(k=c.createTimeline(g,f,h,a.periodInfo.duration||Infinity));return{timescale:f,segmentDuration:e,startNumber:d,scaledPresentationTimeOffset:h/f||0,unscaledPresentationTimeOffset:h,timeline:k}};\nshaka.dash.MpdUtils.inheritAttribute=function(a,b,c){var d=shaka.util.Functional;goog.asserts.assert(b(a.representation),\"There must be at least one element of the given type\");return[b(a.representation),b(a.adaptationSet),b(a.period)].filter(d.isNotNull).map(function(a){return a.getAttribute(c)}).reduce(function(a,b){return a||b})};\nshaka.dash.MpdUtils.inheritChild=function(a,b,c){var d=shaka.util.Functional;goog.asserts.assert(b(a.representation),\"There must be at least one element of the given type\");a=[b(a.representation),b(a.adaptationSet),b(a.period)].filter(d.isNotNull);var e=shaka.util.XmlUtils;return a.map(function(a){return e.findChild(a,c)}).reduce(function(a,b){return a||b})};\nshaka.dash.MpdUtils.parseXml=function(a,b){var c=new DOMParser;try{var d=shaka.util.StringUtils.fromUTF8(a);var e=c.parseFromString(d,\"text/xml\")}catch(g){}if(e&&e.documentElement.tagName==b)var f=e.documentElement;return f&&0<f.getElementsByTagName(\"parsererror\").length?null:f};\nshaka.dash.MpdUtils.handleXlinkInElement_=function(a,b,c,d,e,f){for(var g=shaka.dash.MpdUtils,h=shaka.util.Error,k=shaka.util.ManifestParserUtils,l=a.getAttribute(\"xlink:href\"),m=a.getAttribute(\"xlink:actuate\")||\"onRequest\",n=0;n<a.attributes.length;n++){var p=a.attributes[n].nodeName;-1!=p.indexOf(\"xlink:\")&&(a.removeAttribute(p),--n)}if(5<=f)return Promise.reject(new h(h.Severity.CRITICAL,h.Category.MANIFEST,h.Code.DASH_XLINK_DEPTH_LIMIT));if(\"onLoad\"!=m)return Promise.reject(new h(h.Severity.CRITICAL,\nh.Category.MANIFEST,h.Code.DASH_UNSUPPORTED_XLINK_ACTUATE));var q=k.resolveUris([d],[l]);d=shaka.net.NetworkingEngine.RequestType.MANIFEST;k=shaka.net.NetworkingEngine.makeRequest(q,b);return e.request(d,k).then(function(d){d=g.parseXml(d.data,a.tagName);if(!d)return Promise.reject(new h(h.Severity.CRITICAL,h.Category.MANIFEST,h.Code.DASH_INVALID_XML,l));for(;a.childNodes.length;)a.removeChild(a.childNodes[0]);for(;d.childNodes.length;){var k=d.childNodes[0];d.removeChild(k);a.appendChild(k)}for(k=\n0;k<d.attributes.length;k++){var m=d.attributes[k].nodeName,n=d.getAttribute(m);a.setAttribute(m,n)}return shaka.dash.MpdUtils.processXlinks(a,b,c,q[0],e,f+1)}.bind(a))};\nshaka.dash.MpdUtils.processXlinks=function(a,b,c,d,e,f){var g=shaka.dash.MpdUtils;f=f||0;if(a.getAttribute(\"xlink:href\")){var h=g.handleXlinkInElement_(a,b,c,d,e,f);c&&(h=h[\"catch\"](function(){return g.processXlinks(a,b,c,d,e,f)}));return h}for(h=0;h<a.childNodes.length;h++){var k=a.childNodes[h];k instanceof Element&&\"urn:mpeg:dash:resolve-to-zero:2013\"==k.getAttribute(\"xlink:href\")&&(a.removeChild(k),--h)}var l=[];for(h=0;h<a.childNodes.length;h++)k=a.childNodes[h],k.nodeType==Node.ELEMENT_NODE&&\n(k=shaka.dash.MpdUtils.processXlinks(k,b,c,d,e,f),l.push(k));return Promise.all(l).then(function(){return a})};shaka.media.InitSegmentReference=function(a,b,c){this.getUris=a;this.startByte=b;this.endByte=c};goog.exportSymbol(\"shaka.media.InitSegmentReference\",shaka.media.InitSegmentReference);shaka.media.InitSegmentReference.prototype.createUris=function(){return this.getUris()};goog.exportProperty(shaka.media.InitSegmentReference.prototype,\"createUris\",shaka.media.InitSegmentReference.prototype.createUris);shaka.media.InitSegmentReference.prototype.getStartByte=function(){return this.startByte};\ngoog.exportProperty(shaka.media.InitSegmentReference.prototype,\"getStartByte\",shaka.media.InitSegmentReference.prototype.getStartByte);shaka.media.InitSegmentReference.prototype.getEndByte=function(){return this.endByte};goog.exportProperty(shaka.media.InitSegmentReference.prototype,\"getEndByte\",shaka.media.InitSegmentReference.prototype.getEndByte);\nshaka.media.SegmentReference=function(a,b,c,d,e,f){goog.asserts.assert(b<c,\"startTime must be less than endTime\");goog.asserts.assert(e<f||null==f,\"startByte must be < endByte\");this.position=a;this.startTime=b;this.endTime=c;this.getUris=d;this.startByte=e;this.endByte=f};goog.exportSymbol(\"shaka.media.SegmentReference\",shaka.media.SegmentReference);shaka.media.SegmentReference.prototype.getPosition=function(){return this.position};\ngoog.exportProperty(shaka.media.SegmentReference.prototype,\"getPosition\",shaka.media.SegmentReference.prototype.getPosition);shaka.media.SegmentReference.prototype.getStartTime=function(){return this.startTime};goog.exportProperty(shaka.media.SegmentReference.prototype,\"getStartTime\",shaka.media.SegmentReference.prototype.getStartTime);shaka.media.SegmentReference.prototype.getEndTime=function(){return this.endTime};goog.exportProperty(shaka.media.SegmentReference.prototype,\"getEndTime\",shaka.media.SegmentReference.prototype.getEndTime);\nshaka.media.SegmentReference.prototype.createUris=function(){return this.getUris()};goog.exportProperty(shaka.media.SegmentReference.prototype,\"createUris\",shaka.media.SegmentReference.prototype.createUris);shaka.media.SegmentReference.prototype.getStartByte=function(){return this.startByte};goog.exportProperty(shaka.media.SegmentReference.prototype,\"getStartByte\",shaka.media.SegmentReference.prototype.getStartByte);shaka.media.SegmentReference.prototype.getEndByte=function(){return this.endByte};\ngoog.exportProperty(shaka.media.SegmentReference.prototype,\"getEndByte\",shaka.media.SegmentReference.prototype.getEndByte);shaka.util.DataViewReader=function(a,b){this.dataView_=a;this.littleEndian_=b==shaka.util.DataViewReader.Endianness.LITTLE_ENDIAN;this.position_=0};goog.exportSymbol(\"shaka.util.DataViewReader\",shaka.util.DataViewReader);shaka.util.DataViewReader.Endianness={BIG_ENDIAN:0,LITTLE_ENDIAN:1};goog.exportProperty(shaka.util.DataViewReader,\"Endianness\",shaka.util.DataViewReader.Endianness);shaka.util.DataViewReader.prototype.hasMoreData=function(){return this.position_<this.dataView_.byteLength};\ngoog.exportProperty(shaka.util.DataViewReader.prototype,\"hasMoreData\",shaka.util.DataViewReader.prototype.hasMoreData);shaka.util.DataViewReader.prototype.getPosition=function(){return this.position_};goog.exportProperty(shaka.util.DataViewReader.prototype,\"getPosition\",shaka.util.DataViewReader.prototype.getPosition);shaka.util.DataViewReader.prototype.getLength=function(){return this.dataView_.byteLength};goog.exportProperty(shaka.util.DataViewReader.prototype,\"getLength\",shaka.util.DataViewReader.prototype.getLength);\nshaka.util.DataViewReader.prototype.readUint8=function(){try{var a=this.dataView_.getUint8(this.position_);this.position_+=1;return a}catch(b){this.throwOutOfBounds_()}};goog.exportProperty(shaka.util.DataViewReader.prototype,\"readUint8\",shaka.util.DataViewReader.prototype.readUint8);shaka.util.DataViewReader.prototype.readUint16=function(){try{var a=this.dataView_.getUint16(this.position_,this.littleEndian_);this.position_+=2;return a}catch(b){this.throwOutOfBounds_()}};\ngoog.exportProperty(shaka.util.DataViewReader.prototype,\"readUint16\",shaka.util.DataViewReader.prototype.readUint16);shaka.util.DataViewReader.prototype.readUint32=function(){try{var a=this.dataView_.getUint32(this.position_,this.littleEndian_);this.position_+=4;return a}catch(b){this.throwOutOfBounds_()}};goog.exportProperty(shaka.util.DataViewReader.prototype,\"readUint32\",shaka.util.DataViewReader.prototype.readUint32);\nshaka.util.DataViewReader.prototype.readInt32=function(){try{var a=this.dataView_.getInt32(this.position_,this.littleEndian_);this.position_+=4;return a}catch(b){this.throwOutOfBounds_()}};goog.exportProperty(shaka.util.DataViewReader.prototype,\"readInt32\",shaka.util.DataViewReader.prototype.readInt32);\nshaka.util.DataViewReader.prototype.readUint64=function(){try{if(this.littleEndian_){var a=this.dataView_.getUint32(this.position_,!0);var b=this.dataView_.getUint32(this.position_+4,!0)}else b=this.dataView_.getUint32(this.position_,!1),a=this.dataView_.getUint32(this.position_+4,!1)}catch(c){this.throwOutOfBounds_()}if(2097151<b)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.JS_INTEGER_OVERFLOW);this.position_+=8;return b*Math.pow(2,\n32)+a};goog.exportProperty(shaka.util.DataViewReader.prototype,\"readUint64\",shaka.util.DataViewReader.prototype.readUint64);shaka.util.DataViewReader.prototype.readBytes=function(a){goog.asserts.assert(0<a,\"Bad call to DataViewReader.readBytes\");this.position_+a>this.dataView_.byteLength&&this.throwOutOfBounds_();var b=new Uint8Array(this.dataView_.buffer,this.dataView_.byteOffset+this.position_,a);this.position_+=a;return new Uint8Array(b)};\ngoog.exportProperty(shaka.util.DataViewReader.prototype,\"readBytes\",shaka.util.DataViewReader.prototype.readBytes);shaka.util.DataViewReader.prototype.skip=function(a){goog.asserts.assert(0<=a,\"Bad call to DataViewReader.skip\");this.position_+a>this.dataView_.byteLength&&this.throwOutOfBounds_();this.position_+=a};goog.exportProperty(shaka.util.DataViewReader.prototype,\"skip\",shaka.util.DataViewReader.prototype.skip);\nshaka.util.DataViewReader.prototype.rewind=function(a){goog.asserts.assert(0<=a,\"Bad call to DataViewReader.rewind\");this.position_<a&&this.throwOutOfBounds_();this.position_-=a};goog.exportProperty(shaka.util.DataViewReader.prototype,\"rewind\",shaka.util.DataViewReader.prototype.rewind);shaka.util.DataViewReader.prototype.seek=function(a){goog.asserts.assert(0<=a,\"Bad call to DataViewReader.seek\");(0>a||a>this.dataView_.byteLength)&&this.throwOutOfBounds_();this.position_=a};\ngoog.exportProperty(shaka.util.DataViewReader.prototype,\"seek\",shaka.util.DataViewReader.prototype.seek);shaka.util.DataViewReader.prototype.readTerminatedString=function(){for(var a=this.position_;this.hasMoreData()&&0!=this.dataView_.getUint8(this.position_);)this.position_+=1;a=new Uint8Array(this.dataView_.buffer,this.dataView_.byteOffset+a,this.position_-a);this.position_+=1;return shaka.util.StringUtils.fromUTF8(a)};\ngoog.exportProperty(shaka.util.DataViewReader.prototype,\"readTerminatedString\",shaka.util.DataViewReader.prototype.readTerminatedString);shaka.util.DataViewReader.prototype.throwOutOfBounds_=function(){throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.BUFFER_READ_OUT_OF_BOUNDS);};shaka.util.Mp4Parser=function(){this.headers_=[];this.boxDefinitions_=[];this.done_=!1};goog.exportSymbol(\"shaka.util.Mp4Parser\",shaka.util.Mp4Parser);shaka.util.Mp4Parser.BoxType_={BASIC_BOX:0,FULL_BOX:1};shaka.util.Mp4Parser.prototype.box=function(a,b){var c=shaka.util.Mp4Parser.typeFromString_(a);this.headers_[c]=shaka.util.Mp4Parser.BoxType_.BASIC_BOX;this.boxDefinitions_[c]=b;return this};goog.exportProperty(shaka.util.Mp4Parser.prototype,\"box\",shaka.util.Mp4Parser.prototype.box);\nshaka.util.Mp4Parser.prototype.fullBox=function(a,b){var c=shaka.util.Mp4Parser.typeFromString_(a);this.headers_[c]=shaka.util.Mp4Parser.BoxType_.FULL_BOX;this.boxDefinitions_[c]=b;return this};goog.exportProperty(shaka.util.Mp4Parser.prototype,\"fullBox\",shaka.util.Mp4Parser.prototype.fullBox);shaka.util.Mp4Parser.prototype.stop=function(){this.done_=!0};goog.exportProperty(shaka.util.Mp4Parser.prototype,\"stop\",shaka.util.Mp4Parser.prototype.stop);\nshaka.util.Mp4Parser.prototype.parse=function(a,b){var c=new Uint8Array(a);c=new shaka.util.DataViewReader(new DataView(c.buffer,c.byteOffset,c.byteLength),shaka.util.DataViewReader.Endianness.BIG_ENDIAN);for(this.done_=!1;c.hasMoreData()&&!this.done_;)this.parseNext(0,c,b)};goog.exportProperty(shaka.util.Mp4Parser.prototype,\"parse\",shaka.util.Mp4Parser.prototype.parse);\nshaka.util.Mp4Parser.prototype.parseNext=function(a,b,c){var d=b.getPosition(),e=b.readUint32(),f=b.readUint32(),g=shaka.util.Mp4Parser.typeToString_(f);shaka.log.v2(\"Parsing MP4 box\",g);switch(e){case 0:e=b.getLength()-d;break;case 1:e=b.readUint64()}if(g=this.boxDefinitions_[f]){var h=null,k=null;this.headers_[f]==shaka.util.Mp4Parser.BoxType_.FULL_BOX&&(k=b.readUint32(),h=k>>>24,k&=16777215);f=d+e;c&&f>b.getLength()&&(f=b.getLength());f-=b.getPosition();b=0<f?b.readBytes(f):new Uint8Array(0);b=\nnew shaka.util.DataViewReader(new DataView(b.buffer,b.byteOffset,b.byteLength),shaka.util.DataViewReader.Endianness.BIG_ENDIAN);g({parser:this,partialOkay:c||!1,version:h,flags:k,reader:b,size:e,start:d+a})}else b.skip(d+e-b.getPosition())};goog.exportProperty(shaka.util.Mp4Parser.prototype,\"parseNext\",shaka.util.Mp4Parser.prototype.parseNext);shaka.util.Mp4Parser.children=function(a){for(;a.reader.hasMoreData()&&!a.parser.done_;)a.parser.parseNext(a.start,a.reader,a.partialOkay)};\ngoog.exportProperty(shaka.util.Mp4Parser,\"children\",shaka.util.Mp4Parser.children);shaka.util.Mp4Parser.sampleDescription=function(a){for(var b=a.reader.readUint32();0<b&&!a.parser.done_;--b)a.parser.parseNext(a.start,a.reader,a.partialOkay)};goog.exportProperty(shaka.util.Mp4Parser,\"sampleDescription\",shaka.util.Mp4Parser.sampleDescription);shaka.util.Mp4Parser.allData=function(a){return function(b){var c=b.reader.getLength()-b.reader.getPosition();a(b.reader.readBytes(c))}};\ngoog.exportProperty(shaka.util.Mp4Parser,\"allData\",shaka.util.Mp4Parser.allData);shaka.util.Mp4Parser.typeFromString_=function(a){goog.asserts.assert(4==a.length,\"Mp4 box names must be 4 characters long\");for(var b=0,c=0;c<a.length;c++)b=b<<8|a.charCodeAt(c);return b};shaka.util.Mp4Parser.typeToString_=function(a){return String.fromCharCode(a>>24&255,a>>16&255,a>>8&255,a&255)};shaka.media.Mp4SegmentIndexParser=function(a,b,c,d){var e=shaka.media.Mp4SegmentIndexParser,f,g=(new shaka.util.Mp4Parser).fullBox(\"sidx\",function(a){f=e.parseSIDX_(b,d,c,a)});a&&g.parse(a);if(f)return f;shaka.log.error('Invalid box type, expected \"sidx\".');throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.MP4_SIDX_WRONG_BOX_TYPE);};\nshaka.media.Mp4SegmentIndexParser.parseSIDX_=function(a,b,c,d){goog.asserts.assert(null!=d.version,\"SIDX is a full box and should have a valid version.\");var e=[];d.reader.skip(4);var f=d.reader.readUint32();if(0==f)throw shaka.log.error(\"Invalid timescale.\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.MP4_SIDX_INVALID_TIMESCALE);if(0==d.version){var g=d.reader.readUint32();var h=d.reader.readUint32()}else g=d.reader.readUint64(),h=\nd.reader.readUint64();d.reader.skip(2);var k=d.reader.readUint16();a=a+d.size+h;for(h=0;h<k;h++){var l=d.reader.readUint32(),m=(l&2147483648)>>>31;l&=2147483647;var n=d.reader.readUint32();d.reader.skip(4);if(1==m)throw shaka.log.error(\"Heirarchical SIDXs are not supported.\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.MP4_SIDX_TYPE_NOT_SUPPORTED);e.push(new shaka.media.SegmentReference(e.length,g/f-b,(g+n)/f-b,function(){return c},\na,a+l-1));g+=n;a+=l}d.parser.stop();return e};shaka.media.SegmentIndex=function(a){goog.DEBUG&&shaka.media.SegmentIndex.assertCorrectReferences_(a);this.references_=a};goog.exportSymbol(\"shaka.media.SegmentIndex\",shaka.media.SegmentIndex);shaka.media.SegmentIndex.prototype.destroy=function(){this.references_=null;return Promise.resolve()};goog.exportProperty(shaka.media.SegmentIndex.prototype,\"destroy\",shaka.media.SegmentIndex.prototype.destroy);\nshaka.media.SegmentIndex.prototype.find=function(a){for(var b=this.references_.length-1;0<=b;--b){var c=this.references_[b];if(a>=c.startTime&&a<c.endTime)return c.position}return this.references_.length&&a<this.references_[0].startTime?this.references_[0].position:null};goog.exportProperty(shaka.media.SegmentIndex.prototype,\"find\",shaka.media.SegmentIndex.prototype.find);\nshaka.media.SegmentIndex.prototype.get=function(a){if(0==this.references_.length)return null;a-=this.references_[0].position;return 0>a||a>=this.references_.length?null:this.references_[a]};goog.exportProperty(shaka.media.SegmentIndex.prototype,\"get\",shaka.media.SegmentIndex.prototype.get);shaka.media.SegmentIndex.prototype.offset=function(a){for(var b=0;b<this.references_.length;++b)this.references_[b].startTime+=a,this.references_[b].endTime+=a};\ngoog.exportProperty(shaka.media.SegmentIndex.prototype,\"offset\",shaka.media.SegmentIndex.prototype.offset);\nshaka.media.SegmentIndex.prototype.merge=function(a){goog.DEBUG&&shaka.media.SegmentIndex.assertCorrectReferences_(a);for(var b=[],c=0,d=0;c<this.references_.length&&d<a.length;){var e=this.references_[c],f=a[d];e.startTime<f.startTime?(b.push(e),c++):(e.startTime>f.startTime?0==c?b.push(f):shaka.log.warning(\"Refusing to rewrite original references on update!\"):(.1<Math.abs(e.endTime-f.endTime)?(goog.asserts.assert(f.endTime>e.endTime&&c==this.references_.length-1&&d==a.length-1,\"This should be an update of the last segment in a period\"),\nf=new shaka.media.SegmentReference(e.position,f.startTime,f.endTime,f.getUris,f.startByte,f.endByte),b.push(f)):b.push(e),c++),d++)}for(;c<this.references_.length;)b.push(this.references_[c++]);if(b.length)for(c=b[b.length-1].position+1;d<a.length;)f=a[d++],f=new shaka.media.SegmentReference(c++,f.startTime,f.endTime,f.getUris,f.startByte,f.endByte),b.push(f);else b=a;goog.DEBUG&&shaka.media.SegmentIndex.assertCorrectReferences_(b);this.references_=b};\ngoog.exportProperty(shaka.media.SegmentIndex.prototype,\"merge\",shaka.media.SegmentIndex.prototype.merge);shaka.media.SegmentIndex.prototype.replace=function(a){goog.DEBUG&&shaka.media.SegmentIndex.assertCorrectReferences_(a);this.references_=a};shaka.media.SegmentIndex.prototype.evict=function(a){for(var b=0;b<this.references_.length;++b)if(this.references_[b].endTime>a){this.references_.splice(0,b);return}this.references_=[]};goog.exportProperty(shaka.media.SegmentIndex.prototype,\"evict\",shaka.media.SegmentIndex.prototype.evict);\nshaka.media.SegmentIndex.prototype.fit=function(a){var b=shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS;goog.asserts.assert(null!=a,\"Period duration must be known for static content!\");for(goog.asserts.assert(Infinity!=a,\"Period duration must be finite for static content!\");this.references_.length;){var c=this.references_[this.references_.length-1];if(c.startTime>=a)this.references_.pop();else break}for(;this.references_.length;)if(c=this.references_[0],0>=c.endTime)this.references_.shift();\nelse break;0!=this.references_.length&&(c=this.references_[0],c.startTime<b&&(this.references_[0]=new shaka.media.SegmentReference(c.position,0,c.endTime,c.getUris,c.startByte,c.endByte)),c=this.references_[this.references_.length-1],this.references_[this.references_.length-1]=new shaka.media.SegmentReference(c.position,c.startTime,a,c.getUris,c.startByte,c.endByte))};\ngoog.DEBUG&&(shaka.media.SegmentIndex.assertCorrectReferences_=function(a){goog.asserts.assert(a.every(function(b,c){if(0==c)return!0;var d=a[c-1];return b.position!=d.position+1?!1:d.startTime<b.startTime?!0:d.startTime>b.startTime?!1:d.endTime<=b.endTime?!0:!1}),\"SegmentReferences are incorrect\")});shaka.util.EbmlParser=function(a){this.dataView_=a;this.reader_=new shaka.util.DataViewReader(a,shaka.util.DataViewReader.Endianness.BIG_ENDIAN);shaka.util.EbmlParser.DYNAMIC_SIZES||(shaka.util.EbmlParser.DYNAMIC_SIZES=[new Uint8Array([255]),new Uint8Array([127,255]),new Uint8Array([63,255,255]),new Uint8Array([31,255,255,255]),new Uint8Array([15,255,255,255,255]),new Uint8Array([7,255,255,255,255,255]),new Uint8Array([3,255,255,255,255,255,255]),new Uint8Array([1,255,255,255,255,255,255,255])])};\nshaka.util.EbmlParser.prototype.hasMoreData=function(){return this.reader_.hasMoreData()};\nshaka.util.EbmlParser.prototype.parseElement=function(){var a=this.parseId_(),b=this.parseVint_();b=shaka.util.EbmlParser.isDynamicSizeValue_(b)?this.dataView_.byteLength-this.reader_.getPosition():shaka.util.EbmlParser.getVintValue_(b);b=this.reader_.getPosition()+b<=this.dataView_.byteLength?b:this.dataView_.byteLength-this.reader_.getPosition();var c=new DataView(this.dataView_.buffer,this.dataView_.byteOffset+this.reader_.getPosition(),b);this.reader_.skip(b);return new shaka.util.EbmlElement(a,\nc)};shaka.util.EbmlParser.prototype.parseId_=function(){var a=this.parseVint_();if(7<a.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.EBML_OVERFLOW);for(var b=0,c=0;c<a.length;c++)b=256*b+a[c];return b};\nshaka.util.EbmlParser.prototype.parseVint_=function(){var a=this.reader_.readUint8(),b;for(b=1;8>=b&&!(a&1<<8-b);b++);if(8<b)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.EBML_OVERFLOW);var c=new Uint8Array(b);c[0]=a;for(a=1;a<b;a++)c[a]=this.reader_.readUint8();return c};\nshaka.util.EbmlParser.getVintValue_=function(a){if(8==a.length&&a[1]&224)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.JS_INTEGER_OVERFLOW);for(var b=a[0]&(1<<8-a.length)-1,c=1;c<a.length;c++)b=256*b+a[c];return b};shaka.util.EbmlParser.isDynamicSizeValue_=function(a){for(var b=shaka.util.EbmlParser,c=shaka.util.Uint8ArrayUtils.equal,d=0;d<b.DYNAMIC_SIZES.length;d++)if(c(a,b.DYNAMIC_SIZES[d]))return!0;return!1};\nshaka.util.EbmlElement=function(a,b){this.id=a;this.dataView_=b};shaka.util.EbmlElement.prototype.getOffset=function(){return this.dataView_.byteOffset};shaka.util.EbmlElement.prototype.createParser=function(){return new shaka.util.EbmlParser(this.dataView_)};\nshaka.util.EbmlElement.prototype.getUint=function(){if(8<this.dataView_.byteLength)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.EBML_OVERFLOW);if(8==this.dataView_.byteLength&&this.dataView_.getUint8(0)&224)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.JS_INTEGER_OVERFLOW);for(var a=0,b=0;b<this.dataView_.byteLength;b++){var c=this.dataView_.getUint8(b);a=256*\na+c}return a};shaka.util.EbmlElement.prototype.getFloat=function(){if(4==this.dataView_.byteLength)return this.dataView_.getFloat32(0);if(8==this.dataView_.byteLength)return this.dataView_.getFloat64(0);throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.EBML_BAD_FLOATING_POINT_SIZE);};shaka.media.WebmSegmentIndexParser=function(){};shaka.media.WebmSegmentIndexParser.EBML_ID=440786851;shaka.media.WebmSegmentIndexParser.SEGMENT_ID=408125543;shaka.media.WebmSegmentIndexParser.INFO_ID=357149030;shaka.media.WebmSegmentIndexParser.TIMECODE_SCALE_ID=2807729;shaka.media.WebmSegmentIndexParser.DURATION_ID=17545;shaka.media.WebmSegmentIndexParser.CUES_ID=475249515;shaka.media.WebmSegmentIndexParser.CUE_POINT_ID=187;shaka.media.WebmSegmentIndexParser.CUE_TIME_ID=179;\nshaka.media.WebmSegmentIndexParser.CUE_TRACK_POSITIONS_ID=183;shaka.media.WebmSegmentIndexParser.CUE_CLUSTER_POSITION=241;\nshaka.media.WebmSegmentIndexParser.prototype.parse=function(a,b,c,d){b=this.parseWebmContainer_(b);a=(new shaka.util.EbmlParser(new DataView(a))).parseElement();if(a.id!=shaka.media.WebmSegmentIndexParser.CUES_ID)throw shaka.log.error(\"Not a Cues element.\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.WEBM_CUES_ELEMENT_MISSING);return this.parseCues_(a,b.segmentOffset,b.timecodeScale,b.duration,c,d)};\nshaka.media.WebmSegmentIndexParser.prototype.parseWebmContainer_=function(a){a=new shaka.util.EbmlParser(new DataView(a));if(a.parseElement().id!=shaka.media.WebmSegmentIndexParser.EBML_ID)throw shaka.log.error(\"Not an EBML element.\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.WEBM_EBML_HEADER_ELEMENT_MISSING);var b=a.parseElement();if(b.id!=shaka.media.WebmSegmentIndexParser.SEGMENT_ID)throw shaka.log.error(\"Not a Segment element.\"),\nnew shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.WEBM_SEGMENT_ELEMENT_MISSING);a=b.getOffset();b=this.parseSegment_(b);return{segmentOffset:a,timecodeScale:b.timecodeScale,duration:b.duration}};\nshaka.media.WebmSegmentIndexParser.prototype.parseSegment_=function(a){a=a.createParser();for(var b=null;a.hasMoreData();){var c=a.parseElement();if(c.id==shaka.media.WebmSegmentIndexParser.INFO_ID){b=c;break}}if(!b)throw shaka.log.error(\"Not an Info element.\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.WEBM_INFO_ELEMENT_MISSING);return this.parseInfo_(b)};\nshaka.media.WebmSegmentIndexParser.prototype.parseInfo_=function(a){var b=a.createParser(),c=1E6;for(a=null;b.hasMoreData();){var d=b.parseElement();d.id==shaka.media.WebmSegmentIndexParser.TIMECODE_SCALE_ID?c=d.getUint():d.id==shaka.media.WebmSegmentIndexParser.DURATION_ID&&(a=d.getFloat())}if(null==a)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.WEBM_DURATION_ELEMENT_MISSING);b=c/1E9;return{timecodeScale:b,duration:a*b}};\nshaka.media.WebmSegmentIndexParser.prototype.parseCues_=function(a,b,c,d,e,f){var g=[],h=function(){return e};a=a.createParser();for(var k=null,l=null;a.hasMoreData();){var m=a.parseElement();if(m.id==shaka.media.WebmSegmentIndexParser.CUE_POINT_ID){var n=this.parseCuePoint_(m);n&&(m=c*n.unscaledTime,n=b+n.relativeOffset,null!=k&&(goog.asserts.assert(null!=l,\"last offset cannot be null\"),g.push(new shaka.media.SegmentReference(g.length,k-f,m-f,h,l,n-1))),k=m,l=n)}}null!=k&&(goog.asserts.assert(null!=\nl,\"last offset cannot be null\"),g.push(new shaka.media.SegmentReference(g.length,k-f,d-f,h,l,null)));return g};\nshaka.media.WebmSegmentIndexParser.prototype.parseCuePoint_=function(a){var b=a.createParser();a=b.parseElement();if(a.id!=shaka.media.WebmSegmentIndexParser.CUE_TIME_ID)throw shaka.log.warning(\"Not a CueTime element.\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.WEBM_CUE_TIME_ELEMENT_MISSING);a=a.getUint();b=b.parseElement();if(b.id!=shaka.media.WebmSegmentIndexParser.CUE_TRACK_POSITIONS_ID)throw shaka.log.warning(\"Not a CueTrackPositions element.\"),\nnew shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.WEBM_CUE_TRACK_POSITIONS_ELEMENT_MISSING);b=b.createParser();for(var c=0;b.hasMoreData();){var d=b.parseElement();if(d.id==shaka.media.WebmSegmentIndexParser.CUE_CLUSTER_POSITION){c=d.getUint();break}}return{unscaledTime:a,relativeOffset:c}};shaka.dash.SegmentBase={};shaka.dash.SegmentBase.createInitSegment=function(a,b){var c=shaka.util.XmlUtils,d=shaka.util.ManifestParserUtils,e=shaka.dash.MpdUtils.inheritChild(a,b,\"Initialization\");if(!e)return null;var f=a.representation.baseUris,g=e.getAttribute(\"sourceURL\");g&&(f=d.resolveUris(a.representation.baseUris,[g]));d=0;g=null;if(c=c.parseAttr(e,\"range\",c.parseRange))d=c.start,g=c.end;return new shaka.media.InitSegmentReference(function(){return f},d,g)};\nshaka.dash.SegmentBase.createStream=function(a,b){goog.asserts.assert(a.representation.segmentBase,\"Should only be called with SegmentBase\");var c=shaka.dash.MpdUtils,d=shaka.dash.SegmentBase,e=shaka.util.XmlUtils,f=Number(c.inheritAttribute(a,d.fromInheritance_,\"presentationTimeOffset\"))||0;c=c.inheritAttribute(a,d.fromInheritance_,\"timescale\");var g=1;c&&(g=e.parsePositiveInt(c)||1);e=f/g||0;f=d.createInitSegment(a,d.fromInheritance_);d=d.createSegmentIndex_(a,b,f,e);return{createSegmentIndex:d.createSegmentIndex,\nfindSegmentPosition:d.findSegmentPosition,getSegmentReference:d.getSegmentReference,initSegmentReference:f,scaledPresentationTimeOffset:e}};\nshaka.dash.SegmentBase.createSegmentIndexFromUris=function(a,b,c,d,e,f,g,h){var k=a.presentationTimeline,l=!a.dynamic||!a.periodInfo.isLastPeriod,m=a.periodInfo.index,n=a.periodInfo.duration,p=b,q=null;return{createSegmentIndex:function(){var a=[p(d,e,f),\"webm\"==g?p(c.getUris(),c.startByte,c.endByte):null];p=null;return Promise.all(a).then(function(a){var b=a[0];a=a[1]||null;\"mp4\"==g?b=shaka.media.Mp4SegmentIndexParser(b,e,d,h):(goog.asserts.assert(a,\"WebM requires init data\"),b=(new shaka.media.WebmSegmentIndexParser).parse(b,\na,d,h));k.notifySegments(b,0==m);goog.asserts.assert(!q,\"Should not call createSegmentIndex twice\");q=new shaka.media.SegmentIndex(b);l&&q.fit(n)})},findSegmentPosition:function(a){goog.asserts.assert(q,\"Must call createSegmentIndex first\");return q.find(a)},getSegmentReference:function(a){goog.asserts.assert(q,\"Must call createSegmentIndex first\");return q.get(a)}}};shaka.dash.SegmentBase.fromInheritance_=function(a){return a.segmentBase};\nshaka.dash.SegmentBase.createSegmentIndex_=function(a,b,c,d){var e=shaka.dash.MpdUtils,f=shaka.dash.SegmentBase,g=shaka.util.XmlUtils,h=shaka.util.ManifestParserUtils,k=shaka.util.ManifestParserUtils.ContentType,l=a.representation.contentType,m=a.representation.mimeType.split(\"/\")[1];if(l!=k.TEXT&&\"mp4\"!=m&&\"webm\"!=m)throw shaka.log.error(\"SegmentBase specifies an unsupported container type.\",a.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,\nshaka.util.Error.Code.DASH_UNSUPPORTED_CONTAINER);if(\"webm\"==m&&!c)throw shaka.log.error(\"SegmentBase does not contain sufficient segment information:\",\"the SegmentBase uses a WebM container,\",\"but does not contain an Initialization element.\",a.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_WEBM_MISSING_INIT);k=e.inheritChild(a,f.fromInheritance_,\"RepresentationIndex\");f=e.inheritAttribute(a,f.fromInheritance_,\n\"indexRange\");e=a.representation.baseUris;f=g.parseRange(f||\"\");k&&((l=k.getAttribute(\"sourceURL\"))&&(e=h.resolveUris(a.representation.baseUris,[l])),f=g.parseAttr(k,\"range\",g.parseRange,f));if(!f)throw shaka.log.error(\"SegmentBase does not contain sufficient segment information:\",\"the SegmentBase does not contain @indexRange\",\"or a RepresentationIndex element.\",a.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);\nreturn shaka.dash.SegmentBase.createSegmentIndexFromUris(a,b,c,e,f.start,f.end,m,d)};shaka.dash.SegmentList={};\nshaka.dash.SegmentList.createStream=function(a,b){goog.asserts.assert(a.representation.segmentList,\"Should only be called with SegmentList\");var c=shaka.dash.SegmentList,d=shaka.dash.SegmentBase.createInitSegment(a,c.fromInheritance_),e=c.parseSegmentListInfo_(a);c.checkSegmentListInfo_(a,e);var f=null,g=null;a.period.id&&a.representation.id&&(g=a.period.id+\",\"+a.representation.id,f=b[g]);c=c.createSegmentReferences_(a.periodInfo.duration,e.startNumber,a.representation.baseUris,e);f?(f.merge(c),g=\na.presentationTimeline.getSegmentAvailabilityStart(),f.evict(g-a.periodInfo.start)):(a.presentationTimeline.notifySegments(c,0==a.periodInfo.index),f=new shaka.media.SegmentIndex(c),g&&a.dynamic&&(b[g]=f));a.dynamic&&a.periodInfo.isLastPeriod||f.fit(a.periodInfo.duration);return{createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:f.find.bind(f),getSegmentReference:f.get.bind(f),initSegmentReference:d,scaledPresentationTimeOffset:e.scaledPresentationTimeOffset}};\nshaka.dash.SegmentList.fromInheritance_=function(a){return a.segmentList};\nshaka.dash.SegmentList.parseSegmentListInfo_=function(a){var b=shaka.dash.SegmentList,c=shaka.dash.MpdUtils,d=b.parseMediaSegments_(a);a=c.parseSegmentInfo(a,b.fromInheritance_);b=a.startNumber;0==b&&(shaka.log.warning(\"SegmentList@startNumber must be > 0\"),b=1);c=0;a.segmentDuration?c=a.segmentDuration*(b-1):a.timeline&&0<a.timeline.length&&(c=a.timeline[0].start);return{segmentDuration:a.segmentDuration,startTime:c,startNumber:b,scaledPresentationTimeOffset:a.scaledPresentationTimeOffset,timeline:a.timeline,\nmediaSegments:d}};\nshaka.dash.SegmentList.checkSegmentListInfo_=function(a,b){if(!b.segmentDuration&&!b.timeline&&1<b.mediaSegments.length)throw shaka.log.warning(\"SegmentList does not contain sufficient segment information:\",\"the SegmentList specifies multiple segments,\",\"but does not specify a segment duration or timeline.\",a.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);if(!b.segmentDuration&&!a.periodInfo.duration&&\n!b.timeline&&1==b.mediaSegments.length)throw shaka.log.warning(\"SegmentList does not contain sufficient segment information:\",\"the SegmentList specifies one segment,\",\"but does not specify a segment duration, period duration,\",\"or timeline.\",a.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);if(b.timeline&&0==b.timeline.length)throw shaka.log.warning(\"SegmentList does not contain sufficient segment information:\",\n\"the SegmentList has an empty timeline.\",a.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);};\nshaka.dash.SegmentList.createSegmentReferences_=function(a,b,c,d){var e=shaka.util.ManifestParserUtils,f=d.mediaSegments.length;d.timeline&&d.timeline.length!=d.mediaSegments.length&&(f=Math.min(d.timeline.length,d.mediaSegments.length),shaka.log.warning(\"The number of items in the segment timeline and the number of segment\",\"URLs do not match, truncating\",d.mediaSegments.length,\"to\",f));for(var g=[],h=d.startTime,k=0;k<f;k++){var l=d.mediaSegments[k],m=e.resolveUris(c,[l.mediaUri]);if(null!=d.segmentDuration)var n=\nh+d.segmentDuration;else d.timeline?n=d.timeline[k].end:(goog.asserts.assert(1==d.mediaSegments.length&&a,\"There should only be one segment with a Period duration.\"),n=h+a);m=function(a){return a}.bind(null,m);g.push(new shaka.media.SegmentReference(k+b,h,n,m,l.start,l.end));h=n}return g};\nshaka.dash.SegmentList.parseMediaSegments_=function(a){var b=[a.representation.segmentList,a.adaptationSet.segmentList,a.period.segmentList].filter(shaka.util.Functional.isNotNull),c=shaka.util.XmlUtils;return b.map(function(a){return c.findChildren(a,\"SegmentURL\")}).reduce(function(a,b){return 0<a.length?a:b}).map(function(b){b.getAttribute(\"indexRange\")&&!a.indexRangeWarningGiven&&(a.indexRangeWarningGiven=!0,shaka.log.warning(\"We do not support the SegmentURL@indexRange attribute on SegmentList.  We only use the SegmentList@duration attribute or SegmentTimeline, which must be accurate.\"));\nvar d=b.getAttribute(\"media\");b=c.parseAttr(b,\"mediaRange\",c.parseRange,{start:0,end:null});return{mediaUri:d,start:b.start,end:b.end}})};shaka.dash.SegmentTemplate={};\nshaka.dash.SegmentTemplate.createStream=function(a,b,c,d){goog.asserts.assert(a.representation.segmentTemplate,\"Should only be called with SegmentTemplate\");var e=shaka.dash.SegmentTemplate,f=e.createInitSegment_(a),g=e.parseSegmentTemplateInfo_(a);e.checkSegmentTemplateInfo_(a,g);g.indexTemplate?a=e.createFromIndexTemplate_(a,b,f,g):g.segmentDuration?(d||a.presentationTimeline.notifyMaxSegmentDuration(g.segmentDuration),a=e.createFromDuration_(a,g)):(d=b=null,a.period.id&&a.representation.id&&(d=\na.period.id+\",\"+a.representation.id,b=c[d]),e=e.createFromTimeline_(a,g),b?(b.merge(e),c=a.presentationTimeline.getSegmentAvailabilityStart(),b.evict(c-a.periodInfo.start)):(a.presentationTimeline.notifySegments(e,0==a.periodInfo.index),b=new shaka.media.SegmentIndex(e),d&&a.dynamic&&(c[d]=b)),a.dynamic&&a.periodInfo.isLastPeriod||b.fit(a.periodInfo.duration),a={createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:b.find.bind(b),getSegmentReference:b.get.bind(b)});return{createSegmentIndex:a.createSegmentIndex,\nfindSegmentPosition:a.findSegmentPosition,getSegmentReference:a.getSegmentReference,initSegmentReference:f,scaledPresentationTimeOffset:g.scaledPresentationTimeOffset}};shaka.dash.SegmentTemplate.fromInheritance_=function(a){return a.segmentTemplate};\nshaka.dash.SegmentTemplate.parseSegmentTemplateInfo_=function(a){var b=shaka.dash.SegmentTemplate,c=shaka.dash.MpdUtils,d=c.parseSegmentInfo(a,b.fromInheritance_),e=c.inheritAttribute(a,b.fromInheritance_,\"media\");a=c.inheritAttribute(a,b.fromInheritance_,\"index\");return{segmentDuration:d.segmentDuration,timescale:d.timescale,startNumber:d.startNumber,scaledPresentationTimeOffset:d.scaledPresentationTimeOffset,unscaledPresentationTimeOffset:d.unscaledPresentationTimeOffset,timeline:d.timeline,mediaTemplate:e,\nindexTemplate:a}};\nshaka.dash.SegmentTemplate.checkSegmentTemplateInfo_=function(a,b){var c=0+(b.indexTemplate?1:0);c+=b.timeline?1:0;c+=b.segmentDuration?1:0;if(0==c)throw shaka.log.error(\"SegmentTemplate does not contain any segment information:\",\"the SegmentTemplate must contain either an index URL template\",\"a SegmentTimeline, or a segment duration.\",a.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);1!=c&&(shaka.log.warning(\"SegmentTemplate containes multiple segment information sources:\",\n\"the SegmentTemplate should only contain an index URL template,\",\"a SegmentTimeline or a segment duration.\",a.representation),b.indexTemplate?(shaka.log.info(\"Using the index URL template by default.\"),b.timeline=null):(goog.asserts.assert(b.timeline,\"There should be a timeline\"),shaka.log.info(\"Using the SegmentTimeline by default.\")),b.segmentDuration=null);if(!b.indexTemplate&&!b.mediaTemplate)throw shaka.log.error(\"SegmentTemplate does not contain sufficient segment information:\",\"the SegmentTemplate's media URL template is missing.\",\na.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_NO_SEGMENT_INFO);};\nshaka.dash.SegmentTemplate.createFromIndexTemplate_=function(a,b,c,d){var e=shaka.dash.MpdUtils,f=shaka.util.ManifestParserUtils,g=a.representation.mimeType.split(\"/\")[1];if(\"mp4\"!=g&&\"webm\"!=g)throw shaka.log.error(\"SegmentTemplate specifies an unsupported container type.\",a.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_UNSUPPORTED_CONTAINER);if(\"webm\"==g&&!c)throw shaka.log.error(\"SegmentTemplate does not contain sufficient segment information:\",\n\"the SegmentTemplate uses a WebM container,\",\"but does not contain an initialization URL template.\",a.representation),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_WEBM_MISSING_INIT);goog.asserts.assert(d.indexTemplate,\"must be using index template\");e=e.fillUriTemplate(d.indexTemplate,a.representation.id,null,a.bandwidth||null,null);f=f.resolveUris(a.representation.baseUris,[e]);return shaka.dash.SegmentBase.createSegmentIndexFromUris(a,\nb,c,f,0,null,g,d.scaledPresentationTimeOffset)};\nshaka.dash.SegmentTemplate.createFromDuration_=function(a,b){goog.asserts.assert(b.mediaTemplate,\"There should be a media template with duration\");var c=shaka.dash.MpdUtils,d=shaka.util.ManifestParserUtils,e=a.periodInfo.duration,f=b.segmentDuration,g=b.startNumber,h=b.timescale,k=b.mediaTemplate,l=a.bandwidth||null,m=a.representation.id,n=a.representation.baseUris;return{createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(a){return 0>a||e&&a>=e?null:Math.floor(a/f)},getSegmentReference:function(a){var b=\na*f,p=b+f;e&&(p=Math.min(p,e));return 0>p||e&&b>=e?null:new shaka.media.SegmentReference(a,b,p,function(){var e=c.fillUriTemplate(k,m,a+g,l,b*h);return d.resolveUris(n,[e])},0,null)}}};\nshaka.dash.SegmentTemplate.createFromTimeline_=function(a,b){goog.asserts.assert(b.mediaTemplate,\"There should be a media template with a timeline\");for(var c=shaka.dash.MpdUtils,d=shaka.util.ManifestParserUtils,e=[],f=0;f<b.timeline.length;f++){var g=b.timeline[f].start,h=b.timeline[f].end,k=f+b.startNumber,l=function(a,b,e,f,g,h){a=c.fillUriTemplate(a,b,g,e,h);return d.resolveUris(f,[a]).map(function(a){return a.toString()})}.bind(null,b.mediaTemplate,a.representation.id,a.bandwidth||null,a.representation.baseUris,\nk,b.timeline[f].unscaledStart+b.unscaledPresentationTimeOffset);e.push(new shaka.media.SegmentReference(k,g,h,l,0,null))}return e};\nshaka.dash.SegmentTemplate.createInitSegment_=function(a){var b=shaka.dash.MpdUtils,c=shaka.util.ManifestParserUtils,d=b.inheritAttribute(a,shaka.dash.SegmentTemplate.fromInheritance_,\"initialization\");if(!d)return null;var e=a.representation.id,f=a.bandwidth||null,g=a.representation.baseUris;return new shaka.media.InitSegmentReference(function(){goog.asserts.assert(d,\"Should have returned earler\");var a=b.fillUriTemplate(d,e,null,f,null);return c.resolveUris(g,[a])},0,null)};shaka.media.ManifestParser={};shaka.media.ManifestParser.parsersByMime={};shaka.media.ManifestParser.parsersByExtension={};shaka.media.ManifestParser.registerParserByExtension=function(a,b){shaka.media.ManifestParser.parsersByExtension[a]=b};goog.exportSymbol(\"shaka.media.ManifestParser.registerParserByExtension\",shaka.media.ManifestParser.registerParserByExtension);shaka.media.ManifestParser.registerParserByMime=function(a,b){shaka.media.ManifestParser.parsersByMime[a]=b};\ngoog.exportSymbol(\"shaka.media.ManifestParser.registerParserByMime\",shaka.media.ManifestParser.registerParserByMime);\nshaka.media.ManifestParser.probeSupport=function(){var a={},b;for(b in shaka.media.ManifestParser.parsersByMime)a[b]=!0;for(b in shaka.media.ManifestParser.parsersByExtension)a[b]=!0;[\"application/dash+xml\",\"application/x-mpegurl\",\"application/vnd.apple.mpegurl\",\"application/vnd.ms-sstr+xml\"].forEach(function(b){a[b]=!!shaka.media.ManifestParser.parsersByMime[b]});[\"mpd\",\"m3u8\",\"ism\"].forEach(function(b){a[b]=!!shaka.media.ManifestParser.parsersByExtension[b]});return a};\nshaka.media.ManifestParser.getFactory=function(a,b,c,d){var e=d;if(!e&&(d=(new goog.Uri(a)).getPath().split(\"/\").pop().split(\".\"),1<d.length)){var f=d.pop().toLowerCase();e=shaka.media.ManifestParser.parsersByExtension[f]}if(e)return Promise.resolve(e);c=shaka.net.NetworkingEngine.makeRequest([a],c);c.method=\"HEAD\";return b.request(shaka.net.NetworkingEngine.RequestType.MANIFEST,c).then(function(b){(b=b.headers[\"content-type\"])&&(b=b.toLowerCase());e=shaka.media.ManifestParser.parsersByMime[b];return e?\ne:(shaka.log.error(\"Unable to guess manifest type by file extension or by MIME type.\",f,b),Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.UNABLE_TO_GUESS_MANIFEST_TYPE,a)))},function(a){goog.asserts.assert(a instanceof shaka.util.Error,\"Incorrect error type\");shaka.log.error(\"HEAD request to guess manifest type failed!\",a);a.severity=shaka.util.Error.Severity.CRITICAL;return Promise.reject(a)})};shaka.media.PresentationTimeline=function(a,b){this.presentationStartTime_=a;this.presentationDelay_=b;this.segmentAvailabilityDuration_=this.duration_=Infinity;this.maxSegmentDuration_=1;this.clockOffset_=this.maxFirstSegmentStartTime_=0;this.static_=!0;this.segmentAvailabilityStart_=0};goog.exportSymbol(\"shaka.media.PresentationTimeline\",shaka.media.PresentationTimeline);shaka.media.PresentationTimeline.prototype.getDuration=function(){return this.duration_};\ngoog.exportProperty(shaka.media.PresentationTimeline.prototype,\"getDuration\",shaka.media.PresentationTimeline.prototype.getDuration);shaka.media.PresentationTimeline.prototype.getMaxSegmentDuration=function(){return this.maxSegmentDuration_};shaka.media.PresentationTimeline.prototype.setDuration=function(a){goog.asserts.assert(0<a,\"duration must be > 0\");this.duration_=a};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"setDuration\",shaka.media.PresentationTimeline.prototype.setDuration);\nshaka.media.PresentationTimeline.prototype.getPresentationStartTime=function(){return this.presentationStartTime_};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"getPresentationStartTime\",shaka.media.PresentationTimeline.prototype.getPresentationStartTime);shaka.media.PresentationTimeline.prototype.setClockOffset=function(a){this.clockOffset_=a};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"setClockOffset\",shaka.media.PresentationTimeline.prototype.setClockOffset);\nshaka.media.PresentationTimeline.prototype.setStatic=function(a){this.static_=a};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"setStatic\",shaka.media.PresentationTimeline.prototype.setStatic);shaka.media.PresentationTimeline.prototype.setSegmentAvailabilityDuration=function(a){goog.asserts.assert(0<=a,\"segmentAvailabilityDuration must be >= 0\");this.segmentAvailabilityDuration_=a};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"setSegmentAvailabilityDuration\",shaka.media.PresentationTimeline.prototype.setSegmentAvailabilityDuration);\nshaka.media.PresentationTimeline.prototype.setDelay=function(a){goog.asserts.assert(0<=a,\"delay must be >= 0\");this.presentationDelay_=a};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"setDelay\",shaka.media.PresentationTimeline.prototype.setDelay);\nshaka.media.PresentationTimeline.prototype.notifySegments=function(a,b){0!=a.length&&(b&&(this.maxFirstSegmentStartTime_=Math.max(this.maxFirstSegmentStartTime_,a[0].startTime)),this.maxSegmentDuration_=a.reduce(function(a,b){return Math.max(a,b.endTime-b.startTime)},this.maxSegmentDuration_),shaka.log.v1(\"notifySegments:\",\"maxSegmentDuration=\"+this.maxSegmentDuration_))};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"notifySegments\",shaka.media.PresentationTimeline.prototype.notifySegments);\nshaka.media.PresentationTimeline.prototype.notifyMaxSegmentDuration=function(a){this.maxSegmentDuration_=Math.max(this.maxSegmentDuration_,a);shaka.log.v1(\"notifyNewSegmentDuration:\",\"maxSegmentDuration=\"+this.maxSegmentDuration_)};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"notifyMaxSegmentDuration\",shaka.media.PresentationTimeline.prototype.notifyMaxSegmentDuration);shaka.media.PresentationTimeline.prototype.isLive=function(){return Infinity==this.duration_&&!this.static_};\ngoog.exportProperty(shaka.media.PresentationTimeline.prototype,\"isLive\",shaka.media.PresentationTimeline.prototype.isLive);shaka.media.PresentationTimeline.prototype.isInProgress=function(){return Infinity!=this.duration_&&!this.static_};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"isInProgress\",shaka.media.PresentationTimeline.prototype.isInProgress);\nshaka.media.PresentationTimeline.prototype.getSegmentAvailabilityStart=function(){goog.asserts.assert(0<=this.segmentAvailabilityDuration_,\"The availability duration should be positive\");if(Infinity==this.segmentAvailabilityDuration_)return this.segmentAvailabilityStart_;var a=this.getSegmentAvailabilityEnd()-this.segmentAvailabilityDuration_;return Math.max(this.segmentAvailabilityStart_,a)};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"getSegmentAvailabilityStart\",shaka.media.PresentationTimeline.prototype.getSegmentAvailabilityStart);\nshaka.media.PresentationTimeline.prototype.setAvailabilityStart=function(a){this.segmentAvailabilityStart_=a};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"setAvailabilityStart\",shaka.media.PresentationTimeline.prototype.setAvailabilityStart);shaka.media.PresentationTimeline.prototype.getSegmentAvailabilityEnd=function(){return this.isLive()||this.isInProgress()?Math.min(this.getLiveEdge_(),this.duration_):this.duration_};\ngoog.exportProperty(shaka.media.PresentationTimeline.prototype,\"getSegmentAvailabilityEnd\",shaka.media.PresentationTimeline.prototype.getSegmentAvailabilityEnd);shaka.media.PresentationTimeline.prototype.getSafeSeekRangeStart=function(a){Infinity==this.segmentAvailabilityDuration_&&(a=0);var b=this.getSegmentAvailabilityEnd();a=Math.min(this.maxFirstSegmentStartTime_+a,b);return Math.max(this.getSegmentAvailabilityStart(),a)};\ngoog.exportProperty(shaka.media.PresentationTimeline.prototype,\"getSafeSeekRangeStart\",shaka.media.PresentationTimeline.prototype.getSafeSeekRangeStart);shaka.media.PresentationTimeline.prototype.getSeekRangeStart=function(){return this.getSafeSeekRangeStart(0)};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"getSeekRangeStart\",shaka.media.PresentationTimeline.prototype.getSeekRangeStart);\nshaka.media.PresentationTimeline.prototype.getSeekRangeEnd=function(){var a=this.isLive()||this.isInProgress()?this.presentationDelay_:0;return Math.max(0,this.getSegmentAvailabilityEnd()-a)};goog.exportProperty(shaka.media.PresentationTimeline.prototype,\"getSeekRangeEnd\",shaka.media.PresentationTimeline.prototype.getSeekRangeEnd);\nshaka.media.PresentationTimeline.prototype.getLiveEdge_=function(){goog.asserts.assert(null!=this.presentationStartTime_,\"Cannot compute timeline live edge without start time\");var a=(Date.now()+this.clockOffset_)/1E3;return Math.max(0,a-this.maxSegmentDuration_-this.presentationStartTime_)};\ngoog.DEBUG&&(shaka.media.PresentationTimeline.prototype.assertIsValid=function(){this.isLive()?goog.asserts.assert(null!=this.presentationStartTime_,\"Detected as live stream, but does not match our model of live!\"):this.isInProgress()?goog.asserts.assert(null!=this.presentationStartTime_&&Infinity==this.segmentAvailabilityDuration_,\"Detected as IPR stream, but does not match our model of IPR!\"):goog.asserts.assert(Infinity==this.segmentAvailabilityDuration_&&Infinity!=this.duration_&&this.static_,\n\"Detected as VOD stream, but does not match our model of VOD!\")});shaka.dash.DashParser=function(){this.playerInterface_=this.config_=null;this.manifestUris_=[];this.manifest_=null;this.periodIds_=[];this.globalId_=1;this.segmentIndexMap_={};this.updatePeriod_=0;this.updateTimer_=null};goog.exportSymbol(\"shaka.dash.DashParser\",shaka.dash.DashParser);shaka.dash.DashParser.MIN_UPDATE_PERIOD_=3;shaka.dash.DashParser.prototype.configure=function(a){goog.asserts.assert(null!=a.dash,\"DashManifestConfiguration should not be null!\");this.config_=a};\nshaka.dash.DashParser.prototype.start=function(a,b){goog.asserts.assert(this.config_,\"Must call configure() before start()!\");this.manifestUris_=[a];this.playerInterface_=b;return this.requestManifest_().then(function(){this.playerInterface_&&this.setUpdateTimer_(0);return this.manifest_}.bind(this))};\nshaka.dash.DashParser.prototype.stop=function(){this.config_=this.playerInterface_=null;this.manifestUris_=[];this.manifest_=null;this.periodIds_=[];this.segmentIndexMap_={};null!=this.updateTimer_&&(window.clearTimeout(this.updateTimer_),this.updateTimer_=null);return Promise.resolve()};shaka.dash.DashParser.prototype.update=function(){this.requestManifest_()[\"catch\"](function(a){if(this.playerInterface_)this.playerInterface_.onError(a)}.bind(this))};\nshaka.dash.DashParser.prototype.onExpirationUpdated=function(a,b){};shaka.dash.DashParser.prototype.requestManifest_=function(){var a=shaka.net.NetworkingEngine.RequestType.MANIFEST,b=shaka.net.NetworkingEngine.makeRequest(this.manifestUris_,this.config_.retryParameters),c=this.playerInterface_.networkingEngine,d=function(){return!this.playerInterface_}.bind(this);return c.request(a,b,d).then(function(a){if(this.playerInterface_)return this.parseManifest_(a.data,a.uri)}.bind(this))};\nshaka.dash.DashParser.prototype.parseManifest_=function(a,b){var c=shaka.util.Error,d=shaka.dash.MpdUtils,e=d.parseXml(a,\"MPD\");if(!e)throw new c(c.Severity.CRITICAL,c.Category.MANIFEST,c.Code.DASH_INVALID_XML,b);return d.processXlinks(e,this.config_.retryParameters,this.config_.dash.xlinkFailGracefully,b,this.playerInterface_.networkingEngine).then(function(a){return this.processManifest_(a,b)}.bind(this))};\nshaka.dash.DashParser.prototype.processManifest_=function(a,b){var c=shaka.util.Functional,d=shaka.util.XmlUtils,e=shaka.util.ManifestParserUtils,f=[b];c=d.findChildren(a,\"Location\").map(d.getContents).filter(c.isNotNull);0<c.length&&(f=this.manifestUris_=c);c=d.findChildren(a,\"BaseURL\").map(d.getContents);e=e.resolveUris(f,c);var g=d.parseAttr(a,\"minBufferTime\",d.parseDuration);this.updatePeriod_=d.parseAttr(a,\"minimumUpdatePeriod\",d.parseDuration,-1);var h=d.parseAttr(a,\"availabilityStartTime\",\nd.parseDate);f=d.parseAttr(a,\"timeShiftBufferDepth\",d.parseDuration);var k=d.parseAttr(a,\"suggestedPresentationDelay\",d.parseDuration);c=d.parseAttr(a,\"maxSegmentDuration\",d.parseDuration);var l=a.getAttribute(\"type\")||\"static\";if(this.manifest_)var m=this.manifest_.presentationTimeline;else{var n=Math.max(this.config_.dash.defaultPresentationDelay,1.5*g);m=new shaka.media.PresentationTimeline(h,null!=k?k:n)}h=this.parsePeriods_({dynamic:\"static\"!=l,presentationTimeline:m,period:null,periodInfo:null,\nadaptationSet:null,representation:null,bandwidth:0,indexRangeWarningGiven:!1},e,a);k=h.duration;var p=h.periods;m.setStatic(\"static\"==l);\"static\"!=l&&h.durationDerivedFromPeriods||m.setDuration(k||Infinity);m.setSegmentAvailabilityDuration(null!=f?f:Infinity);m.notifyMaxSegmentDuration(c||1);goog.DEBUG&&m.assertIsValid();if(this.manifest_)return Promise.resolve();d=d.findChildren(a,\"UTCTiming\");f=m.isLive();return this.parseUtcTiming_(e,d,f).then(function(a){this.playerInterface_&&(m.setClockOffset(a),\nthis.manifest_={presentationTimeline:m,periods:p,offlineSessionIds:[],minBufferTime:g||0})}.bind(this))};\nshaka.dash.DashParser.prototype.parsePeriods_=function(a,b,c){var d=shaka.util.XmlUtils,e=d.parseAttr(c,\"mediaPresentationDuration\",d.parseDuration),f=[],g=0;c=d.findChildren(c,\"Period\");for(var h=0;h<c.length;h++){var k=c[h];g=d.parseAttr(k,\"start\",d.parseDuration,g);var l=d.parseAttr(k,\"duration\",d.parseDuration),m=null;if(h!=c.length-1){var n=d.parseAttr(c[h+1],\"start\",d.parseDuration);null!=n&&(m=n-g)}else null!=e&&(m=e-g);n=shaka.util.ManifestParserUtils.GAP_OVERLAP_TOLERANCE_SECONDS;m&&l&&Math.abs(m-\nl)>n&&shaka.log.warning(\"There is a gap/overlap between Periods\",k);null==m&&(m=l);k=this.parsePeriod_(a,b,{start:g,duration:m,node:k,index:h,isLastPeriod:null==m||h==c.length-1});f.push(k);l=a.period.id;-1==this.periodIds_.indexOf(l)&&(this.periodIds_.push(l),this.manifest_&&(this.playerInterface_.filterNewPeriod(k),this.manifest_.periods.push(k)));if(null==m){h!=c.length-1&&shaka.log.warning(\"Skipping Period\",h+1,\"and any subsequent Periods:\",\"Period\",h+1,\"does not have a valid start time.\",f[h+\n1]);g=null;break}g+=m}null==this.manifest_&&this.playerInterface_.filterAllPeriods(f);return null!=e?(g!=e&&shaka.log.warning(\"@mediaPresentationDuration does not match the total duration of all\",\"Periods.\"),{periods:f,duration:e,durationDerivedFromPeriods:!1}):{periods:f,duration:g,durationDerivedFromPeriods:!0}};\nshaka.dash.DashParser.prototype.parsePeriod_=function(a,b,c){var d=shaka.util.Functional,e=shaka.util.XmlUtils,f=shaka.util.ManifestParserUtils.ContentType;a.period=this.createFrame_(c.node,null,b);a.periodInfo=c;a.period.id||(shaka.log.info(\"No Period ID given for Period with start time \"+c.start+\",  Assigning a default\"),a.period.id=\"__shaka_period_\"+c.start);e.findChildren(c.node,\"EventStream\").forEach(this.parseEventStream_.bind(this,c.start,c.duration));b=e.findChildren(c.node,\"AdaptationSet\").map(this.parseAdaptationSet_.bind(this,\na)).filter(d.isNotNull);e=b.map(function(a){return a.representationIds}).reduce(d.collapseArrays,[]);d=e.filter(d.isNotDuplicate);if(a.dynamic&&e.length!=d.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_DUPLICATE_REPRESENTATION_ID);var g=b.filter(function(a){return!a.trickModeFor});b.filter(function(a){return a.trickModeFor}).forEach(function(a){var b=a.streams[0],c=a.trickModeFor;g.forEach(function(a){a.id==c&&a.streams.forEach(function(a){a.trickModeVideo=\nb})})});b=this.getSetsOfType_(g,f.VIDEO);e=this.getSetsOfType_(g,f.AUDIO);if(!b.length&&!e.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_EMPTY_PERIOD);e.length||(e=[null]);b.length||(b=[null]);a=[];for(d=0;d<e.length;d++)for(var h=0;h<b.length;h++)this.createVariants_(e[d],b[h],a);f=this.getSetsOfType_(g,f.TEXT);b=[];for(d=0;d<f.length;d++)b.push.apply(b,f[d].streams);return{startTime:c.start,textStreams:b,variants:a}};\nshaka.dash.DashParser.prototype.getSetsOfType_=function(a,b){return a.filter(function(a){return a.contentType==b})};\nshaka.dash.DashParser.prototype.createVariants_=function(a,b,c){var d=shaka.util.ManifestParserUtils.ContentType;goog.asserts.assert(!a||a.contentType==d.AUDIO,\"Audio parameter mismatch!\");goog.asserts.assert(!b||b.contentType==d.VIDEO,\"Video parameter mismatch!\");if(a||b)if(a&&b){if(d=shaka.media.DrmEngine,d.areDrmCompatible(a.drmInfos,b.drmInfos)){var e=d.getCommonDrmInfos(a.drmInfos,b.drmInfos);for(d=0;d<a.streams.length;d++)for(var f=0;f<b.streams.length;f++){var g=(b.streams[f].bandwidth||0)+\n(a.streams[d].bandwidth||0);g={id:this.globalId_++,language:a.language,primary:a.main||b.main,audio:a.streams[d],video:b.streams[f],bandwidth:g,drmInfos:e,allowedByApplication:!0,allowedByKeySystem:!0};c.push(g)}}}else for(e=a||b,d=0;d<e.streams.length;d++)g=e.streams[d].bandwidth||0,g={id:this.globalId_++,language:e.language||\"und\",primary:e.main,audio:a?e.streams[d]:null,video:b?e.streams[d]:null,bandwidth:g,drmInfos:e.drmInfos,allowedByApplication:!0,allowedByKeySystem:!0},c.push(g)};\nshaka.dash.DashParser.prototype.parseAdaptationSet_=function(a,b){var c=shaka.util.XmlUtils,d=shaka.util.Functional,e=shaka.util.ManifestParserUtils,f=e.ContentType;a.adaptationSet=this.createFrame_(b,a.period,null);var g=!1,h=c.findChildren(b,\"Role\");d=h.map(function(a){return a.getAttribute(\"value\")}).filter(d.isNotNull);var k=void 0;a.adaptationSet.contentType==e.ContentType.TEXT&&(k=e.TextStreamKind.SUBTITLE);for(e=0;e<h.length;e++){var l=h[e].getAttribute(\"schemeIdUri\");if(null==l||\"urn:mpeg:dash:role:2011\"==\nl)switch(l=h[e].getAttribute(\"value\"),l){case \"main\":g=!0;break;case \"caption\":case \"subtitle\":k=l}}var m=null,n=!1;c.findChildren(b,\"EssentialProperty\").forEach(function(a){\"http://dashif.org/guidelines/trickmode\"==a.getAttribute(\"schemeIdUri\")?m=a.getAttribute(\"value\"):n=!0});if(n)return null;h=c.findChildren(b,\"ContentProtection\");var p=shaka.dash.ContentProtection.parseFromAdaptationSet(h,this.config_.dash.customScheme,this.config_.dash.ignoreDrmInfo);h=shaka.util.LanguageUtils.normalize(b.getAttribute(\"lang\")||\n\"und\");e=b.getAttribute(\"label\");c=c.findChildren(b,\"Representation\");d=c.map(this.parseRepresentation_.bind(this,a,p,k,h,e,g,d)).filter(function(a){return!!a});if(0==d.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.DASH_EMPTY_ADAPTATION_SET);a.adaptationSet.contentType&&a.adaptationSet.contentType!=f.APPLICATION||(a.adaptationSet.contentType=shaka.dash.DashParser.guessContentType_(d[0].mimeType,d[0].codecs),d.forEach(function(b){b.type=\na.adaptationSet.contentType}));d.forEach(function(a){p.drmInfos.forEach(function(b){a.keyId&&b.keyIds.push(a.keyId)})});f=c.map(function(a){return a.getAttribute(\"id\")}).filter(shaka.util.Functional.isNotNull);return{id:a.adaptationSet.id||\"__fake__\"+this.globalId_++,contentType:a.adaptationSet.contentType,language:h,main:g,streams:d,drmInfos:p.drmInfos,trickModeFor:m,representationIds:f}};\nshaka.dash.DashParser.prototype.parseRepresentation_=function(a,b,c,d,e,f,g,h){var k=shaka.util.XmlUtils,l=shaka.util.ManifestParserUtils.ContentType;a.representation=this.createFrame_(h,a.adaptationSet,null);if(!this.verifyRepresentation_(a.representation))return shaka.log.warning(\"Skipping Representation\",a.representation),null;a.bandwidth=k.parseAttr(h,\"bandwidth\",k.parsePositiveInt)||0;var m=this.requestInitSegment_.bind(this);if(a.representation.segmentBase)l=shaka.dash.SegmentBase.createStream(a,\nm);else if(a.representation.segmentList)l=shaka.dash.SegmentList.createStream(a,this.segmentIndexMap_);else if(a.representation.segmentTemplate)l=shaka.dash.SegmentTemplate.createStream(a,m,this.segmentIndexMap_,!!this.manifest_);else{goog.asserts.assert(a.representation.contentType==l.TEXT||a.representation.contentType==l.APPLICATION,\"Must have Segment* with non-text streams.\");var n=a.representation.baseUris,p=a.periodInfo.duration||0;l={createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(a){return 0<=\na&&a<p?1:null},getSegmentReference:function(a){return 1!=a?null:new shaka.media.SegmentReference(1,0,p,function(){return n},0,null)},initSegmentReference:null,scaledPresentationTimeOffset:0}}h=k.findChildren(h,\"ContentProtection\");h=shaka.dash.ContentProtection.parseFromRepresentation(h,this.config_.dash.customScheme,b,this.config_.dash.ignoreDrmInfo);return{id:this.globalId_++,createSegmentIndex:l.createSegmentIndex,findSegmentPosition:l.findSegmentPosition,getSegmentReference:l.getSegmentReference,\ninitSegmentReference:l.initSegmentReference,presentationTimeOffset:l.scaledPresentationTimeOffset,mimeType:a.representation.mimeType,codecs:a.representation.codecs,frameRate:a.representation.frameRate,bandwidth:a.bandwidth,width:a.representation.width,height:a.representation.height,kind:c,encrypted:0<b.drmInfos.length,keyId:h,language:d,label:e,type:a.adaptationSet.contentType,primary:f,trickModeVideo:null,containsEmsgBoxes:a.representation.containsEmsgBoxes,roles:g,channelsCount:a.representation.numChannels}};\nshaka.dash.DashParser.prototype.onUpdate_=function(){goog.asserts.assert(this.updateTimer_,\"Should only be called by timer\");goog.asserts.assert(0<=this.updatePeriod_,\"There should be an update period\");shaka.log.info(\"Updating manifest...\");this.updateTimer_=null;var a=Date.now();this.requestManifest_().then(function(){if(this.playerInterface_){var b=Date.now();this.setUpdateTimer_((b-a)/1E3)}}.bind(this))[\"catch\"](function(a){goog.asserts.assert(a instanceof shaka.util.Error,\"Should only receive a Shaka error\");\nthis.playerInterface_&&(a.severity=shaka.util.Error.Severity.RECOVERABLE,this.playerInterface_.onError(a),this.setUpdateTimer_(0))}.bind(this))};\nshaka.dash.DashParser.prototype.setUpdateTimer_=function(a){if(!(0>this.updatePeriod_)){goog.asserts.assert(null==this.updateTimer_,\"Timer should not be already set\");a=Math.max(Math.max(shaka.dash.DashParser.MIN_UPDATE_PERIOD_,this.updatePeriod_)-a,0);shaka.log.debug(\"updateInterval\",a);var b=this.onUpdate_.bind(this);this.updateTimer_=window.setTimeout(b,1E3*a)}};\nshaka.dash.DashParser.prototype.createFrame_=function(a,b,c){goog.asserts.assert(b||c,\"Must provide either parent or baseUris\");var d=shaka.util.ManifestParserUtils,e=shaka.util.XmlUtils;b=b||{contentType:\"\",mimeType:\"\",codecs:\"\",containsEmsgBoxes:!1,frameRate:void 0,numChannels:null};c=c||b.baseUris;var f=e.parseNonNegativeInt,g=e.evalDivision,h=e.findChildren(a,\"BaseURL\").map(e.getContents),k=a.getAttribute(\"contentType\")||b.contentType,l=a.getAttribute(\"mimeType\")||b.mimeType,m=a.getAttribute(\"codecs\")||\nb.codecs;g=e.parseAttr(a,\"frameRate\",g)||b.frameRate;var n=!!e.findChildren(a,\"InbandEventStream\").length,p=e.findChildren(a,\"AudioChannelConfiguration\");p=this.parseAudioChannels_(p)||b.numChannels;k||(k=shaka.dash.DashParser.guessContentType_(l,m));return{baseUris:d.resolveUris(c,h),segmentBase:e.findChild(a,\"SegmentBase\")||b.segmentBase,segmentList:e.findChild(a,\"SegmentList\")||b.segmentList,segmentTemplate:e.findChild(a,\"SegmentTemplate\")||b.segmentTemplate,width:e.parseAttr(a,\"width\",f)||b.width,\nheight:e.parseAttr(a,\"height\",f)||b.height,contentType:k,mimeType:l,codecs:m,frameRate:g,containsEmsgBoxes:n||b.containsEmsgBoxes,id:a.getAttribute(\"id\"),numChannels:p}};\nshaka.dash.DashParser.prototype.parseAudioChannels_=function(a){for(var b=0;b<a.length;++b){var c=a[b],d=c.getAttribute(\"schemeIdUri\");if(d&&(c=c.getAttribute(\"value\")))switch(d){case \"urn:mpeg:dash:outputChannelPositionList:2012\":return c.trim().split(/ +/).length;case \"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\":case \"urn:dts:dash:audio_channel_configuration:2012\":var e=parseInt(c,10);if(!e){shaka.log.warning(\"Channel parsing failure! Ignoring scheme and value\",d,c);continue}return e;\ncase \"tag:dolby.com,2014:dash:audio_channel_configuration:2011\":case \"urn:dolby:dash:audio_channel_configuration:2011\":e=parseInt(c,16);if(!e){shaka.log.warning(\"Channel parsing failure! Ignoring scheme and value\",d,c);continue}for(a=0;e;)e&1&&++a,e>>=1;return a;default:shaka.log.warning(\"Unrecognized audio channel scheme:\",d,c)}}return null};\nshaka.dash.DashParser.prototype.verifyRepresentation_=function(a){var b=shaka.util.ManifestParserUtils.ContentType;var c=0+(a.segmentBase?1:0);c+=a.segmentList?1:0;c+=a.segmentTemplate?1:0;if(0==c){if(a.contentType==b.TEXT||a.contentType==b.APPLICATION)return!0;shaka.log.warning(\"Representation does not contain a segment information source:\",\"the Representation must contain one of SegmentBase, SegmentList,\",'SegmentTemplate, or explicitly indicate that it is \"text\".',a);return!1}1!=c&&(shaka.log.warning(\"Representation contains multiple segment information sources:\",\n\"the Representation should only contain one of SegmentBase,\",\"SegmentList, or SegmentTemplate.\",a),a.segmentBase?(shaka.log.info(\"Using SegmentBase by default.\"),a.segmentList=null):(goog.asserts.assert(a.segmentList,\"There should be a SegmentList\"),shaka.log.info(\"Using SegmentList by default.\")),a.segmentTemplate=null);return!0};\nshaka.dash.DashParser.prototype.requestForTiming_=function(a,b,c){a=shaka.util.ManifestParserUtils.resolveUris(a,[b]);a=shaka.net.NetworkingEngine.makeRequest(a,this.config_.retryParameters);a.method=c;return this.playerInterface_.networkingEngine.request(shaka.net.NetworkingEngine.RequestType.MANIFEST,a).then(function(a){if(\"HEAD\"==c){if(!a.headers||!a.headers.date)return shaka.log.warning(\"UTC timing response is missing\",\"expected date header\"),0;a=a.headers.date}else a=shaka.util.StringUtils.fromUTF8(a.data);\na=Date.parse(a);return isNaN(a)?(shaka.log.warning(\"Unable to parse date from UTC timing response\"),0):a-Date.now()})};\nshaka.dash.DashParser.prototype.parseUtcTiming_=function(a,b,c){b=b.map(function(a){return{scheme:a.getAttribute(\"schemeIdUri\"),value:a.getAttribute(\"value\")}});var d=this.config_.dash.clockSyncUri;c&&!b.length&&d&&b.push({scheme:\"urn:mpeg:dash:utc:http-head:2014\",value:d});return shaka.util.Functional.createFallbackPromiseChain(b,function(b){var c=b.scheme;b=b.value;switch(c){case \"urn:mpeg:dash:utc:http-head:2014\":case \"urn:mpeg:dash:utc:http-head:2012\":return this.requestForTiming_(a,b,\"HEAD\");\ncase \"urn:mpeg:dash:utc:http-xsdate:2014\":case \"urn:mpeg:dash:utc:http-iso:2014\":case \"urn:mpeg:dash:utc:http-xsdate:2012\":case \"urn:mpeg:dash:utc:http-iso:2012\":return this.requestForTiming_(a,b,\"GET\");case \"urn:mpeg:dash:utc:direct:2014\":case \"urn:mpeg:dash:utc:direct:2012\":return c=Date.parse(b),isNaN(c)?0:c-Date.now();case \"urn:mpeg:dash:utc:http-ntp:2014\":case \"urn:mpeg:dash:utc:ntp:2014\":case \"urn:mpeg:dash:utc:sntp:2014\":return shaka.log.warning(\"NTP UTCTiming scheme is not supported\"),Promise.reject();\ndefault:return shaka.log.warning(\"Unrecognized scheme in UTCTiming element\",c),Promise.reject()}}.bind(this))[\"catch\"](function(){c&&shaka.log.warning(\"A UTCTiming element should always be given in live manifests! This content may not play on clients with bad clocks!\");return 0})};\nshaka.dash.DashParser.prototype.parseEventStream_=function(a,b,c){var d=shaka.util.XmlUtils,e=d.parseNonNegativeInt,f=c.getAttribute(\"schemeIdUri\")||\"\",g=c.getAttribute(\"value\")||\"\",h=d.parseAttr(c,\"timescale\",e)||1;d.findChildren(c,\"Event\").forEach(function(c){var k=d.parseAttr(c,\"presentationTime\",e)||0,m=d.parseAttr(c,\"duration\",e)||0;k=k/h+a;m=k+m/h;null!=b&&(k=Math.min(k,a+b),m=Math.min(m,a+b));c={schemeIdUri:f,value:g,startTime:k,endTime:m,id:c.getAttribute(\"id\")||\"\",eventElement:c};this.playerInterface_.onTimelineRegionAdded(c)}.bind(this))};\nshaka.dash.DashParser.prototype.requestInitSegment_=function(a,b,c){var d=shaka.net.NetworkingEngine.RequestType.SEGMENT;a=shaka.net.NetworkingEngine.makeRequest(a,this.config_.retryParameters);null!=b&&(a.headers.Range=\"bytes=\"+b+\"-\"+(null!=c?c:\"\"));return this.playerInterface_.networkingEngine.request(d,a).then(function(a){return a.data})};\nshaka.dash.DashParser.guessContentType_=function(a,b){var c=shaka.util.MimeUtils.getFullType(a,b);return shaka.text.TextEngine.isTypeSupported(c)?shaka.util.ManifestParserUtils.ContentType.TEXT:a.split(\"/\")[0]};shaka.media.ManifestParser.registerParserByExtension(\"mpd\",shaka.dash.DashParser);shaka.media.ManifestParser.registerParserByMime(\"application/dash+xml\",shaka.dash.DashParser);shaka.hls={};shaka.hls.Playlist=function(a,b,c,d){this.uri=a;this.type=b;this.tags=c;this.segments=d||null};shaka.hls.PlaylistType={MASTER:0,MEDIA:1};shaka.hls.Tag=function(a,b,c,d){goog.asserts.assert(0==c.length&&d||0<c.length&&!d||0==c.length&&!d,\"Tags can only take the form (1) <NAME>:<VALUE> (2) <NAME>:<ATTRIBUTE_LIST>  (3) <NAME>\");this.id=a;this.name=b;this.attributes=c;this.value=d||null};\nshaka.hls.Tag.prototype.toString=function(){var a=function(a){return a.name+'=\"'+a.value+'\"'};return this.value?\"#\"+this.name+\":\"+this.value:0<this.attributes.length?\"#\"+this.name+\":\"+this.attributes.map(a).join(\",\"):\"#\"+this.name};shaka.hls.Attribute=function(a,b){this.name=a;this.value=b};shaka.hls.Tag.prototype.addAttribute=function(a){this.attributes.push(a)};\nshaka.hls.Tag.prototype.getAttribute=function(a){var b=this.attributes.filter(function(b){return b.name==a});goog.asserts.assert(2>b.length,\"A tag should not have multiple attributes with the same name!\");return b.length?b[0]:null};shaka.hls.Tag.prototype.getAttributeValue=function(a,b){var c=b||null,d=this.getAttribute(a);return d?d.value:c};shaka.hls.Segment=function(a,b){this.tags=b;this.uri=a};shaka.hls.Utils={};shaka.hls.Utils.filterTagsByName=function(a,b){return a.filter(function(a){return a.name==b})};shaka.hls.Utils.getFirstTagWithName=function(a,b){var c=shaka.hls.Utils.filterTagsByName(a,b);return c.length?c[0]:null};shaka.hls.Utils.findMediaTags=function(a,b,c){return a.filter(function(a){var d=a.getAttribute(\"TYPE\");a=a.getAttribute(\"GROUP-ID\");return d.value==b&&a.value==c})};\nshaka.hls.Utils.constructAbsoluteUri=function(a,b){return shaka.util.ManifestParserUtils.resolveUris([a],[b])[0]};shaka.hls.Utils.isComment=function(a){return/^#(?!EXT)/m.test(a)};shaka.util.TextParser=function(a){this.data_=a;this.position_=0};shaka.util.TextParser.prototype.atEnd=function(){return this.position_==this.data_.length};shaka.util.TextParser.prototype.readLine=function(){return this.readRegexReturnCapture_(/(.*?)(\\n|$)/gm,1)};shaka.util.TextParser.prototype.readWord=function(){return this.readRegexReturnCapture_(/[^ \\t\\n]*/gm,0)};shaka.util.TextParser.prototype.skipWhitespace=function(){this.readRegex(/[ \\t]+/gm)};\nshaka.util.TextParser.prototype.readRegex=function(a){a=this.indexOf_(a);if(this.atEnd()||null==a||a.position!=this.position_)return null;this.position_+=a.length;return a.results};shaka.util.TextParser.prototype.readRegexReturnCapture_=function(a,b){if(this.atEnd())return null;var c=this.readRegex(a);return c?c[b]:null};\nshaka.util.TextParser.prototype.indexOf_=function(a){goog.asserts.assert(a.global,\"global flag should be set\");a.lastIndex=this.position_;a=a.exec(this.data_);return null==a?null:{position:a.index,length:a[0].length,results:a}};shaka.hls.ManifestTextParser=function(){this.globalId_=0};\nshaka.hls.ManifestTextParser.prototype.parsePlaylist=function(a,b){var c=shaka.util.StringUtils.fromUTF8(a);c=c.replace(/\\r\\n|\\r(?=[^\\n]|$)/gm,\"\\n\").trim();var d=c.split(/\\n+/m);if(!/^#EXTM3U($|[ \\t\\n])/m.test(d[0]))throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_PLAYLIST_HEADER_MISSING);c=shaka.hls.PlaylistType.MASTER;for(var e=[],f=1;f<d.length;)if(shaka.hls.Utils.isComment(d[f]))f+=1;else{var g=this.parseTag_(d[f]);if(0<=\nshaka.hls.ManifestTextParser.MEDIA_PLAYLIST_TAGS.indexOf(g.name))c=shaka.hls.PlaylistType.MEDIA;else if(0<=shaka.hls.ManifestTextParser.SEGMENT_TAGS.indexOf(g.name)){if(c!=shaka.hls.PlaylistType.MEDIA)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_INVALID_PLAYLIST_HIERARCHY);d=d.splice(f,d.length-f);d=this.parseSegments_(d,e);return new shaka.hls.Playlist(b,c,e,d)}e.push(g);f+=1;if(\"EXT-X-STREAM-INF\"==g.name){var h=new shaka.hls.Attribute(\"URI\",\nd[f]);g.addAttribute(h);f+=1}}return new shaka.hls.Playlist(b,c,e)};shaka.hls.ManifestTextParser.prototype.parseSegments_=function(a,b){var c=[],d=[];a.forEach(function(a){if(/^(#EXT)/.test(a))a=this.parseTag_(a),0<=shaka.hls.ManifestTextParser.MEDIA_PLAYLIST_TAGS.indexOf(a.name)?b.push(a):d.push(a);else{if(shaka.hls.Utils.isComment(a))return[];a=a.trim();a=new shaka.hls.Segment(a,d);c.push(a);d=[]}}.bind(this));return c};\nshaka.hls.ManifestTextParser.prototype.parseTag_=function(a){return shaka.hls.ManifestTextParser.parseTag(this.globalId_++,a)};\nshaka.hls.ManifestTextParser.parseTag=function(a,b){var c=b.match(/^#(EXT[^:]*)(?::(.*))?$/);if(!c)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.INVALID_HLS_TAG);var d=c[1],e=c[2];c=[];if(e&&0<=e.indexOf(\"=\")){e=new shaka.util.TextParser(e);for(var f,g=/([^=]+)=(?:\"([^\"]*)\"|([^\",]*))(?:,|$)/g;f=e.readRegex(g);)f=new shaka.hls.Attribute(f[1],f[2]||f[3]),c.push(f)}else if(e)return new shaka.hls.Tag(a,d,c,e);return new shaka.hls.Tag(a,\nd,c)};shaka.hls.ManifestTextParser.MEDIA_PLAYLIST_TAGS=\"EXT-X-TARGETDURATION EXT-X-MEDIA-SEQUENCE EXT-X-DISCONTINUITY-SEQUENCE EXT-X-PLAYLIST-TYPE EXT-X-MAP EXT-X-I-FRAMES-ONLY EXT-X-ENDLIST\".split(\" \");shaka.hls.ManifestTextParser.SEGMENT_TAGS=\"EXTINF EXT-X-BYTERANGE EXT-X-DISCONTINUITY EXT-X-PROGRAM-DATE-TIME EXT-X-KEY EXT-X-DATERANGE\".split(\" \");shaka.net.DataUriPlugin=function(a,b){return new Promise(function(b,d){var c=shaka.net.DataUriPlugin.parse(a);b({uri:a,data:c.data,headers:{\"content-type\":c.contentType}})})};goog.exportSymbol(\"shaka.net.DataUriPlugin\",shaka.net.DataUriPlugin);\nshaka.net.DataUriPlugin.parse=function(a){var b=a.split(\":\");if(2>b.length||\"data\"!=b[0])throw shaka.log.error(\"Bad data URI, failed to parse scheme\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.NETWORK,shaka.util.Error.Code.MALFORMED_DATA_URI,a);b=b.slice(1).join(\":\").split(\",\");if(2>b.length)throw shaka.log.error(\"Bad data URI, failed to extract encoding and MIME type\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.NETWORK,\nshaka.util.Error.Code.MALFORMED_DATA_URI,a);var c=b[0];b=window.decodeURIComponent(b.slice(1).join(\",\"));c=c.split(\";\");var d=null;1<c.length&&(d=c[1]);if(\"base64\"==d)a=shaka.util.Uint8ArrayUtils.fromBase64(b).buffer;else{if(d)throw shaka.log.error(\"Bad data URI, unknown encoding\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.NETWORK,shaka.util.Error.Code.UNKNOWN_DATA_URI_ENCODING,a);a=shaka.util.StringUtils.toUTF8(b)}return{data:a,contentType:c[0]}};\nshaka.net.NetworkingEngine.registerScheme(\"data\",shaka.net.DataUriPlugin);shaka.hls.HlsParser=function(){this.config_=this.playerInterface_=null;this.globalId_=1;this.mediaTagsToStreamInfosMap_={};this.urisToVariantsMap_={};this.streamsToIndexMap_={};this.uriToStreamInfosMap_={};this.presentationTimeline_=null;this.manifestUri_=\"\";this.manifestTextParser_=new shaka.hls.ManifestTextParser;this.updateTimer_=this.updatePeriod_=null;this.presentationType_=shaka.hls.HlsParser.PresentationType_.VOD;this.manifest_=null;this.maxTargetDuration_=0;this.minTargetDuration_=Infinity};\ngoog.exportSymbol(\"shaka.hls.HlsParser\",shaka.hls.HlsParser);shaka.hls.HlsParser.prototype.configure=function(a){this.config_=a};shaka.hls.HlsParser.prototype.start=function(a,b){goog.asserts.assert(this.config_,\"Must call configure() before start()!\");this.playerInterface_=b;this.manifestUri_=a;return this.requestManifest_(a).then(function(b){return this.parseManifest_(b.data,a).then(function(){this.setUpdateTimer_(this.updatePeriod_);return this.manifest_}.bind(this))}.bind(this))};\nshaka.hls.HlsParser.prototype.stop=function(){this.config_=this.playerInterface_=null;this.mediaTagsToStreamInfosMap_={};this.urisToVariantsMap_={};this.manifest_=null;return Promise.resolve()};shaka.hls.HlsParser.prototype.update=function(){if(this.isLive_()){var a=[],b;for(b in this.uriToStreamInfosMap_)a.push(this.updateStream_(this.uriToStreamInfosMap_[b],b));return Promise.all(a)}};\nshaka.hls.HlsParser.prototype.updateStream_=function(a,b){this.requestManifest_(b).then(function(c){var d=shaka.hls.Utils,e=shaka.hls.HlsParser.PresentationType_,f=this.manifestTextParser_.parsePlaylist(c.data,b);if(f.type!=shaka.hls.PlaylistType.MEDIA)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_INVALID_PLAYLIST_HIERARCHY);c=d.getFirstTagWithName(f.tags,\"EXT-X-MEDIA-SEQUENCE\");var g=a.stream;this.createSegments_(f,c?Number(c.value):\n0,g.mimeType,g.codecs).then(function(b){a.segmentIndex.replace(b);b=b[b.length-1];goog.asserts.assert(b,\"Should have segments!\");d.getFirstTagWithName(f.tags,\"EXT-X-ENDLIST\")&&(this.setPresentationType_(e.VOD),this.presentationTimeline_.setDuration(b.endTime))}.bind(this))}.bind(this))};shaka.hls.HlsParser.prototype.onExpirationUpdated=function(a,b){};\nshaka.hls.HlsParser.prototype.parseManifest_=function(a,b){var c=this.manifestTextParser_.parsePlaylist(a,b);if(c.type!=shaka.hls.PlaylistType.MASTER)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_MASTER_PLAYLIST_NOT_PROVIDED);return this.createPeriod_(c).then(function(a){this.playerInterface_.filterAllPeriods([a]);var b=Infinity,c=0,d=0,h=Infinity,k;for(k in this.uriToStreamInfosMap_){var l=this.uriToStreamInfosMap_[k];b=\nMath.min(b,l.minTimestamp);c=Math.max(c,l.minTimestamp);d=Math.max(d,l.maxTimestamp);\"text\"!=l.stream.type&&(h=Math.min(h,l.duration))}goog.asserts.assert(null==this.presentationTimeline_,\"Presentation timeline created early!\");this.createPresentationTimeline_(d);if(this.isLive_()){l=3*this.maxTargetDuration_;this.presentationTimeline_.setDelay(l);this.updatePeriod_=this.minTargetDuration_;this.presentationType_==shaka.hls.HlsParser.PresentationType_.LIVE&&this.presentationTimeline_.setSegmentAvailabilityDuration(l);\nb=shaka.hls.HlsParser.TS_ROLLOVER_/shaka.hls.HlsParser.TS_TIMESCALE_;for(d=0;c>=b;)d+=b,c-=b;if(d)for(k in shaka.log.debug(\"Offsetting live streams by\",d,\"to compensate for rollover\"),this.uriToStreamInfosMap_)l=this.uriToStreamInfosMap_[k],l.minTimestamp<b?(shaka.log.v1(\"Offset applied to\",l.stream.type),l.stream.presentationTimeOffset=-d,l.segmentIndex.offset(d)):shaka.log.v1(\"Offset NOT applied to\",l.stream.type)}else for(k in this.presentationTimeline_.setDuration(h),this.uriToStreamInfosMap_)l=\nthis.uriToStreamInfosMap_[k],l.stream.presentationTimeOffset=b,l.segmentIndex.offset(-b),l.segmentIndex.fit(h);this.manifest_={presentationTimeline:this.presentationTimeline_,periods:[a],offlineSessionIds:[],minBufferTime:0}}.bind(this))};\nshaka.hls.HlsParser.prototype.createPeriod_=function(a){var b=shaka.hls.Utils,c=shaka.util.Functional,d=a.tags,e=b.filterTagsByName(a.tags,\"EXT-X-MEDIA\").filter(function(a){return\"SUBTITLES\"==shaka.hls.HlsParser.getRequiredAttributeValue_(a,\"TYPE\")}.bind(this)).map(function(b){return this.createTextStream_(b,a)}.bind(this));return Promise.all(e).then(function(e){var f=b.filterTagsByName(d,\"EXT-X-STREAM-INF\").map(function(b){return this.createVariantsForTag_(b,a)}.bind(this));return Promise.all(f).then(function(a){return{startTime:0,\nvariants:a.reduce(c.collapseArrays,[]),textStreams:e}}.bind(this))}.bind(this))};\nshaka.hls.HlsParser.prototype.createVariantsForTag_=function(a,b){goog.asserts.assert(\"EXT-X-STREAM-INF\"==a.name,\"Should only be called on variant tags!\");var c=shaka.util.ManifestParserUtils.ContentType,d=shaka.hls.HlsParser,e=shaka.hls.Utils,f=a.getAttributeValue(\"CODECS\",\"avc1.42E01E,mp4a.40.2\").split(\",\"),g=a.getAttribute(\"RESOLUTION\"),h=null,k=null,l=a.getAttributeValue(\"FRAME-RATE\"),m=Number(d.getRequiredAttributeValue_(a,\"BANDWIDTH\"));if(g){var n=g.value.split(\"x\");h=n[0];k=n[1]}n=e.filterTagsByName(b.tags,\n\"EXT-X-MEDIA\");var p=a.getAttributeValue(\"AUDIO\"),q=a.getAttributeValue(\"VIDEO\");goog.asserts.assert(null==p||null==q,\"Unexpected: both video and audio described by media tags!\");p?n=e.findMediaTags(n,\"AUDIO\",p):q&&(n=e.findMediaTags(n,\"VIDEO\",q));var r=this.guessCodecsSafe_(c.TEXT,f);if(r){var v=a.getAttributeValue(\"SUBTITLES\");v&&(e=e.findMediaTags(n,\"SUBTITLES\",v),goog.asserts.assert(1==e.length,\"Exactly one text tag expected!\"),e.length&&(this.mediaTagsToStreamInfosMap_[e[0].id].stream.codecs=\nr));f.splice(f.indexOf(r),1)}e=n.map(function(a){return this.createStreamInfoFromMediaTag_(a,f)}.bind(this));var t=[],u=[];return Promise.all(e).then(function(b){p?t=b:q&&(u=b);shaka.log.debug(\"Guessing stream type for\",a.toString());b=!1;if(t.length||u.length)if(t.length)if(d.getRequiredAttributeValue_(a,\"URI\")==t[0].relativeUri){shaka.log.debug(\"Guessing audio-only.\");var e=c.AUDIO;b=!0}else shaka.log.debug(\"Guessing video.\"),e=c.VIDEO;else goog.asserts.assert(u.length,\"No video streams!  This should have been handled already!\"),\nshaka.log.debug(\"Guessing audio.\"),e=c.AUDIO;else 1==f.length?(e=this.guessCodecsSafe_(c.VIDEO,f),g||l||e?(shaka.log.debug(\"Guessing video-only.\"),e=c.VIDEO):(shaka.log.debug(\"Guessing audio-only.\"),e=c.AUDIO)):(shaka.log.debug(\"Guessing multiplexed audio+video.\"),e=c.VIDEO,f=[f.join(\",\")]);goog.asserts.assert(e,\"Type should have been set by now!\");return b?Promise.resolve():this.createStreamInfoFromVariantTag_(a,f,e)}.bind(this)).then(function(a){a&&(a.stream.type==c.AUDIO?t=[a]:u=[a]);goog.asserts.assert(u||\nt,\"We should have created a stream!\");u&&this.filterLegacyCodecs_(u);t&&this.filterLegacyCodecs_(t);return this.createVariants_(t,u,m,h,k,l)}.bind(this))};shaka.hls.HlsParser.prototype.filterLegacyCodecs_=function(a){a.forEach(function(a){var b=a.stream.codecs.split(\",\");b=b.filter(function(a){return\"mp4a.40.34\"!=a});a.stream.codecs=b.join(\",\")})};\nshaka.hls.HlsParser.prototype.createVariants_=function(a,b,c,d,e,f){var g=shaka.media.DrmEngine;b.forEach(function(a){this.addVideoAttributes_(a.stream,d,e,f)}.bind(this));a.length||(a=[null]);b.length||(b=[null]);for(var h=[],k=0;k<a.length;k++)for(var l=0;l<b.length;l++){var m=a[k]?a[k].stream:null,n=b[l]?b[l].stream:null,p=a[k]?a[k].drmInfos:null,q=b[l]?b[l].drmInfos:null;if(m&&n)if(g.areDrmCompatible(p,q))var r=g.getCommonDrmInfos(p,q);else{shaka.log.warning(\"Incompatible DRM info in HLS variant.  Skipping.\");\ncontinue}else m?r=p:n&&(r=q);p=(b[k]?b[k].relativeUri:\"\")+\" - \"+(a[k]?a[k].relativeUri:\"\");this.urisToVariantsMap_[p]?shaka.log.debug(\"Skipping variant which only differs in text streams.\"):(m=this.createVariant_(m,n,c,r),h.push(m),this.urisToVariantsMap_[p]=m)}return h};\nshaka.hls.HlsParser.prototype.createVariant_=function(a,b,c,d){var e=shaka.util.ManifestParserUtils.ContentType;goog.asserts.assert(!a||a.type==e.AUDIO,\"Audio parameter mismatch!\");goog.asserts.assert(!b||b.type==e.VIDEO,\"Video parameter mismatch!\");return{id:this.globalId_++,language:a?a.language:\"und\",primary:!!a&&a.primary||!!b&&b.primary,audio:a,video:b,bandwidth:c,drmInfos:d,allowedByApplication:!0,allowedByKeySystem:!0}};\nshaka.hls.HlsParser.prototype.createTextStream_=function(a,b){goog.asserts.assert(\"EXT-X-MEDIA\"==a.name,\"Should only be called on media tags!\");var c=shaka.hls.HlsParser.getRequiredAttributeValue_(a,\"TYPE\");goog.asserts.assert(\"SUBTITLES\"==c,'Should only be called on tags with TYPE=\"SUBTITLES\"!');return this.createStreamInfoFromMediaTag_(a,[]).then(function(a){return a.stream})};\nshaka.hls.HlsParser.prototype.createStreamInfoFromMediaTag_=function(a,b){goog.asserts.assert(\"EXT-X-MEDIA\"==a.name,\"Should only be called on media tags!\");var c=shaka.hls.HlsParser,d=c.getRequiredAttributeValue_(a,\"URI\");d=shaka.hls.Utils.constructAbsoluteUri(this.manifestUri_,d);if(this.uriToStreamInfosMap_[d])return Promise.resolve(this.uriToStreamInfosMap_[d]);c=c.getRequiredAttributeValue_(a,\"TYPE\").toLowerCase();var e=shaka.util.ManifestParserUtils.ContentType;\"subtitles\"==c&&(c=e.TEXT);e=shaka.util.LanguageUtils.normalize(a.getAttributeValue(\"LANGUAGE\",\n\"und\"));var f=a.getAttributeValue(\"NAME\"),g=a.getAttribute(\"DEFAULT\"),h=a.getAttribute(\"AUTOSELECT\"),k=a.getAttributeValue(\"CHANNELS\");k=\"audio\"==c?this.getChannelsCount_(k):null;return this.createStreamInfo_(d,b,c,e,!!g||!!h,f,k).then(function(b){if(this.uriToStreamInfosMap_[d])return this.uriToStreamInfosMap_[d];this.mediaTagsToStreamInfosMap_[a.id]=b;return this.uriToStreamInfosMap_[d]=b}.bind(this))};\nshaka.hls.HlsParser.prototype.getChannelsCount_=function(a){if(!a)return null;a=a.split(\"/\")[0];return parseInt(a,10)};\nshaka.hls.HlsParser.prototype.createStreamInfoFromVariantTag_=function(a,b,c){goog.asserts.assert(\"EXT-X-STREAM-INF\"==a.name,\"Should only be called on media tags!\");var d=shaka.hls.HlsParser.getRequiredAttributeValue_(a,\"URI\");d=shaka.hls.Utils.constructAbsoluteUri(this.manifestUri_,d);return this.uriToStreamInfosMap_[d]?Promise.resolve(this.uriToStreamInfosMap_[d]):this.createStreamInfo_(d,b,c,\"und\",!1,null,null).then(function(a){return this.uriToStreamInfosMap_[d]?this.uriToStreamInfosMap_[d]:this.uriToStreamInfosMap_[d]=\na}.bind(this))};\nshaka.hls.HlsParser.prototype.createStreamInfo_=function(a,b,c,d,e,f,g){var h=shaka.hls.Utils,k=shaka.hls.HlsParser,l=a;a=h.constructAbsoluteUri(this.manifestUri_,a);var m,n=\"\",p;return this.requestManifest_(a).then(function(d){m=this.manifestTextParser_.parsePlaylist(d.data,a);if(m.type!=shaka.hls.PlaylistType.MEDIA)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_INVALID_PLAYLIST_HIERARCHY);goog.asserts.assert(null!=m.segments,\n\"Media playlist should have segments!\");this.determinePresentationType_(m);n=this.guessCodecs_(c,b);return this.guessMimeType_(c,n,m)}.bind(this)).then(function(a){p=a;a=h.getFirstTagWithName(m.tags,\"EXT-X-MEDIA-SEQUENCE\");return this.createSegments_(m,a?Number(a.value):0,p,n)}.bind(this)).then(function(a){var b=a[0].startTime,q=a[a.length-1].endTime,t=q-b;a=new shaka.media.SegmentIndex(a);var u=this.createInitSegmentReference_(m),z=void 0,A=shaka.util.ManifestParserUtils;c==A.ContentType.TEXT&&(z=\nA.TextStreamKind.SUBTITLE);var w=[];m.segments.forEach(function(a){a=h.filterTagsByName(a.tags,\"EXT-X-KEY\");w.push.apply(w,a)});var x=!1,y=[],B=null;w.forEach(function(a){if(\"NONE\"!=k.getRequiredAttributeValue_(a,\"METHOD\")){x=!0;var b=k.getRequiredAttributeValue_(a,\"KEYFORMAT\"),c=shaka.hls.HlsParser.KEYFORMATS_TO_DRM_PARSERS_[b];(a=c?c(a):null)?(a.keyIds.length&&(B=a.keyIds[0]),y.push(a)):shaka.log.warning(\"Unsupported HLS KEYFORMAT\",b)}});if(x&&!y.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_KEYFORMATS_NOT_SUPPORTED);u={id:this.globalId_++,createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:a.find.bind(a),getSegmentReference:a.get.bind(a),initSegmentReference:u,presentationTimeOffset:0,mimeType:p,codecs:n,kind:z,encrypted:x,keyId:B,language:d,label:f||null,type:c,primary:e,trickModeVideo:null,containsEmsgBoxes:!1,frameRate:void 0,width:void 0,height:void 0,bandwidth:void 0,roles:[],channelsCount:g};this.streamsToIndexMap_[u.id]=\na;return{stream:u,segmentIndex:a,drmInfos:y,relativeUri:l,minTimestamp:b,maxTimestamp:q,duration:t}}.bind(this))};\nshaka.hls.HlsParser.prototype.determinePresentationType_=function(a){var b=shaka.hls.Utils,c=shaka.hls.HlsParser.PresentationType_,d=b.getFirstTagWithName(a.tags,\"EXT-X-PLAYLIST-TYPE\");b=b.getFirstTagWithName(a.tags,\"EXT-X-ENDLIST\");b=d&&\"VOD\"==d.value||b;d=d&&\"EVENT\"==d.value&&!b;d=!b&&!d;b?this.setPresentationType_(c.VOD):(d?this.setPresentationType_(c.LIVE):this.setPresentationType_(c.EVENT),a=this.getRequiredTag_(a.tags,\"EXT-X-TARGETDURATION\"),a=Number(a.value),this.maxTargetDuration_=Math.max(a,\nthis.maxTargetDuration_),this.minTargetDuration_=Math.min(a,this.minTargetDuration_))};shaka.hls.HlsParser.prototype.createPresentationTimeline_=function(a){var b=null,c=0;this.isLive_()&&(b=Date.now()/1E3-a,c=3*this.maxTargetDuration_);this.presentationTimeline_=new shaka.media.PresentationTimeline(b,c);this.presentationTimeline_.setStatic(!this.isLive_());this.presentationTimeline_.notifyMaxSegmentDuration(this.maxTargetDuration_)};\nshaka.hls.HlsParser.prototype.createInitSegmentReference_=function(a){var b=shaka.hls.Utils,c=b.filterTagsByName(a.tags,\"EXT-X-MAP\");if(!c.length)return null;if(1<c.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_MULTIPLE_MEDIA_INIT_SECTIONS_FOUND);c=c[0];var d=shaka.hls.HlsParser.getRequiredAttributeValue_(c,\"URI\"),e=b.constructAbsoluteUri(a.uri,d);a=0;b=null;if(c=c.getAttributeValue(\"BYTERANGE\"))a=c.split(\"@\"),c=Number(a[0]),\na=Number(a[1]),b=a+c-1;return new shaka.media.InitSegmentReference(function(){return[e]},a,b)};\nshaka.hls.HlsParser.prototype.createSegmentReference_=function(a,b,c,d,e){var f=shaka.hls.Utils,g=c.tags,h=f.constructAbsoluteUri(a.uri,c.uri);a=this.getRequiredTag_(g,\"EXTINF\").value.split(\",\");a=e+Number(a[0]);c=0;var k=null;if(f=f.getFirstTagWithName(g,\"EXT-X-BYTERANGE\"))g=f.value.split(\"@\"),f=Number(g[0]),g[1]?c=Number(g[1]):(goog.asserts.assert(b,\"Cannot refer back to previous HLS segment!\"),c=b.endByte+1),k=c+f-1;return new shaka.media.SegmentReference(d,e,a,function(){return[h]},c,k)};\nshaka.hls.HlsParser.prototype.createSegments_=function(a,b,c,d){var e=shaka.hls.Utils,f=a.segments,g=[];goog.asserts.assert(f.length,\"Playlist should have segments!\");var h=e.constructAbsoluteUri(a.uri,f[0].uri);e=this.createSegmentReference_(a,null,f[0],b,0);var k=this.createInitSegmentReference_(a);return this.getStartTime_(a.uri,k,e,c,d).then(function(c){shaka.log.debug(\"First segment\",h.split(\"/\").pop(),\"starts at\",c);for(var d=0;d<f.length;++d){var e=g[g.length-1];e=this.createSegmentReference_(a,\ne,f[d],b+d,0==d?c:e.endTime);g.push(e)}return g}.bind(this))};\nshaka.hls.HlsParser.prototype.fetchPartialSegment_=function(a){var b=this.playerInterface_.networkingEngine,c=shaka.net.NetworkingEngine.RequestType.SEGMENT,d=shaka.net.NetworkingEngine.makeRequest(a.getUris(),this.config_.retryParameters),e={},f=a.startByte;e.Range=\"bytes=\"+f+\"-\"+(f+shaka.hls.HlsParser.PARTIAL_SEGMENT_SIZE_-1);var g={};if(0!=f||null!=a.endByte)f=\"bytes=\"+f+\"-\",null!=a.endByte&&(f+=a.endByte),g.Range=f;d.headers=e;return b.request(c,d)[\"catch\"](function(a){shaka.log.alwaysWarn(\"Unable to fetch a partial HLS segment! Falling back to a full segment request, which is expensive!  Your server should support Range requests and CORS preflights.\",\nd.uris[0]);d.headers=g;return b.request(c,d)})};\nshaka.hls.HlsParser.prototype.getStartTime_=function(a,b,c,d,e){if(this.manifest_){if(a=this.uriToStreamInfosMap_[a].segmentIndex.get(c.position))return shaka.log.v1(\"Found segment start time in previous manifest\"),Promise.resolve(a.startTime);shaka.log.debug(\"Unable to find segment start time in previous manifest!\")}shaka.log.v1(\"Fetching segment to find start time\");c=[this.fetchPartialSegment_(c)];if(\"video/mp4\"==d||\"audio/mp4\"==d)b?c.push(this.fetchPartialSegment_(b)):c.push(c[0]);return Promise.all(c).then(function(a){if(\"video/mp4\"==\nd||\"audio/mp4\"==d)return this.getStartTimeFromMp4Segment_(a[0].data,a[1].data);if(\"audio/mpeg\"==d)return 0;if(\"video/mp2t\"==d)return this.getStartTimeFromTsSegment_(a[0].data);if(\"application/mp4\"==d||0==d.indexOf(\"text/\"))return this.getStartTimeFromTextSegment_(d,e,a[0].data);throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME);}.bind(this))};\nshaka.hls.HlsParser.prototype.getStartTimeFromMp4Segment_=function(a,b){var c=shaka.util.Mp4Parser,d=0;(new c).box(\"moov\",c.children).box(\"trak\",c.children).box(\"mdia\",c.children).fullBox(\"mdhd\",function(a){goog.asserts.assert(0==a.version||1==a.version,\"MDHD version can only be 0 or 1\");a.reader.skip(0==a.version?8:16);d=a.reader.readUint32();a.parser.stop()}).parse(b,!0);if(!d)throw shaka.log.error(\"Unable to find timescale in init segment!\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME);var e=0,f=!1;(new c).box(\"moof\",c.children).box(\"traf\",c.children).fullBox(\"tfdt\",function(a){goog.asserts.assert(0==a.version||1==a.version,\"TFDT version can only be 0 or 1\");e=(0==a.version?a.reader.readUint32():a.reader.readUint64())/d;f=!0;a.parser.stop()}).parse(a,!0);if(!f)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME);\nreturn e};\nshaka.hls.HlsParser.prototype.getStartTimeFromTsSegment_=function(a){a=new shaka.util.DataViewReader(new DataView(a),shaka.util.DataViewReader.Endianness.BIG_ENDIAN);for(var b=function(){throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_COULD_NOT_PARSE_SEGMENT_START_TIME);},c=0,d=0;;)if(c=a.getPosition(),d=a.readUint8(),71!=d&&b(),a.readUint16()&16384||b(),d=(a.readUint8()&48)>>4,0!=d&&2!=d||b(),3==d&&(d=a.readUint8(),a.skip(d)),\n1!=a.readUint32()>>8)a.seek(c+188),d=a.readUint8(),71!=d&&(a.seek(c+192),d=a.readUint8()),71!=d&&(a.seek(c+204),d=a.readUint8()),71!=d&&b(),a.rewind(1);else return a.skip(3),c=a.readUint8()>>6,0!=c&&1!=c||b(),d=a.readUint8(),0==d&&b(),2==c?goog.asserts.assert(5==d,\"Bad PES header?\"):3==c&&goog.asserts.assert(10==d,\"Bad PES header?\"),b=a.readUint8(),c=a.readUint16(),a=a.readUint16(),(1073741824*((b&14)>>1)+((c&65534)<<14|(a&65534)>>1))/shaka.hls.HlsParser.TS_TIMESCALE_};\nshaka.hls.HlsParser.prototype.getStartTimeFromTextSegment_=function(a,b,c){a=shaka.util.MimeUtils.getFullType(a,b);if(!shaka.text.TextEngine.isTypeSupported(a))return 0;b=new shaka.text.TextEngine(null);b.initParser(a);return b.getStartTime(c)};\nshaka.hls.HlsParser.prototype.guessCodecsSafe_=function(a,b){for(var c=shaka.util.ManifestParserUtils.ContentType,d=shaka.hls.HlsParser.CODEC_REGEXPS_BY_CONTENT_TYPE_[a],e=0;e<d.length;e++)for(var f=0;f<b.length;f++)if(d[e].test(b[f].trim()))return b[f].trim();return a==c.TEXT?\"\":null};\nshaka.hls.HlsParser.prototype.guessCodecs_=function(a,b){if(1==b.length)return b[0];var c=this.guessCodecsSafe_(a,b);if(null!=c)return c;throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_COULD_NOT_GUESS_CODECS,b);};\nshaka.hls.HlsParser.prototype.guessMimeType_=function(a,b,c){var d=shaka.util.ManifestParserUtils.ContentType,e=shaka.hls.HlsParser,f=shaka.hls.Utils;goog.asserts.assert(c.segments.length,\"Playlist should have segments!\");c=f.constructAbsoluteUri(c.uri,c.segments[0].uri);var g=(new goog.Uri(c)).getPath().split(\".\").pop();if(e=e.EXTENSION_MAP_BY_CONTENT_TYPE_[a][g])return Promise.resolve(e);if(a==d.TEXT)return b&&\"vtt\"!=b?Promise.resolve(\"application/mp4\"):Promise.resolve(\"text/vtt\");a=shaka.net.NetworkingEngine.makeRequest([c],\nthis.config_.retryParameters);a.method=\"HEAD\";return this.playerInterface_.networkingEngine.request(shaka.net.NetworkingEngine.RequestType.SEGMENT,a).then(function(a){a=a.headers[\"content-type\"];if(!a)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_COULD_NOT_GUESS_MIME_TYPE,g);return a.split(\";\")[0]})};\nshaka.hls.HlsParser.getRequiredAttributeValue_=function(a,b){var c=a.getAttribute(b);if(!c)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_REQUIRED_ATTRIBUTE_MISSING,b);return c.value};\nshaka.hls.HlsParser.prototype.getRequiredTag_=function(a,b){var c=shaka.hls.Utils.getFirstTagWithName(a,b);if(!c)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.HLS_REQUIRED_TAG_MISSING,b);return c};shaka.hls.HlsParser.prototype.addVideoAttributes_=function(a,b,c,d){a&&(a.width=Number(b)||void 0,a.height=Number(c)||void 0,a.frameRate=Number(d)||void 0)};\nshaka.hls.HlsParser.prototype.requestManifest_=function(a){var b=shaka.net.NetworkingEngine.RequestType.MANIFEST;a=shaka.net.NetworkingEngine.makeRequest([a],this.config_.retryParameters);var c=this.playerInterface_.networkingEngine,d=function(){return!this.playerInterface_}.bind(this);return c.request(b,a,d)};shaka.hls.HlsParser.VIDEO_CODEC_REGEXPS_=[/^avc/,/^hev/,/^hvc/,/^vp0?[89]/,/^av1$/];shaka.hls.HlsParser.AUDIO_CODEC_REGEXPS_=[/^vorbis$/,/^opus$/,/^flac$/,/^mp4a/,/^[ae]c-3$/];\nshaka.hls.HlsParser.TEXT_CODEC_REGEXPS_=[/^vtt$/,/^wvtt/,/^stpp/];shaka.hls.HlsParser.CODEC_REGEXPS_BY_CONTENT_TYPE_={audio:shaka.hls.HlsParser.AUDIO_CODEC_REGEXPS_,video:shaka.hls.HlsParser.VIDEO_CODEC_REGEXPS_,text:shaka.hls.HlsParser.TEXT_CODEC_REGEXPS_};shaka.hls.HlsParser.AUDIO_EXTENSIONS_TO_MIME_TYPES_={mp4:\"audio/mp4\",m4s:\"audio/mp4\",m4i:\"audio/mp4\",m4a:\"audio/mp4\",ts:\"video/mp2t\"};\nshaka.hls.HlsParser.VIDEO_EXTENSIONS_TO_MIME_TYPES_={mp4:\"video/mp4\",m4s:\"video/mp4\",m4i:\"video/mp4\",m4v:\"video/mp4\",ts:\"video/mp2t\"};shaka.hls.HlsParser.TEXT_EXTENSIONS_TO_MIME_TYPES_={mp4:\"application/mp4\",m4s:\"application/mp4\",m4i:\"application/mp4\",vtt:\"text/vtt\",ttml:\"application/ttml+xml\"};shaka.hls.HlsParser.EXTENSION_MAP_BY_CONTENT_TYPE_={audio:shaka.hls.HlsParser.AUDIO_EXTENSIONS_TO_MIME_TYPES_,video:shaka.hls.HlsParser.VIDEO_EXTENSIONS_TO_MIME_TYPES_,text:shaka.hls.HlsParser.TEXT_EXTENSIONS_TO_MIME_TYPES_};\nshaka.hls.HlsParser.widevineDrmParser_=function(a){var b=shaka.hls.HlsParser,c=b.getRequiredAttributeValue_(a,\"METHOD\");if(\"SAMPLE-AES-CENC\"!=c&&\"SAMPLE-AES-CTR\"!=c)return shaka.log.error(\"Widevine in HLS is only supported with SAMPLE-AES-CTR and SAMPLE-AES-CENC (deprecated), not\",c),null;b=b.getRequiredAttributeValue_(a,\"URI\");b=shaka.net.DataUriPlugin.parse(b);b=new Uint8Array(b.data);b=shaka.util.ManifestParserUtils.createDrmInfo(\"com.widevine.alpha\",[{initDataType:\"cenc\",initData:b}]);if(a=a.getAttributeValue(\"KEYID\"))goog.asserts.assert(\"0x\"==\na.substr(0,2),\"Incorrect KEYID format!\"),b.keyIds=[a.substr(2).toLowerCase()];return b};\nshaka.hls.HlsParser.prototype.onUpdate_=function(){goog.asserts.assert(this.updateTimer_,\"Should only be called by timer\");goog.asserts.assert(null!=this.updatePeriod_,\"There should be an update period\");shaka.log.info(\"Updating manifest...\");this.playerInterface_&&(this.updateTimer_=null,this.update().then(function(){this.setUpdateTimer_(this.updatePeriod_)}.bind(this))[\"catch\"](function(a){goog.asserts.assert(a instanceof shaka.util.Error,\"Should only receive a Shaka error\");this.playerInterface_&&\n(a.severity=shaka.util.Error.Severity.RECOVERABLE,this.playerInterface_.onError(a),this.setUpdateTimer_(0))}.bind(this)))};shaka.hls.HlsParser.prototype.setUpdateTimer_=function(a){if(null!=this.updatePeriod_&&null!=a){goog.asserts.assert(null==this.updateTimer_,\"Timer should not be already set\");var b=this.onUpdate_.bind(this);this.updateTimer_=window.setTimeout(b,1E3*a)}};shaka.hls.HlsParser.prototype.isLive_=function(){return this.presentationType_!=shaka.hls.HlsParser.PresentationType_.VOD};\nshaka.hls.HlsParser.prototype.setPresentationType_=function(a){this.presentationType_=a;this.presentationTimeline_&&this.presentationTimeline_.setStatic(!this.isLive_());this.isLive_()||null==this.updateTimer_||(window.clearTimeout(this.updateTimer_),this.updatePeriod_=this.updateTimer_=null)};shaka.hls.HlsParser.KEYFORMATS_TO_DRM_PARSERS_={\"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed\":shaka.hls.HlsParser.widevineDrmParser_};shaka.hls.HlsParser.PresentationType_={VOD:\"VOD\",EVENT:\"EVENT\",LIVE:\"LIVE\"};\nshaka.hls.HlsParser.TS_TIMESCALE_=9E4;shaka.hls.HlsParser.TS_ROLLOVER_=8589934592;shaka.hls.HlsParser.PARTIAL_SEGMENT_SIZE_=2048;shaka.media.ManifestParser.registerParserByExtension(\"m3u8\",shaka.hls.HlsParser);shaka.media.ManifestParser.registerParserByMime(\"application/x-mpegurl\",shaka.hls.HlsParser);shaka.media.ManifestParser.registerParserByMime(\"application/vnd.apple.mpegurl\",shaka.hls.HlsParser);shaka.media.GapJumpingController=function(a,b,c,d){this.video_=a;this.manifest_=b;this.config_=c;this.onEvent_=d;this.eventManager_=new shaka.util.EventManager;this.gapJumpTimer_=null;this.seekingEventReceived_=!1;this.prevReadyState_=a.readyState;this.didFireLargeGap_=!1;this.stallPlayheadTime_=this.stallWallTime_=-1;this.hadSegmentAppended_=this.stallCorrected_=!1;b=this.onPollGapJump_.bind(this);this.eventManager_.listen(a,\"waiting\",b);this.gapJumpTimer_=new shaka.util.Timer(b);this.gapJumpTimer_.scheduleRepeated(.25)};\nshaka.media.GapJumpingController.BROWSER_GAP_TOLERANCE=.001;shaka.media.GapJumpingController.prototype.destroy=function(){var a=this.eventManager_.destroy();this.onEvent_=this.manifest_=this.video_=this.eventManager_=null;null!=this.gapJumpTimer_&&(this.gapJumpTimer_.cancel(),this.gapJumpTimer_=null);return a};shaka.media.GapJumpingController.prototype.onSegmentAppended=function(){this.hadSegmentAppended_=!0;this.onPollGapJump_()};\nshaka.media.GapJumpingController.prototype.onSeeking=function(){this.seekingEventReceived_=!0;this.didFireLargeGap_=this.hadSegmentAppended_=!1};\nshaka.media.GapJumpingController.prototype.onPollGapJump_=function(){if(0!=this.video_.readyState){if(this.video_.seeking){if(!this.seekingEventReceived_)return}else this.seekingEventReceived_=!1;if(!this.video_.paused){this.video_.readyState!=this.prevReadyState_&&(this.didFireLargeGap_=!1,this.prevReadyState_=this.video_.readyState);var a=this.config_.smallGapLimit,b=this.video_.currentTime,c=this.video_.buffered,d=shaka.media.TimeRangesUtils.getGapIndex(c,b);if(null==d)this.handleStall_();else if(0!=\nd||this.hadSegmentAppended_){var e=c.start(d),f=this.manifest_.presentationTimeline.getSeekRangeEnd();if(!(e>=f)){f=e-b;a=f<=a;var g=!1;if(!(f<shaka.media.GapJumpingController.BROWSER_GAP_TOLERANCE)){if(!a&&!this.didFireLargeGap_){this.didFireLargeGap_=!0;var h=new shaka.util.FakeEvent(\"largegap\",{currentTime:b,gapSize:f});h.cancelable=!0;this.onEvent_(h);this.config_.jumpLargeGaps&&!h.defaultPrevented?g=!0:shaka.log.info(\"Ignoring large gap at\",b)}if(a||g)0==d?shaka.log.info(\"Jumping forward\",f,\n\"seconds because of gap before start time of\",e):shaka.log.info(\"Jumping forward\",f,\"seconds because of gap starting at\",c.end(d-1),\"and ending at\",e),this.video_.currentTime=e}}}}}};\nshaka.media.GapJumpingController.prototype.handleStall_=function(){var a=this.video_.currentTime,b=this.video_.buffered;if(3>this.video_.readyState&&0<this.video_.playbackRate)if(this.stallPlayheadTime_!=a)this.stallPlayheadTime_=a,this.stallWallTime_=Date.now(),this.stallCorrected_=!1;else if(!this.stallCorrected_&&this.stallWallTime_<Date.now()-1E3)for(var c=0;c<b.length;c++)if(a>=b.start(c)&&a<b.end(c)-.5){shaka.log.debug(\"Flushing media pipeline due to stall inside buffered range\");this.video_.currentTime+=\n.1;this.stallPlayheadTime_=this.video_.currentTime;this.stallCorrected_=!0;break}};shaka.media.VideoWrapper=function(a,b,c){this.video_=a;this.onSeek_=b;this.startTime_=c;this.eventManager_=new shaka.util.EventManager;this.playbackRate_=1;this.buffering_=!1;this.trickPlayTimer_=null;this.earlySeekTimer_=new shaka.util.Timer(this.onEarlySeek_.bind(this));if(0<a.readyState)this.onLoadedMetadata_();else this.eventManager_.listenOnce(a,\"loadedmetadata\",this.onLoadedMetadata_.bind(this)),this.eventManager_.listen(a,\"timeupdate\",function(){this.earlySeekTimer_.schedule(.1)}.bind(this));\nthis.eventManager_.listen(a,\"ratechange\",this.onRateChange_.bind(this))};shaka.media.VideoWrapper.prototype.destroy=function(){var a=this.eventManager_.destroy();this.eventManager_=null;null!=this.trickPlayTimer_&&(this.trickPlayTimer_.cancel(),this.trickPlayTimer_=null);null!=this.earlySeekTimer_&&(this.earlySeekTimer_.cancel(),this.earlySeekTimer_=null);this.onSeek_=this.video_=null;return a};\nshaka.media.VideoWrapper.prototype.getTime=function(){return 0<this.video_.readyState?this.video_.currentTime:this.startTime_};shaka.media.VideoWrapper.prototype.setTime=function(a){0<this.video_.readyState?this.movePlayhead_(this.video_.currentTime,a):(this.startTime_=a,setTimeout(this.onSeek_,0))};shaka.media.VideoWrapper.prototype.getPlaybackRate=function(){return this.playbackRate_};\nshaka.media.VideoWrapper.prototype.setPlaybackRate=function(a){null!=this.trickPlayTimer_&&(this.trickPlayTimer_.cancel(),this.trickPlayTimer_=null);this.playbackRate_=a;this.video_.playbackRate=this.buffering_||0>a?0:a;if(!this.buffering_&&0>a){var b=function(){this.video_.currentTime+=a/4}.bind(this);this.trickPlayTimer_=new shaka.util.Timer(b);this.trickPlayTimer_.scheduleRepeated(.25)}};shaka.media.VideoWrapper.prototype.setBuffering=function(a){a!=this.buffering_&&(this.buffering_=a,this.setPlaybackRate(this.playbackRate_))};\nshaka.media.VideoWrapper.prototype.onRateChange_=function(){var a=this.buffering_||0>this.playbackRate_?0:this.playbackRate_;this.video_.playbackRate&&this.video_.playbackRate!=a&&(shaka.log.debug(\"Video playback rate changed to\",this.video_.playbackRate),this.setPlaybackRate(this.video_.playbackRate))};\nshaka.media.VideoWrapper.prototype.onLoadedMetadata_=function(){this.eventManager_.unlisten(this.video_,\"timeupdate\");this.earlySeekTimer_.cancel();if(.001>Math.abs(this.video_.currentTime-this.startTime_))this.onSeekingToStartTime_();else this.eventManager_.listenOnce(this.video_,\"seeking\",this.onSeekingToStartTime_.bind(this)),this.video_.currentTime=this.startTime_};\nshaka.media.VideoWrapper.prototype.onSeekingToStartTime_=function(){goog.asserts.assert(0<this.video_.readyState,\"readyState should be greater than 0\");this.eventManager_.listen(this.video_,\"seeking\",this.onSeek_.bind(this))};shaka.media.VideoWrapper.prototype.onEarlySeek_=function(){goog.asserts.assert(0==this.video_.readyState,\"readyState should be 0 for early seeking\");this.startTime_=this.video_.currentTime;this.onSeek_()};\nshaka.media.VideoWrapper.prototype.movePlayhead_=function(a,b){shaka.log.debug(\"Moving playhead...\",\"currentTime=\"+a,\"targetTime=\"+b);this.video_.currentTime=b;var c=0,d=function(){!this.video_||10<=c++||this.video_.currentTime!=a||(this.video_.currentTime=b,setTimeout(d,100))}.bind(this);setTimeout(d,100)};shaka.media.Playhead=function(a,b,c,d,e,f){this.video_=a;this.manifest_=b;this.config_=c;this.onSeek_=e;this.checkWindowTimer_=null;this.gapController_=new shaka.media.GapJumpingController(a,b,c,f);this.videoWrapper_=new shaka.media.VideoWrapper(a,this.onSeeking_.bind(this),this.getStartTime_(d));a=this.onPollWindow_.bind(this);this.checkWindowTimer_=new shaka.util.Timer(a);this.checkWindowTimer_.scheduleRepeated(.25)};\nshaka.media.Playhead.prototype.destroy=function(){var a=Promise.all([this.videoWrapper_.destroy(),this.gapController_.destroy()]);this.gapController_=this.videoWrapper_=null;null!=this.checkWindowTimer_&&(this.checkWindowTimer_.cancel(),this.checkWindowTimer_=null);this.onSeek_=this.config_=this.manifest_=this.video_=null;return a};shaka.media.Playhead.prototype.setStartTime=function(a){this.videoWrapper_.setTime(a)};\nshaka.media.Playhead.prototype.getTime=function(){var a=this.videoWrapper_.getTime();0<this.video_.readyState&&(this.video_.paused||(a=this.clampTime_(a)));return a};shaka.media.Playhead.prototype.getStartTime_=function(a){null==a&&(a=this.manifest_.presentationTimeline,a=Infinity>a.getDuration()?a.getSeekRangeStart():a.getSeekRangeEnd());return this.clampSeekToDuration_(this.clampTime_(a))};shaka.media.Playhead.prototype.setBuffering=function(a){this.videoWrapper_.setBuffering(a)};\nshaka.media.Playhead.prototype.getPlaybackRate=function(){return this.videoWrapper_.getPlaybackRate()};shaka.media.Playhead.prototype.setPlaybackRate=function(a){this.videoWrapper_.setPlaybackRate(a)};shaka.media.Playhead.prototype.onSegmentAppended=function(){this.gapController_.onSegmentAppended()};\nshaka.media.Playhead.prototype.onPollWindow_=function(){if(0!=this.video_.readyState&&!this.video_.seeking&&!this.video_.paused){var a=this.video_.currentTime,b=this.manifest_.presentationTimeline.getSeekRangeStart();a<b&&(b=this.reposition_(a),shaka.log.info(\"Jumping forward \"+(b-a)+\" seconds to catch up with the seek range.\"),this.video_.currentTime=b)}};\nshaka.media.Playhead.prototype.onSeeking_=function(){this.gapController_.onSeeking();var a=this.videoWrapper_.getTime(),b=this.reposition_(a);Math.abs(b-a)>shaka.media.GapJumpingController.BROWSER_GAP_TOLERANCE?this.videoWrapper_.setTime(b):(shaka.log.v1(\"Seek to \"+a),this.onSeek_())};\nshaka.media.Playhead.prototype.clampSeekToDuration_=function(a){var b=this.manifest_.presentationTimeline.getDuration();return a>=b?(goog.asserts.assert(0<=this.config_.durationBackoff,\"Duration backoff must be non-negative!\"),b-this.config_.durationBackoff):a};\nshaka.media.Playhead.prototype.reposition_=function(a){goog.asserts.assert(this.manifest_&&this.config_,\"Must not be destroyed\");var b=shaka.media.TimeRangesUtils.isBuffered.bind(null,this.video_.buffered),c=shaka.util.StreamUtils.getRebufferingGoal(this.manifest_,this.config_,1),d=this.manifest_.presentationTimeline,e=d.getSafeSeekRangeStart(0),f=d.getSeekRangeEnd(),g=d.getDuration(),h=d.getSafeSeekRangeStart(c),k=d.getSafeSeekRangeStart(5);c=d.getSafeSeekRangeStart(c+5);if(a>=g)return shaka.log.v1(\"Playhead past duration.\"),\nthis.clampSeekToDuration_(a);if(a>f)return shaka.log.v1(\"Playhead past end.\"),f;if(a<e){if(b(k))return shaka.log.v1(\"Playhead before start & start is buffered\"),k;shaka.log.v1(\"Playhead before start & start is unbuffered\");return c}if(a>=h||b(a))return shaka.log.v1(\"Playhead in safe region or in buffered region.\"),a;shaka.log.v1(\"Playhead outside safe region & in unbuffered region.\");return c};\nshaka.media.Playhead.prototype.clampTime_=function(a){var b=this.manifest_.presentationTimeline.getSeekRangeStart();if(a<b)return b;b=this.manifest_.presentationTimeline.getSeekRangeEnd();return a>b?b:a};shaka.media.PlayheadObserver=function(a,b,c,d,e,f,g){this.video_=a;this.mediaSource_=b;this.manifest_=c;this.config_=d;this.onBuffering_=e;this.onEvent_=f;this.onChangePeriod_=g;this.timelineRegions_=[];this.eventManager_=new shaka.util.EventManager;this.buffering_=!1;this.curPeriodIndex_=-1;this.watchdogTimer_=null;this.startWatchdogTimer_()};shaka.media.PlayheadObserver.UNDERFLOW_THRESHOLD_=.5;shaka.media.PlayheadObserver.RegionLocation_={FUTURE_REGION:1,INSIDE:2,PAST_REGION:3};\nshaka.media.PlayheadObserver.prototype.destroy=function(){var a=this.eventManager_?this.eventManager_.destroy():Promise.resolve();this.eventManager_=null;this.cancelWatchdogTimer_();this.onChangePeriod_=this.onEvent_=this.onBuffering_=this.config_=this.manifest_=this.mediaSource_=this.video_=null;this.timelineRegions_=[];return a};shaka.media.PlayheadObserver.prototype.seeked=function(){this.timelineRegions_.forEach(this.updateTimelineRegion_.bind(this,!0))};\nshaka.media.PlayheadObserver.prototype.addTimelineRegion=function(a){if(!this.timelineRegions_.some(function(b){return b.info.schemeIdUri==a.schemeIdUri&&b.info.startTime==a.startTime&&b.info.endTime==a.endTime})){var b={info:a,status:shaka.media.PlayheadObserver.RegionLocation_.FUTURE_REGION};this.timelineRegions_.push(b);var c=shaka.media.PlayheadObserver.cloneTimelineInfo_;c=new shaka.util.FakeEvent(\"timelineregionadded\",{detail:c(a)});this.onEvent_(c);this.updateTimelineRegion_(!0,b)}};\nshaka.media.PlayheadObserver.cloneTimelineInfo_=function(a){var b=shaka.util.ConfigUtils.cloneObject(a);b.eventElement=a.eventElement;return b};\nshaka.media.PlayheadObserver.prototype.updateTimelineRegion_=function(a,b){var c=shaka.media.PlayheadObserver.RegionLocation_,d=shaka.media.PlayheadObserver.cloneTimelineInfo_,e=b.info.startTime>this.video_.currentTime?c.FUTURE_REGION:b.info.endTime<this.video_.currentTime?c.PAST_REGION:c.INSIDE,f=b.status==c.INSIDE;c=e==c.INSIDE;if(e!=b.status){if(!a||f||c){if(!f)this.onEvent_(new shaka.util.FakeEvent(\"timelineregionenter\",{detail:d(b.info)}));if(!c)this.onEvent_(new shaka.util.FakeEvent(\"timelineregionexit\",\n{detail:d(b.info)}))}b.status=e}};shaka.media.PlayheadObserver.prototype.startWatchdogTimer_=function(){this.cancelWatchdogTimer_();this.watchdogTimer_=window.setTimeout(this.onWatchdogTimer_.bind(this),250)};shaka.media.PlayheadObserver.prototype.cancelWatchdogTimer_=function(){this.watchdogTimer_&&(window.clearTimeout(this.watchdogTimer_),this.watchdogTimer_=null)};\nshaka.media.PlayheadObserver.prototype.onWatchdogTimer_=function(){this.watchdogTimer_=null;this.startWatchdogTimer_();goog.asserts.assert(this.manifest_&&this.config_,\"Must not be destroyed\");var a=shaka.util.StreamUtils.findPeriodContainingTime(this.manifest_,this.video_.currentTime);if(a!=this.curPeriodIndex_){if(-1!=this.curPeriodIndex_)this.onChangePeriod_();this.curPeriodIndex_=a}a=shaka.media.TimeRangesUtils.bufferedAheadOf(this.video_.buffered,this.video_.currentTime);var b=shaka.media.TimeRangesUtils.bufferEnd(this.video_.buffered),\nc=shaka.media.PlayheadObserver.UNDERFLOW_THRESHOLD_,d=this.manifest_.presentationTimeline,e=d.getSegmentAvailabilityEnd();b=d.isLive()&&b>=e;d=\"ended\"==this.mediaSource_.readyState;b=b||this.video_.ended||d;this.buffering_?(c=shaka.util.StreamUtils.getRebufferingGoal(this.manifest_,this.config_,1),(b||a>=c)&&this.setBuffering_(!1)):!b&&a<c&&this.setBuffering_(!0);this.timelineRegions_.forEach(this.updateTimelineRegion_.bind(this,!1))};\nshaka.media.PlayheadObserver.prototype.setBuffering_=function(a){a!=this.buffering_&&(this.buffering_=a,this.onBuffering_(a))};shaka.media.StreamingEngine=function(a,b){this.playerInterface_=b;this.manifest_=a;this.config_=null;this.bufferingGoalScale_=1;this.setupPeriodPromise_=Promise.resolve();this.canSwitchPeriod_=[];this.canSwitchStream_={};this.mediaStates_={};this.startupComplete_=!1;this.failureCallbackBackoff_=null;this.unloadingTextStream_=this.destroyed_=this.fatalError_=!1;this.textStreamSequenceId_=0};shaka.media.StreamingEngine.APPEND_WINDOW_START_FUDGE_=.1;\nshaka.media.StreamingEngine.prototype.destroy=function(){for(var a in this.mediaStates_)this.cancelUpdate_(this.mediaStates_[a]);this.config_=this.mediaStates_=this.canSwitchStream_=this.canSwitchPeriod_=this.setupPeriodPromise_=this.manifest_=this.playerInterface_=null;this.destroyed_=!0;return Promise.resolve()};\nshaka.media.StreamingEngine.prototype.configure=function(a){this.config_=a;this.failureCallbackBackoff_=new shaka.net.Backoff({maxAttempts:Math.max(a.retryParameters.maxAttempts,2),baseDelay:a.retryParameters.baseDelay,backoffFactor:a.retryParameters.backoffFactor,fuzzFactor:a.retryParameters.fuzzFactor,timeout:0},!0)};\nshaka.media.StreamingEngine.prototype.init=function(){goog.asserts.assert(this.config_,\"StreamingEngine configure() must be called before init()!\");var a=this.playerInterface_.playhead.getTime();a=this.findPeriodContainingTime_(a);a=this.playerInterface_.onChooseStreams(this.manifest_.periods[a]);return a.variant||a.text?this.initStreams_(a).then(function(){shaka.log.debug(\"init: completed initial Stream setup\");this.playerInterface_&&this.playerInterface_.onInitialStreamsSetup&&(shaka.log.v1(\"init: calling onInitialStreamsSetup()...\"),\nthis.playerInterface_.onInitialStreamsSetup())}.bind(this)):(shaka.log.error(\"init: no Streams chosen\"),Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STREAMING,shaka.util.Error.Code.INVALID_STREAMS_CHOSEN)))};shaka.media.StreamingEngine.prototype.getCurrentPeriod=function(){var a=this.playerInterface_.playhead.getTime();a=this.findPeriodContainingTime_(a);return this.manifest_.periods[a]};\nshaka.media.StreamingEngine.prototype.getActivePeriod=function(){goog.asserts.assert(this.mediaStates_,\"Must be initialized\");var a=shaka.util.ManifestParserUtils.ContentType;return(a=this.mediaStates_[a.VIDEO]||this.mediaStates_[a.AUDIO])?this.manifest_.periods[a.needPeriodIndex]:null};shaka.media.StreamingEngine.prototype.getActiveAudio=function(){return this.getStream_(shaka.util.ManifestParserUtils.ContentType.AUDIO)};shaka.media.StreamingEngine.prototype.getActiveVideo=function(){return this.getStream_(shaka.util.ManifestParserUtils.ContentType.VIDEO)};\nshaka.media.StreamingEngine.prototype.getActiveText=function(){return this.getStream_(shaka.util.ManifestParserUtils.ContentType.TEXT)};shaka.media.StreamingEngine.prototype.getStream_=function(a){goog.asserts.assert(this.mediaStates_,\"Must be initialized\");return(a=this.mediaStates_[a])?a.restoreStreamAfterTrickPlay||a.stream:null};\nshaka.media.StreamingEngine.prototype.loadNewTextStream=function(a){var b=shaka.util.ManifestParserUtils.ContentType;this.playerInterface_.mediaSourceEngine.clear(b.TEXT);this.textStreamSequenceId_++;this.unloadingTextStream_=!1;var c=this.textStreamSequenceId_;this.playerInterface_.mediaSourceEngine.init({text:a});return this.setupStreams_([a]).then(function(){if(this.textStreamSequenceId_==c&&!this.mediaStates_[b.TEXT]&&!this.unloadingTextStream_){var d=this.playerInterface_.playhead.getTime();\nd=this.findPeriodContainingTime_(d);this.mediaStates_[b.TEXT]=this.createMediaState_(a,d);this.scheduleUpdate_(this.mediaStates_[b.TEXT],0)}}.bind(this))};shaka.media.StreamingEngine.prototype.unloadTextStream=function(){var a=shaka.util.ManifestParserUtils.ContentType;this.unloadingTextStream_=!0;this.mediaStates_[a.TEXT]&&(this.cancelUpdate_(this.mediaStates_[a.TEXT]),delete this.mediaStates_[a.TEXT])};\nshaka.media.StreamingEngine.prototype.setTrickPlay=function(a){var b=this.mediaStates_[shaka.util.ManifestParserUtils.ContentType.VIDEO];if(b){var c=b.stream;if(c)if(shaka.log.debug(\"setTrickPlay\",a),a){if(a=c.trickModeVideo){var d=b.restoreStreamAfterTrickPlay;d||(shaka.log.debug(\"Engaging trick mode stream\",a),this.switchInternal_(a,!1),b.restoreStreamAfterTrickPlay=c)}}else if(d=b.restoreStreamAfterTrickPlay)shaka.log.debug(\"Restoring non-trick-mode stream\",d),b.restoreStreamAfterTrickPlay=null,\nthis.switchInternal_(d,!0)}};shaka.media.StreamingEngine.prototype.switchVariant=function(a,b){a.video&&this.switchInternal_(a.video,b);a.audio&&this.switchInternal_(a.audio,b)};shaka.media.StreamingEngine.prototype.switchTextStream=function(a){goog.asserts.assert(a&&\"text\"==a.type,\"Wrong stream type passed to switchTextStream!\");this.switchInternal_(a,!0)};\nshaka.media.StreamingEngine.prototype.switchInternal_=function(a,b){var c=shaka.util.ManifestParserUtils.ContentType,d=this.mediaStates_[a.type];if(!d&&a.type==c.TEXT&&this.config_.ignoreTextStreamFailures)this.loadNewTextStream(a);else if(goog.asserts.assert(d,\"switch: expected mediaState to exist\"),d){var e=this.findPeriodContainingStream_(a);if(b&&e!=d.needPeriodIndex)shaka.log.debug(\"switch: switching to stream in another Period; clearing buffer and changing Periods\"),this.clearAllBuffers_();\nelse{d.restoreStreamAfterTrickPlay&&(shaka.log.debug(\"switch during trick play mode\",a),a.trickModeVideo?(d.restoreStreamAfterTrickPlay=a,a=a.trickModeVideo,shaka.log.debug(\"switch found trick play stream\",a)):(d.restoreStreamAfterTrickPlay=null,shaka.log.debug(\"switch found no special trick play stream\")));var f=this.canSwitchPeriod_[e];goog.asserts.assert(f&&f.resolved,\"switch: expected Period \"+e+\" to be ready\");f&&f.resolved&&(f=this.canSwitchStream_[a.id],goog.asserts.assert(f&&f.resolved,\"switch: expected Stream \"+\na.id+\" to be ready\"),f&&f.resolved&&(d.stream==a?(c=shaka.media.StreamingEngine.logPrefix_(d),shaka.log.debug(\"switch: Stream \"+c+\" already active\")):(a.type==c.TEXT&&(c=shaka.util.MimeUtils.getFullType(a.mimeType,a.codecs),this.playerInterface_.mediaSourceEngine.reinitText(c)),d.stream=a,d.needInitSegment=!0,c=shaka.media.StreamingEngine.logPrefix_(d),shaka.log.debug(\"switch: switching to Stream \"+c),b&&(d.clearingBuffer?d.waitingToFlushBuffer=!0:d.performingUpdate?(d.waitingToClearBuffer=!0,d.waitingToFlushBuffer=\n!0):(this.cancelUpdate_(d),this.clearBuffer_(d,!0))))))}}};shaka.media.StreamingEngine.prototype.seeked=function(){goog.asserts.assert(this.mediaStates_,\"Must not be destroyed\");var a=this.playerInterface_.playhead.getTime();Object.keys(this.mediaStates_).every(function(b){return this.playerInterface_.mediaSourceEngine.isBuffered(b,a)}.bind(this))?shaka.log.debug(\"(all): seeked: buffered seek: playheadTime=\"+a):(shaka.log.debug(\"(all): seeked: unbuffered seek: clearing all buffers\"),this.clearAllBuffers_())};\nshaka.media.StreamingEngine.prototype.clearAllBuffers_=function(){for(var a in this.mediaStates_){var b=this.mediaStates_[a],c=shaka.media.StreamingEngine.logPrefix_(b);b.clearingBuffer?shaka.log.debug(c,\"clear: already clearing the buffer\"):b.waitingToClearBuffer?shaka.log.debug(c,\"clear: already waiting\"):b.performingUpdate?(shaka.log.debug(c,\"clear: currently updating\"),b.waitingToClearBuffer=!0):null==this.playerInterface_.mediaSourceEngine.bufferStart(a)?(shaka.log.debug(c,\"clear: nothing buffered\"),\nnull==b.updateTimer&&this.scheduleUpdate_(b,0)):(shaka.log.debug(c,\"clear: handling right now\"),this.cancelUpdate_(b),this.clearBuffer_(b,!1))}};\nshaka.media.StreamingEngine.prototype.initStreams_=function(a,b){goog.asserts.assert(this.config_,\"StreamingEngine configure() must be called before init()!\");var c=this.playerInterface_.playhead.getTime(),d=this.findPeriodContainingTime_(c);c=shaka.util.ManifestParserUtils.ContentType;var e={},f=[];a.variant&&a.variant.audio&&(e[c.AUDIO]=a.variant.audio,f.push(a.variant.audio));a.variant&&a.variant.video&&(e[c.VIDEO]=a.variant.video,f.push(a.variant.video));a.text&&(e[c.TEXT]=a.text,f.push(a.text));\nthis.playerInterface_.mediaSourceEngine.init(e);this.setDuration_();return this.setupStreams_(f).then(function(){if(!this.destroyed_)for(var a in e){var c=e[a];this.mediaStates_[a]||(this.mediaStates_[a]=this.createMediaState_(c,d,b),this.scheduleUpdate_(this.mediaStates_[a],0))}}.bind(this))};\nshaka.media.StreamingEngine.prototype.createMediaState_=function(a,b,c){return{stream:a,type:a.type,lastStream:null,lastSegmentReference:null,restoreStreamAfterTrickPlay:null,needInitSegment:!0,needPeriodIndex:b,endOfStream:!1,performingUpdate:!1,updateTimer:null,waitingToClearBuffer:!1,waitingToFlushBuffer:!1,clearingBuffer:!1,recovering:!1,hasError:!1,resumeAt:c||0}};\nshaka.media.StreamingEngine.prototype.setupPeriod_=function(a){var b=shaka.util.Functional,c=this.canSwitchPeriod_[a];if(c)return shaka.log.debug(\"(all) Period \"+a+\" is being or has been set up\"),goog.asserts.assert(c.promise,\"promise must not be null\"),c.promise;shaka.log.debug(\"(all) setting up Period \"+a);c={promise:new shaka.util.PublicPromise,resolved:!1};this.canSwitchPeriod_[a]=c;var d=this.manifest_.periods[a].variants.map(function(a){var b=[];a.audio&&b.push(a.audio);a.video&&b.push(a.video);\na.video&&a.video.trickModeVideo&&b.push(a.video.trickModeVideo);return b}).reduce(b.collapseArrays,[]).filter(b.isNotDuplicate);d.push.apply(d,this.manifest_.periods[a].textStreams);this.setupPeriodPromise_=this.setupPeriodPromise_.then(function(){if(!this.destroyed_)return this.setupStreams_(d)}.bind(this)).then(function(){this.destroyed_||(this.canSwitchPeriod_[a].promise.resolve(),this.canSwitchPeriod_[a].resolved=!0,shaka.log.v1(\"(all) setup Period \"+a))}.bind(this))[\"catch\"](function(b){this.destroyed_||\n(this.canSwitchPeriod_[a].promise.reject(),delete this.canSwitchPeriod_[a],shaka.log.warning(\"(all) failed to setup Period \"+a),this.playerInterface_.onError(b))}.bind(this));return c.promise};\nshaka.media.StreamingEngine.prototype.setupStreams_=function(a){var b=a.map(function(a){return a.id}).filter(shaka.util.Functional.isNotDuplicate);goog.asserts.assert(b.length==a.length,\"streams should have unique ids\");b=[];for(var c=0;c<a.length;++c){var d=a[c],e=this.canSwitchStream_[d.id];e?(shaka.log.debug(\"(all) Stream \"+d.id+\" is being or has been set up\"),b.push(e.promise)):(shaka.log.v1(\"(all) setting up Stream \"+d.id),this.canSwitchStream_[d.id]={promise:new shaka.util.PublicPromise,resolved:!1},\nb.push(d.createSegmentIndex()))}return Promise.all(b).then(function(){if(!this.destroyed_)for(var b=0;b<a.length;++b){var c=a[b],d=this.canSwitchStream_[c.id];d.resolved||(d.promise.resolve(),d.resolved=!0,shaka.log.v1(\"(all) setup Stream \"+c.id))}}.bind(this))[\"catch\"](function(b){if(!this.destroyed_){for(var c=0;c<a.length;c++)this.canSwitchStream_[a[c].id].promise.reject(),delete this.canSwitchStream_[a[c].id];return Promise.reject(b)}}.bind(this))};\nshaka.media.StreamingEngine.prototype.setDuration_=function(){var a=this.manifest_.presentationTimeline.getDuration();Infinity>a?this.playerInterface_.mediaSourceEngine.setDuration(a):this.playerInterface_.mediaSourceEngine.setDuration(Math.pow(2,32))};\nshaka.media.StreamingEngine.prototype.onUpdate_=function(a){var b=shaka.util.MapUtils;if(!this.destroyed_){var c=shaka.media.StreamingEngine.logPrefix_(a);goog.asserts.assert(!a.performingUpdate&&null!=a.updateTimer,c+\" unexpected call to onUpdate_()\");if(!a.performingUpdate&&null!=a.updateTimer&&(goog.asserts.assert(!a.clearingBuffer,c+\" onUpdate_() should not be called when clearing the buffer\"),!a.clearingBuffer))if(a.updateTimer=null,a.waitingToClearBuffer)shaka.log.debug(c,\"skipping update and clearing the buffer\"),\nthis.clearBuffer_(a,a.waitingToFlushBuffer);else{try{var d=this.update_(a);null!=d&&(this.scheduleUpdate_(a,d),a.hasError=!1)}catch(e){this.handleStreamingError_(e);return}goog.asserts.assert(this.mediaStates_,\"must not be destroyed\");b=b.values(this.mediaStates_);this.handlePeriodTransition_(a);b.every(function(a){return a.endOfStream})&&(shaka.log.v1(c,\"calling endOfStream()...\"),this.playerInterface_.mediaSourceEngine.endOfStream().then(function(){var a=this.playerInterface_.mediaSourceEngine.getDuration();\na<this.manifest_.presentationTimeline.getDuration()&&this.manifest_.presentationTimeline.setDuration(a)}.bind(this)))}}};\nshaka.media.StreamingEngine.prototype.update_=function(a){var b=shaka.media.StreamingEngine.logPrefix_(a),c=this.playerInterface_.playhead.getTime(),d=this.getTimeNeeded_(a,c);shaka.log.v2(b,\"timeNeeded=\"+d);var e=this.findPeriodContainingStream_(a.stream),f=this.findPeriodContainingTime_(d),g=this.playerInterface_.mediaSourceEngine.bufferedAheadOf(a.type,c);shaka.log.v2(b,\"update_:\",\"playheadTime=\"+c,\"bufferedAhead=\"+g);var h=this.getBufferingGoal_();if(d>=this.manifest_.presentationTimeline.getDuration())return shaka.log.debug(b,\n\"buffered to end of presentation\"),a.endOfStream=!0,null;a.endOfStream=!1;a.needPeriodIndex=f;if(f!=e)return shaka.log.debug(b,\"need Period \"+f,\"playheadTime=\"+c,\"timeNeeded=\"+d,\"currentPeriodIndex=\"+e),null;if(g>=h)return shaka.log.v2(b,\"buffering goal met\"),.5;b=this.playerInterface_.mediaSourceEngine.bufferEnd(a.type);b=this.getSegmentReferenceNeeded_(a,c,b,e);if(!b)return 1;a.resumeAt=0;this.fetchAndAppend_(a,c,e,b);return null};\nshaka.media.StreamingEngine.prototype.getBufferingGoal_=function(){goog.asserts.assert(this.manifest_,\"manifest_ should not be null\");goog.asserts.assert(this.config_,\"config_ should not be null\");var a=shaka.util.StreamUtils.getRebufferingGoal(this.manifest_,this.config_,this.bufferingGoalScale_);return Math.max(a,this.bufferingGoalScale_*this.config_.bufferingGoal)};\nshaka.media.StreamingEngine.prototype.getTimeNeeded_=function(a,b){if(!a.lastStream||!a.lastSegmentReference)return Math.max(b,a.resumeAt);var c=this.findPeriodContainingStream_(a.lastStream);return this.manifest_.periods[c].startTime+a.lastSegmentReference.endTime};\nshaka.media.StreamingEngine.prototype.getSegmentReferenceNeeded_=function(a,b,c,d){var e=shaka.media.StreamingEngine.logPrefix_(a);if(a.lastSegmentReference&&a.stream==a.lastStream)return b=a.lastSegmentReference.position+1,shaka.log.v2(e,\"next position known:\",\"position=\"+b),this.getSegmentReferenceIfAvailable_(a,d,b);a.lastSegmentReference?(goog.asserts.assert(a.lastStream,\"lastStream should not be null\"),shaka.log.v1(e,\"next position unknown: another Stream buffered\"),e=this.findPeriodContainingStream_(a.lastStream),\nb=this.lookupSegmentPosition_(a,this.manifest_.periods[e].startTime+a.lastSegmentReference.endTime,d)):(goog.asserts.assert(!a.lastStream,\"lastStream should be null\"),shaka.log.v1(e,\"next position unknown: nothing buffered\"),b=this.lookupSegmentPosition_(a,c||b,d));if(null==b)return null;e=null;null==c&&(e=this.getSegmentReferenceIfAvailable_(a,d,Math.max(0,b-1)));return e||this.getSegmentReferenceIfAvailable_(a,d,b)};\nshaka.media.StreamingEngine.prototype.lookupSegmentPosition_=function(a,b,c){var d=shaka.media.StreamingEngine.logPrefix_(a);c=this.manifest_.periods[c];shaka.log.debug(d,\"looking up segment:\",\"presentationTime=\"+b,\"currentPeriod.startTime=\"+c.startTime);b=Math.max(0,b-c.startTime);a=a.stream.findSegmentPosition(b);null==a&&shaka.log.warning(d,\"cannot find segment:\",\"currentPeriod.startTime=\"+c.startTime,\"lookupTime=\"+b);return a};\nshaka.media.StreamingEngine.prototype.getSegmentReferenceIfAvailable_=function(a,b,c){var d=shaka.media.StreamingEngine.logPrefix_(a);b=this.manifest_.periods[b];a=a.stream.getSegmentReference(c);if(!a)return shaka.log.v1(d,\"segment does not exist:\",\"currentPeriod.startTime=\"+b.startTime,\"position=\"+c),null;var e=this.manifest_.presentationTimeline;c=e.getSegmentAvailabilityStart();e=e.getSegmentAvailabilityEnd();return b.startTime+a.endTime<c||b.startTime+a.startTime>e?(shaka.log.v2(d,\"segment is not available:\",\n\"currentPeriod.startTime=\"+b.startTime,\"reference.startTime=\"+a.startTime,\"reference.endTime=\"+a.endTime,\"availabilityStart=\"+c,\"availabilityEnd=\"+e),null):a};\nshaka.media.StreamingEngine.prototype.fetchAndAppend_=function(a,b,c,d){var e=shaka.media.StreamingEngine.logPrefix_(a),f=shaka.util.ManifestParserUtils.ContentType,g=this.manifest_.periods[c];shaka.log.v1(e,\"fetchAndAppend_:\",\"playheadTime=\"+b,\"currentPeriod.startTime=\"+g.startTime,\"reference.position=\"+d.position,\"reference.startTime=\"+d.startTime,\"reference.endTime=\"+d.endTime);var h=a.stream,k=this.manifest_.presentationTimeline.getDuration(),l=this.manifest_.periods[c+1],m=Math.max(0,g.startTime-\nshaka.media.StreamingEngine.APPEND_WINDOW_START_FUDGE_);k=l?l.startTime:k;goog.asserts.assert(d.startTime<=k,e+\" segment should start before append window end\");c=this.initSourceBuffer_(a,c,m,k);a.performingUpdate=!0;a.needInitSegment=!1;shaka.log.v2(e,\"fetching segment\");m=this.fetch_(d);Promise.all([c,m]).then(function(c){if(!this.destroyed_&&!this.fatalError_)return this.append_(a,b,g,h,d,c[1])}.bind(this)).then(function(){if(!this.destroyed_&&!this.fatalError_){a.performingUpdate=!1;a.recovering=\n!1;if(!a.waitingToClearBuffer)this.playerInterface_.onSegmentAppended();this.scheduleUpdate_(a,0);this.handleStartup_(a,h);shaka.log.v1(e,\"finished fetch and append\")}}.bind(this))[\"catch\"](function(b){this.destroyed_||this.fatalError_||(goog.asserts.assert(b instanceof shaka.util.Error,\"Should only receive a Shaka error\"),a.performingUpdate=!1,a.type==f.TEXT&&this.config_.ignoreTextStreamFailures?(b.code==shaka.util.Error.Code.BAD_HTTP_STATUS?shaka.log.warning(e,\"Text stream failed to download. Proceeding without it.\"):\nshaka.log.warning(e,\"Text stream failed to parse. Proceeding without it.\"),delete this.mediaStates_[f.TEXT]):b.code==shaka.util.Error.Code.QUOTA_EXCEEDED_ERROR?this.handleQuotaExceeded_(a,b):(shaka.log.error(e,\"failed fetch and append: code=\"+b.code),a.hasError=!0,b.severity=shaka.util.Error.Severity.CRITICAL,this.handleStreamingError_(b)))}.bind(this))};\nshaka.media.StreamingEngine.prototype.retry=function(){if(this.destroyed_)return shaka.log.error(\"Unable to retry after StreamingEngine is destroyed!\"),!1;if(this.fatalError_)return shaka.log.error(\"Unable to retry after StreamingEngine encountered a fatal error!\"),!1;for(var a in this.mediaStates_){var b=this.mediaStates_[a],c=shaka.media.StreamingEngine.logPrefix_(b);b.hasError&&(shaka.log.info(c,\"Retrying after failure...\"),b.hasError=!1,this.scheduleUpdate_(b,.1))}return!0};\nshaka.media.StreamingEngine.prototype.handleQuotaExceeded_=function(a,b){var c=shaka.media.StreamingEngine.logPrefix_(a);goog.asserts.assert(this.mediaStates_,\"must not be destroyed\");if(shaka.util.MapUtils.values(this.mediaStates_).some(function(b){return b!=a&&b.recovering}))shaka.log.debug(c,\"MediaSource threw QuotaExceededError:\",\"waiting for another stream to recover...\");else{var d=Math.round(100*this.bufferingGoalScale_);if(20<d)this.bufferingGoalScale_-=.2;else if(4<d)this.bufferingGoalScale_-=\n.04;else{shaka.log.error(c,\"MediaSource threw QuotaExceededError too many times\");this.fatalError_=a.hasError=!0;this.playerInterface_.onError(b);return}shaka.log.warning(c,\"MediaSource threw QuotaExceededError:\",\"reducing buffering goals by \"+(100-Math.round(100*this.bufferingGoalScale_))+\"%\");a.recovering=!0}this.scheduleUpdate_(a,4)};\nshaka.media.StreamingEngine.prototype.initSourceBuffer_=function(a,b,c,d){if(!a.needInitSegment)return Promise.resolve();var e=shaka.media.StreamingEngine.logPrefix_(a);b=this.manifest_.periods[b].startTime-a.stream.presentationTimeOffset;shaka.log.v1(e,\"setting timestamp offset to \"+b);shaka.log.v1(e,\"setting appstart window start to \"+c);shaka.log.v1(e,\"setting append window end to \"+d);c=this.playerInterface_.mediaSourceEngine.setStreamProperties(a.type,b,c,d);if(!a.stream.initSegmentReference)return c;\nshaka.log.v1(e,\"fetching init segment\");d=this.fetch_(a.stream.initSegmentReference).then(function(b){if(!this.destroyed_)return shaka.log.v1(e,\"appending init segment\"),this.playerInterface_.mediaSourceEngine.appendBuffer(a.type,b,null,null)}.bind(this))[\"catch\"](function(b){a.needInitSegment=!0;return Promise.reject(b)});return Promise.all([c,d])};\nshaka.media.StreamingEngine.prototype.append_=function(a,b,c,d,e,f){var g=shaka.media.StreamingEngine.logPrefix_(a);d.containsEmsgBoxes&&(new shaka.util.Mp4Parser).fullBox(\"emsg\",this.parseEMSG_.bind(this,c,e)).parse(f);return this.evict_(a,b).then(function(){if(!this.destroyed_)return shaka.log.v1(g,\"appending media segment\"),this.playerInterface_.mediaSourceEngine.appendBuffer(a.type,f,e.startTime,e.endTime)}.bind(this)).then(function(){if(!this.destroyed_)return shaka.log.v2(g,\"appended media segment\"),\na.lastStream=d,a.lastSegmentReference=e,Promise.resolve()}.bind(this))};\nshaka.media.StreamingEngine.prototype.parseEMSG_=function(a,b,c){var d=c.reader.readTerminatedString(),e=c.reader.readTerminatedString(),f=c.reader.readUint32(),g=c.reader.readUint32(),h=c.reader.readUint32(),k=c.reader.readUint32(),l=c.reader.readBytes(c.reader.getLength()-c.reader.getPosition());a=a.startTime+b.startTime+g/f;if(\"urn:mpeg:dash:event:2012\"==d)this.playerInterface_.onManifestUpdate();else d=new shaka.util.FakeEvent(\"emsg\",{detail:{startTime:a,endTime:a+h/f,schemeIdUri:d,value:e,timescale:f,\npresentationTimeDelta:g,eventDuration:h,id:k,messageData:l}}),this.playerInterface_.onEvent(d);c.parser.stop()};\nshaka.media.StreamingEngine.prototype.evict_=function(a,b){var c=shaka.media.StreamingEngine.logPrefix_(a);shaka.log.v2(c,\"checking buffer length\");var d=Math.max(this.config_.bufferBehind,this.manifest_.presentationTimeline.getMaxSegmentDuration()),e=this.playerInterface_.mediaSourceEngine.bufferStart(a.type);if(null==e)return shaka.log.v2(c,\"buffer behind okay because nothing buffered:\",\"playheadTime=\"+b,\"bufferBehind=\"+d),Promise.resolve();var f=b-e,g=f-d;if(0>=g)return shaka.log.v2(c,\"buffer behind okay:\",\n\"playheadTime=\"+b,\"bufferedBehind=\"+f,\"bufferBehind=\"+d,\"underflow=\"+-g),Promise.resolve();shaka.log.v1(c,\"buffer behind too large:\",\"playheadTime=\"+b,\"bufferedBehind=\"+f,\"bufferBehind=\"+d,\"overflow=\"+g);return this.playerInterface_.mediaSourceEngine.remove(a.type,e,e+g).then(function(){this.destroyed_||shaka.log.v1(c,\"evicted \"+g+\" seconds\")}.bind(this))};\nshaka.media.StreamingEngine.prototype.handleStartup_=function(a,b){var c=shaka.util.Functional,d=shaka.util.MapUtils,e=shaka.util.ManifestParserUtils.ContentType;if(!this.startupComplete_){var f=shaka.media.StreamingEngine.logPrefix_(a);goog.asserts.assert(this.mediaStates_,\"must not be destroyed\");d=d.values(this.mediaStates_);if(this.startupComplete_=d.every(function(a){return a.type==e.TEXT?!0:!a.waitingToClearBuffer&&!a.clearingBuffer&&a.lastSegmentReference})){shaka.log.debug(f,\"startup complete\");\nvar g=this.findPeriodContainingStream_(b);goog.asserts.assert(d.every(function(a){return a.needPeriodIndex==g||a.needPeriodIndex==g+1}),f+\" expected all MediaStates to need same Period\");this.canSwitchPeriod_[g]||this.setupPeriod_(g).then(function(){shaka.log.v1(f,\"calling onCanSwitch()...\");this.playerInterface_.onCanSwitch()}.bind(this))[\"catch\"](c.noop);for(d=0;d<this.manifest_.periods.length;++d)this.setupPeriod_(d)[\"catch\"](c.noop);this.playerInterface_.onStartupComplete&&(shaka.log.v1(f,\"calling onStartupComplete()...\"),\nthis.playerInterface_.onStartupComplete())}}};\nshaka.media.StreamingEngine.prototype.handlePeriodTransition_=function(a){var b=shaka.util.Functional,c=shaka.util.MapUtils,d=shaka.media.StreamingEngine.logPrefix_(a),e=shaka.util.ManifestParserUtils.ContentType,f=this.findPeriodContainingStream_(a.stream);if(a.needPeriodIndex!=f){var g=a.needPeriodIndex;goog.asserts.assert(this.mediaStates_,\"must not be destroyed\");var h=c.values(this.mediaStates_);goog.asserts.assert(h.every(function(a){return a.needPeriodIndex==g||a.hasError||!shaka.media.StreamingEngine.isIdle_(a)}),\n\"All MediaStates should need the same Period or be performing updates.\");h.every(function(a){return a.needPeriodIndex==g})?h.every(shaka.media.StreamingEngine.isIdle_)?(shaka.log.debug(d,\"all need Period \"+g),this.setupPeriod_(g).then(function(){if(!this.destroyed_)if(h.every(function(a){var b=shaka.media.StreamingEngine.isIdle_(a),c=this.findPeriodContainingStream_(a.stream);return b&&a.needPeriodIndex==g&&c!=g}.bind(this))){var a=this.manifest_.periods[g];shaka.log.v1(d,\"calling onChooseStreams()...\");\nvar b=this.playerInterface_.onChooseStreams(a),c={};b.variant&&b.variant.video&&(c[e.VIDEO]=b.variant.video);b.variant&&b.variant.audio&&(c[e.AUDIO]=b.variant.audio);b.text&&(c[e.TEXT]=b.text);for(var f in this.mediaStates_)if(!c[f]&&f!=e.TEXT){shaka.log.error(d,\"invalid Streams chosen: missing \"+f+\" Stream\");this.playerInterface_.onError(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STREAMING,shaka.util.Error.Code.INVALID_STREAMS_CHOSEN));return}for(f in c)if(!this.mediaStates_[f])if(f==\ne.TEXT)this.initStreams_({text:c[e.TEXT]},a.startTime),delete c[f];else{shaka.log.error(d,\"invalid Streams chosen: unusable \"+f+\" Stream\");this.playerInterface_.onError(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STREAMING,shaka.util.Error.Code.INVALID_STREAMS_CHOSEN));return}for(f in this.mediaStates_)(a=c[f])?(this.switchInternal_(a,!1),this.scheduleUpdate_(this.mediaStates_[f],0)):(goog.asserts.assert(f==e.TEXT,\"Invalid streams chosen\"),delete this.mediaStates_[f]);\nshaka.log.v1(d,\"calling onCanSwitch()...\");this.playerInterface_.onCanSwitch()}else shaka.log.debug(d,\"ignoring transition to Period\",g,\"since another is happening\")}.bind(this))[\"catch\"](b.noop)):shaka.log.debug(d,\"all MediaStates need Period \"+g+\", but not all MediaStates are idle\"):shaka.log.debug(d,\"not all MediaStates need Period \"+g)}};shaka.media.StreamingEngine.isIdle_=function(a){return!a.performingUpdate&&null==a.updateTimer&&!a.waitingToClearBuffer&&!a.clearingBuffer};\nshaka.media.StreamingEngine.prototype.findPeriodContainingTime_=function(a){goog.asserts.assert(this.manifest_,\"Must not be destroyed\");return shaka.util.StreamUtils.findPeriodContainingTime(this.manifest_,a)};shaka.media.StreamingEngine.prototype.findPeriodContainingStream_=function(a){goog.asserts.assert(this.manifest_,\"Must not be destroyed\");return shaka.util.StreamUtils.findPeriodContainingStream(this.manifest_,a)};\nshaka.media.StreamingEngine.prototype.fetch_=function(a){var b=shaka.net.NetworkingEngine.RequestType.SEGMENT,c=shaka.net.NetworkingEngine.makeRequest(a.getUris(),this.config_.retryParameters);if(0!=a.startByte||null!=a.endByte){var d=\"bytes=\"+a.startByte+\"-\";null!=a.endByte&&(d+=a.endByte);c.headers.Range=d}shaka.log.v2(\"fetching: reference=\"+a);return this.playerInterface_.netEngine.request(b,c).then(function(a){return a.data})};\nshaka.media.StreamingEngine.prototype.clearBuffer_=function(a,b){var c=shaka.media.StreamingEngine.logPrefix_(a);goog.asserts.assert(!a.performingUpdate&&null==a.updateTimer,c+\" unexpected call to clearBuffer_()\");a.waitingToClearBuffer=!1;a.waitingToFlushBuffer=!1;a.clearingBuffer=!0;shaka.log.debug(c,\"clearing buffer\");this.playerInterface_.mediaSourceEngine.clear(a.type).then(function(){if(!this.destroyed_&&b)return this.playerInterface_.mediaSourceEngine.flush(a.type)}.bind(this)).then(function(){this.destroyed_||\n(shaka.log.debug(c,\"cleared buffer\"),a.lastStream=null,a.lastSegmentReference=null,a.clearingBuffer=!1,a.endOfStream=!1,this.scheduleUpdate_(a,0))}.bind(this))};shaka.media.StreamingEngine.prototype.scheduleUpdate_=function(a,b){var c=shaka.media.StreamingEngine.logPrefix_(a);shaka.log.v2(c,\"updating in \"+b+\" seconds\");goog.asserts.assert(null==a.updateTimer,c+\" did not expect update to be scheduled\");a.updateTimer=window.setTimeout(this.onUpdate_.bind(this,a),1E3*b)};\nshaka.media.StreamingEngine.prototype.cancelUpdate_=function(a){null!=a.updateTimer&&(window.clearTimeout(a.updateTimer),a.updateTimer=null)};shaka.media.StreamingEngine.prototype.handleStreamingError_=function(a){this.failureCallbackBackoff_.attempt().then(function(){this.playerInterface_.onError(a);a.handled||this.config_.failureCallback(a)}.bind(this))};shaka.media.StreamingEngine.logPrefix_=function(a){return\"(\"+a.type+\":\"+a.stream.id+\")\"};shaka.net.HttpPlugin=function(a,b){return new Promise(function(c,d){var e=new shaka.net.HttpPlugin.xhr_;e.open(b.method,a,!0);e.responseType=\"arraybuffer\";e.timeout=b.retryParameters.timeout;e.withCredentials=b.allowCrossSiteCredentials;e.onload=function(b){b=b.target;goog.asserts.assert(b,\"XHR onload has no target!\");var e=b.getAllResponseHeaders().trim().split(\"\\r\\n\").reduce(function(a,b){var c=b.split(\": \");a[c[0].toLowerCase()]=c.slice(1).join(\": \");return a},{});if(200<=b.status&&299>=b.status&&\n202!=b.status)b.responseURL&&(a=b.responseURL),c({uri:a,data:b.response,headers:e,fromCache:!!e[\"x-shaka-from-cache\"]});else{var f=null;try{f=shaka.util.StringUtils.fromBytesAutoDetect(b.response)}catch(l){}shaka.log.debug(\"HTTP error text:\",f);d(new shaka.util.Error(401==b.status||403==b.status?shaka.util.Error.Severity.CRITICAL:shaka.util.Error.Severity.RECOVERABLE,shaka.util.Error.Category.NETWORK,shaka.util.Error.Code.BAD_HTTP_STATUS,a,b.status,f,e))}};e.onerror=function(b){d(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE,\nshaka.util.Error.Category.NETWORK,shaka.util.Error.Code.HTTP_ERROR,a))};e.ontimeout=function(b){d(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE,shaka.util.Error.Category.NETWORK,shaka.util.Error.Code.TIMEOUT,a))};for(var f in b.headers)e.setRequestHeader(f,b.headers[f]);e.send(b.body)})};goog.exportSymbol(\"shaka.net.HttpPlugin\",shaka.net.HttpPlugin);shaka.net.HttpPlugin.xhr_=window.XMLHttpRequest;shaka.net.NetworkingEngine.registerScheme(\"http\",shaka.net.HttpPlugin,shaka.net.NetworkingEngine.PluginPriority.FALLBACK);\nshaka.net.NetworkingEngine.registerScheme(\"https\",shaka.net.HttpPlugin,shaka.net.NetworkingEngine.PluginPriority.FALLBACK);shaka.offline={};shaka.offline.IStorageEngine=function(){};shaka.offline.DBEngine=function(a){goog.asserts.assert(shaka.offline.DBEngine.isSupported(),\"DBEngine should not be called when DBEngine is not supported\");this.name_=a;this.db_=null;this.operations_=[]};shaka.offline.DBEngine.Store={MANIFEST:\"manifest-v3\",SEGMENT:\"segment-v3\"};shaka.offline.DBEngine.Mode={READ_ONLY:\"readonly\",READ_WRITE:\"readwrite\"};shaka.offline.DBEngine.DB_VERSION_=3;shaka.offline.DBEngine.isSupported=function(){return null!=window.indexedDB};\nshaka.offline.DBEngine.deleteDatabase=function(a){if(!window.indexedDB)return Promise.resolve();a=window.indexedDB.deleteDatabase(a);var b=new shaka.util.PublicPromise;a.onsuccess=function(a){goog.asserts.assert(null==a.newVersion,\"Unexpected database update\");b.resolve()};a.onerror=shaka.offline.DBEngine.onError_.bind(null,a,b);return b};\nshaka.offline.DBEngine.prototype.init=function(a){return shaka.offline.DBEngine.open_(this.name_,shaka.offline.DBEngine.DB_VERSION_,a).then(function(a){this.db_=a}.bind(this))};\nshaka.offline.DBEngine.prototype.destroy=function(){return Promise.all(this.operations_.map(function(a){try{a.transaction.abort()}catch(b){}return a.promise[\"catch\"](shaka.util.Functional.noop)})).then(function(){goog.asserts.assert(0==this.operations_.length,\"All operations should have been closed\");this.db_&&(this.db_.close(),this.db_=null)}.bind(this))};shaka.offline.DBEngine.prototype.getManifest=function(a){return this.get_(shaka.offline.DBEngine.Store.MANIFEST,a)};\nshaka.offline.DBEngine.prototype.forEachManifest=function(a){return this.forEach_(shaka.offline.DBEngine.Store.MANIFEST,a)};shaka.offline.DBEngine.prototype.addManifest=function(a){return this.add_(shaka.offline.DBEngine.Store.MANIFEST,a)};shaka.offline.DBEngine.prototype.updateManifest=function(a,b){return this.update_(shaka.offline.DBEngine.Store.MANIFEST,a,b)};shaka.offline.DBEngine.prototype.removeManifests=function(a,b){return this.remove_(shaka.offline.DBEngine.Store.MANIFEST,a,b)};\nshaka.offline.DBEngine.prototype.getSegment=function(a){return this.get_(shaka.offline.DBEngine.Store.SEGMENT,a)};shaka.offline.DBEngine.prototype.forEachSegment=function(a){return this.forEach_(shaka.offline.DBEngine.Store.SEGMENT,a)};shaka.offline.DBEngine.prototype.addSegment=function(a){return this.add_(shaka.offline.DBEngine.Store.SEGMENT,a)};shaka.offline.DBEngine.prototype.removeSegments=function(a,b){return this.remove_(shaka.offline.DBEngine.Store.SEGMENT,a,b)};\nshaka.offline.DBEngine.prototype.get_=function(a,b){var c;return this.createTransaction_(a,shaka.offline.DBEngine.Mode.READ_ONLY,function(a){c=a.get(b)}).then(function(){return c.result})};shaka.offline.DBEngine.prototype.forEach_=function(a,b){return this.createTransaction_(a,shaka.offline.DBEngine.Mode.READ_ONLY,function(a){a.openCursor().onsuccess=function(a){if(a=a.target.result)b(a.key,a.value),a[\"continue\"]()}})};\nshaka.offline.DBEngine.prototype.update_=function(a,b,c){return this.createTransaction_(a,shaka.offline.DBEngine.Mode.READ_WRITE,function(a){a.put(c,b)})};shaka.offline.DBEngine.prototype.add_=function(a,b){var c;return this.createTransaction_(a,shaka.offline.DBEngine.Mode.READ_WRITE,function(a){a.add(b).onsuccess=function(a){c=a.target.result}}).then(function(){return c})};\nshaka.offline.DBEngine.prototype.remove_=function(a,b,c){return this.createTransaction_(a,shaka.offline.DBEngine.Mode.READ_WRITE,function(a){b.forEach(function(b){a[\"delete\"](b).onsuccess=function(){c&&c(b)}})})};\nshaka.offline.DBEngine.prototype.createTransaction_=function(a,b,c){var d=shaka.offline.DBEngine.Mode.READ_ONLY,e=shaka.offline.DBEngine.Mode.READ_WRITE,f=this;goog.asserts.assert(f.db_,\"DBEngine must not be destroyed\");goog.asserts.assert(b==d||b==e,\"Unexpected transaction type.\");var g={transaction:f.db_.transaction([a],b),promise:new shaka.util.PublicPromise};g.transaction.oncomplete=function(a){f.closeOperation_(g);g.promise.resolve()};g.transaction.onabort=function(a){f.closeOperation_(g);shaka.offline.DBEngine.onError_(g.transaction,\ng.promise,a)};g.transaction.onerror=shaka.offline.DBEngine.quietEventHandler_();a=g.transaction.objectStore(a);c(a);f.operations_.push(g);return g.promise};shaka.offline.DBEngine.prototype.closeOperation_=function(a){a=this.operations_.indexOf(a);goog.asserts.assert(0<=a,\"Operation must be in the list.\");this.operations_.splice(a,1)};\nshaka.offline.DBEngine.onUpgrade_=function(a,b,c,d){var e={autoIncrement:!0},f=shaka.offline.DBEngine.Store;0==b?(c.createObjectStore(f.MANIFEST,e),c.createObjectStore(f.SEGMENT,e)):shaka.offline.DBEngine.rejectUpgrade_(a,c,d)};\nshaka.offline.DBEngine.rejectUpgrade_=function(a,b,c){var d=[\"manifest\",\"manifest-v2\"].filter(function(a){return b.objectStoreNames.contains(a)}),e=[],f=function(a,b){c.objectStore(a).openCursor().onsuccess=function(a){(a=a.target.result)?(e.push(a.value.originalManifestUri),a[\"continue\"]()):b()}},g=function(){var b=d.pop();b?f(b,g):(a.reject(new shaka.util.Error(shaka.util.Error.Severity.RECOVERABLE,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.UNSUPPORTED_UPGRADE_REQUEST,e)),c.abort())};\ng()};shaka.offline.DBEngine.onError_=function(a,b,c){a=a.error?new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.INDEXED_DB_ERROR,a.error):new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.OPERATION_ABORTED);b.reject(a);c.preventDefault()};\nshaka.offline.DBEngine.open_=function(a,b,c){var d=shaka.offline.DBEngine.tryOpen_,e=c||0,f=function(){return new Promise(function(a){setTimeout(a,1E3)})},g=0<e;c=shaka.offline.DBEngine.tryOpen_(a,b,g);for(var h=0;h<e;h++)c=c.then(function(c){return c?c:f().then(function(){return d(a,b,g)})});return c.then(function(a){return a?a:Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.INDEXED_DB_ERROR,\"Failed to issue upgrade after \"+\ne+\" retries\"))})};\nshaka.offline.DBEngine.tryOpen_=function(a,b,c){var d=new shaka.util.PublicPromise,e=!1,f=window.indexedDB.open(a,b);f.onupgradeneeded=function(a){var b=a.target.transaction;shaka.offline.DBEngine.onUpgrade_(d,a.oldVersion,b.db,b);e=!0};f.onsuccess=function(a){a=a.target.result;c&&!e?(a.close(),d.resolve(null)):d.resolve(a)};f.onerror=shaka.offline.DBEngine.quietEventHandler_(function(){d.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.INDEXED_DB_ERROR,\n\"Failed to open IndexedDB Connection\",f.error.message))});return d};shaka.offline.DBEngine.quietEventHandler_=function(a){return function(b){b.preventDefault();a&&a(b)}};shaka.offline.DownloadManager=function(a,b,c){this.segments_={};this.storedSegmentIds_=[];this.storageEngine_=a;this.netEngine_=b;this.retryParams_=c;this.promise_=this.manifest_=null;this.downloadActual_=this.downloadExpected_=0;this.progressListeners_=[]};shaka.offline.DownloadManager.prototype.followProgress=function(a){this.progressListeners_.push(a)};\nshaka.offline.DownloadManager.prototype.destroy=function(){var a=this.storageEngine_,b=this.storedSegmentIds_,c=this.promise_||Promise.resolve();b.length&&(c=c.then(function(){return a.removeSegments(b,null)}));this.segments_={};this.storedSegmentIds_=[];this.promise_=this.manifest_=this.retryParams_=this.netEngine_=this.storageEngine_=null;return c};\nshaka.offline.DownloadManager.prototype.addSegment=function(a,b,c,d){this.segments_[a]=this.segments_[a]||[];this.segments_[a].push({uris:b.getUris(),startByte:b.startByte,endByte:b.endByte,bandwidthSize:c,onStore:d})};\nshaka.offline.DownloadManager.prototype.downloadAndStore=function(a){var b=shaka.util.MapUtils;this.downloadActual_=this.downloadExpected_=0;b.values(this.segments_).forEach(function(a){a.forEach(this.markAsPending_.bind(this))}.bind(this));this.manifest_=a;b=b.values(this.segments_).map(function(a){var b=0,c=function(){if(!this.manifest_)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.OPERATION_ABORTED));if(b>=\na.length)return Promise.resolve();var d=a[b++];return this.downloadSegment_(d).then(c)}.bind(this);return c()}.bind(this));this.segments_={};return this.promise_=Promise.all(b).then(function(){return this.storageEngine_.addManifest(a)}.bind(this)).then(function(a){this.storedSegmentIds_=[];return a}.bind(this))};\nshaka.offline.DownloadManager.prototype.downloadSegment_=function(a){goog.asserts.assert(this.retryParams_,\"DownloadManager must not be destroyed\");var b=shaka.net.NetworkingEngine.RequestType.SEGMENT,c=shaka.net.NetworkingEngine.makeRequest(a.uris,this.retryParams_);if(0!=a.startByte||null!=a.endByte)c.headers.Range=\"bytes=\"+a.startByte+\"-\"+(null==a.endByte?\"\":a.endByte);var d;return this.netEngine_.request(b,c).then(function(a){if(!this.manifest_)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.STORAGE,shaka.util.Error.Code.OPERATION_ABORTED));d=a.data.byteLength;return this.storageEngine_.addSegment({data:a.data})}.bind(this)).then(function(b){if(!this.manifest_)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.OPERATION_ABORTED));this.manifest_.size+=d;this.markAsDone_(a);this.storedSegmentIds_.push(b);a.onStore(b);this.updateProgress_()}.bind(this))};\nshaka.offline.DownloadManager.prototype.markAsPending_=function(a){this.downloadExpected_+=null==a.endByte?a.bandwidthSize:a.endByte-a.startByte+1};shaka.offline.DownloadManager.prototype.markAsDone_=function(a){this.downloadActual_+=null==a.endByte?a.bandwidthSize:a.endByte-a.startByte+1};\nshaka.offline.DownloadManager.prototype.updateProgress_=function(){goog.asserts.assert(this.manifest_,\"Must not be destroyed\");var a=0==this.downloadExpected_?0:this.downloadActual_/this.downloadExpected_,b=this.manifest_.size;this.progressListeners_.forEach(function(c){c(a,b)})};shaka.offline.OfflineUri={};shaka.offline.OfflineUri.manifestIdToUri=function(a){return\"offline:manifest/\"+a};shaka.offline.OfflineUri.uriToManifestId=function(a){return(a=/^offline:manifest\\/([0-9]+)$/.exec(a))?Number(a[1]):null};shaka.offline.OfflineUri.segmentIdToUri=function(a){return\"offline:segment/\"+a};shaka.offline.OfflineUri.uriToSegmentId=function(a){return(a=/^offline:segment\\/([0-9]+)$/.exec(a))?Number(a[1]):null};shaka.offline.OfflineUtils={};shaka.offline.OfflineUtils.createStoredContentFromManifest=function(a,b,c,d){goog.asserts.assert(b.periods.length,\"Cannot create stored content from manifest with no periods.\");var e=void 0==b.expiration?Infinity:b.expiration,f=b.presentationTimeline.getDuration();b=shaka.util.StreamUtils.getTracks(b.periods[0]);return{offlineUri:null,originalManifestUri:a,duration:f,size:c,expiration:e,tracks:b,appMetadata:d}};\nshaka.offline.OfflineUtils.createStoredContentFromManifestDB=function(a,b){goog.asserts.assert(b.periods.length,\"Cannot create stored content from manifestDB with no periods.\");var c=b.periods[0],d=new shaka.media.PresentationTimeline(null,0);d=shaka.offline.OfflineUtils.reconstructPeriod(c,[],d);c=b.appMetadata||{};d=shaka.util.StreamUtils.getTracks(d);return{offlineUri:a,originalManifestUri:b.originalManifestUri,duration:b.duration,size:b.size,expiration:b.expiration,tracks:d,appMetadata:c}};\nshaka.offline.OfflineUtils.reconstructPeriod=function(a,b,c){var d=shaka.offline.OfflineUtils,e=a.streams.filter(d.isAudio_),f=a.streams.filter(d.isVideo_);b=d.recreateVariants(e,f,b);e=a.streams.filter(d.isText_).map(d.createStream_);a.streams.forEach(function(a,b){var e=a.segments.map(function(a,b){return d.segmentDBToSegmentReference_(b,a)});c.notifySegments(e,0==b)});return{startTime:a.startTime,variants:b,textStreams:e}};\nshaka.offline.OfflineUtils.segmentDBToSegmentReference_=function(a,b){var c=b.startTime,d=b.endTime,e=shaka.offline.OfflineUri.segmentIdToUri(b.dataKey);return new shaka.media.SegmentReference(a,c,d,function(){return[e]},0,null)};\nshaka.offline.OfflineUtils.recreateVariants=function(a,b,c){var d=shaka.util.MapUtils,e=shaka.offline.OfflineUtils,f={},g=[];g.push.apply(g,a);g.push.apply(g,b);g.forEach(function(a){a.variantIds.forEach(function(a){f[a]||(f[a]=e.createEmptyVariant_(a,c))})});a.forEach(function(a){var b=e.createStream_(a);a.variantIds.forEach(function(a){e.addAudioToVariant_(f[a],b)})});b.forEach(function(a){var b=e.createStream_(a);a.variantIds.forEach(function(a){e.addVideoToVariant_(f[a],b)})});return d.values(f)};\nshaka.offline.OfflineUtils.addAudioToVariant_=function(a,b){goog.asserts.assert(shaka.util.StreamUtils.isAudio(b),\"Only audio streams can be treated as audio.\");goog.asserts.assert(!a.audio,\"A variant should only have one audio stream\");a.language=b.language;a.primary=a.primary||b.primary;a.audio=b};\nshaka.offline.OfflineUtils.addVideoToVariant_=function(a,b){goog.asserts.assert(shaka.util.StreamUtils.isVideo(b),\"Only video streams can be treated as video.\");goog.asserts.assert(!a.video,\"A variant should only have one video stream\");a.primary=a.primary||b.primary;a.video=b};shaka.offline.OfflineUtils.createEmptyVariant_=function(a,b){return{id:a,language:\"\",primary:!1,audio:null,video:null,bandwidth:0,drmInfos:b,allowedByApplication:!0,allowedByKeySystem:!0}};\nshaka.offline.OfflineUtils.createStream_=function(a){var b=shaka.offline.OfflineUtils,c=a.segments.map(function(a,c){return b.segmentDBToSegmentReference_(c,a)});c=new shaka.media.SegmentIndex(c);c={id:a.id,createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:c.find.bind(c),getSegmentReference:c.get.bind(c),initSegmentReference:null,presentationTimeOffset:a.presentationTimeOffset,mimeType:a.mimeType,codecs:a.codecs,width:a.width||void 0,height:a.height||void 0,frameRate:a.frameRate||\nvoid 0,kind:a.kind,encrypted:a.encrypted,keyId:a.keyId,language:a.language,label:a.label||null,type:a.contentType,primary:a.primary,trickModeVideo:null,containsEmsgBoxes:!1,roles:[],channelsCount:null};null!=a.initSegmentKey&&(c.initSegmentReference=b.createInitSegment_(a.initSegmentKey));return c};shaka.offline.OfflineUtils.createInitSegment_=function(a){var b=shaka.offline.OfflineUri.segmentIdToUri(a);return new shaka.media.InitSegmentReference(function(){return[b]},0,null)};\nshaka.offline.OfflineUtils.isAudio_=function(a){return a.contentType==shaka.util.ManifestParserUtils.ContentType.AUDIO};shaka.offline.OfflineUtils.isVideo_=function(a){return a.contentType==shaka.util.ManifestParserUtils.ContentType.VIDEO};shaka.offline.OfflineUtils.isText_=function(a){return a.contentType==shaka.util.ManifestParserUtils.ContentType.TEXT};shaka.offline.StorageEngineFactory={};shaka.offline.StorageEngineFactory.NAME_=\"shaka_offline_db\";shaka.offline.StorageEngineFactory.isSupported=function(){return shaka.offline.DBEngine.isSupported()};shaka.offline.StorageEngineFactory.createStorageEngine=function(){var a=shaka.offline.StorageEngineFactory.NAME_;return shaka.offline.StorageEngineFactory.ensureSupport().then(function(){var b=new shaka.offline.DBEngine(a);return b.init().then(function(){return b})})};\nshaka.offline.StorageEngineFactory.deleteStorage=function(){var a=shaka.offline.StorageEngineFactory.NAME_;return shaka.offline.StorageEngineFactory.ensureSupport().then(function(){return shaka.offline.DBEngine.deleteDatabase(a)})};shaka.offline.StorageEngineFactory.ensureSupport=function(){return shaka.offline.StorageEngineFactory.isSupported()?Promise.resolve():Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.STORAGE_NOT_SUPPORTED))};shaka.offline.OfflineManifestParser=function(){this.manifestId_=-1};shaka.offline.OfflineManifestParser.prototype.configure=function(a){};\nshaka.offline.OfflineManifestParser.prototype.start=function(a,b){var c=shaka.offline.OfflineUri.uriToManifestId(a);if(null==c)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.NETWORK,shaka.util.Error.Code.MALFORMED_OFFLINE_URI,a));goog.asserts.assert(null!=c,\"Manifest id cannot be null.\");this.manifestId_=c;var d;return shaka.offline.StorageEngineFactory.createStorageEngine().then(function(a){d=a;return d.getManifest(c)}.bind(this)).then(function(a){if(!a)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.STORAGE,shaka.util.Error.Code.REQUESTED_ITEM_NOT_FOUND,c);return shaka.offline.OfflineManifestParser.reconstructManifest(a)}).then(function(a){return d.destroy().then(function(){return a})},function(a){return d.destroy().then(function(){throw a;})})};shaka.offline.OfflineManifestParser.prototype.stop=function(){return Promise.resolve()};shaka.offline.OfflineManifestParser.prototype.update=function(){};\nshaka.offline.OfflineManifestParser.prototype.onExpirationUpdated=function(a,b){var c=this.manifestId_,d;shaka.offline.StorageEngineFactory.createStorageEngine().then(function(a){d=a;return d.getManifest(c)}).then(function(e){if(e)if(0>e.sessionIds.indexOf(a))shaka.log.debug(\"Ignoring updated expiration for unknown session\");else if(void 0==e.expiration||e.expiration>b)return shaka.log.debug(\"Updating expiration for stored content\"),e.expiration=b,d.updateManifest(c,e)})[\"catch\"](function(a){shaka.log.error(\"Error updating offline manifest expiration\",\na)}).then(function(){return d.destroy()})};shaka.offline.OfflineManifestParser.reconstructManifest=function(a){var b=new shaka.media.PresentationTimeline(null,0);b.setDuration(a.duration);var c=a.drmInfo?[a.drmInfo]:[];return{presentationTimeline:b,minBufferTime:2,offlineSessionIds:a.sessionIds,periods:a.periods.map(function(a){return shaka.offline.OfflineUtils.reconstructPeriod(a,c,b)})}};shaka.media.ManifestParser.registerParserByMime(\"application/x-offline-manifest\",shaka.offline.OfflineManifestParser);shaka.offline.OfflineScheme=function(a,b){if(null!=shaka.offline.OfflineUri.uriToManifestId(a))return shaka.offline.OfflineScheme.onManifest_(a);var c=shaka.offline.OfflineUri.uriToSegmentId(a);return null!=c?shaka.offline.OfflineScheme.onSegment_(c,a):Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.NETWORK,shaka.util.Error.Code.MALFORMED_OFFLINE_URI,a))};goog.exportSymbol(\"shaka.offline.OfflineScheme\",shaka.offline.OfflineScheme);\nshaka.offline.OfflineScheme.onManifest_=function(a){a={uri:a,data:new ArrayBuffer(0),headers:{\"content-type\":\"application/x-offline-manifest\"}};return Promise.resolve(a)};\nshaka.offline.OfflineScheme.onSegment_=function(a,b){var c,d;return shaka.offline.StorageEngineFactory.createStorageEngine().then(function(b){c=b;return c.getSegment(a)}).then(function(a){d=a;return c.destroy()}).then(function(){if(!d)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.REQUESTED_ITEM_NOT_FOUND,a);return{uri:b,data:d.data,headers:{}}})};shaka.net.NetworkingEngine.registerScheme(\"offline\",shaka.offline.OfflineScheme);shaka.text.Cue=function(a,b,c){var d=shaka.text.Cue;this.startTime=a;this.endTime=b;this.payload=c;this.region={x:0,y:0,width:100,height:100};this.position=null;this.positionAlign=d.positionAlign.AUTO;this.size=100;this.textAlign=d.textAlign.CENTER;this.writingDirection=d.writingDirection.HORIZONTAL_LEFT_TO_RIGHT;this.lineInterpretation=d.lineInterpretation.LINE_NUMBER;this.line=null;this.lineHeight=\"\";this.lineAlign=d.lineAlign.CENTER;this.displayAlign=d.displayAlign.BEFORE;this.fontSize=this.backgroundColor=\nthis.color=\"\";this.fontWeight=d.fontWeight.NORMAL;this.fontStyle=d.fontStyle.NORMAL;this.fontFamily=\"\";this.textDecoration=[];this.wrapLine=!0;this.id=\"\"};goog.exportSymbol(\"shaka.text.Cue\",shaka.text.Cue);shaka.text.Cue.positionAlign={LEFT:\"line-left\",RIGHT:\"line-right\",CENTER:\"center\",AUTO:\"auto\"};goog.exportProperty(shaka.text.Cue,\"positionAlign\",shaka.text.Cue.positionAlign);shaka.text.Cue.textAlign={LEFT:\"left\",RIGHT:\"right\",CENTER:\"center\",START:\"start\",END:\"end\"};\ngoog.exportProperty(shaka.text.Cue,\"textAlign\",shaka.text.Cue.textAlign);shaka.text.Cue.displayAlign={BEFORE:\"before\",CENTER:\"center\",AFTER:\"after\"};goog.exportProperty(shaka.text.Cue,\"displayAlign\",shaka.text.Cue.displayAlign);shaka.text.Cue.writingDirection={HORIZONTAL_LEFT_TO_RIGHT:0,HORIZONTAL_RIGHT_TO_LEFT:1,VERTICAL_LEFT_TO_RIGHT:2,VERTICAL_RIGHT_TO_LEFT:3};goog.exportProperty(shaka.text.Cue,\"writingDirection\",shaka.text.Cue.writingDirection);\nshaka.text.Cue.lineInterpretation={LINE_NUMBER:0,PERCENTAGE:1};goog.exportProperty(shaka.text.Cue,\"lineInterpretation\",shaka.text.Cue.lineInterpretation);shaka.text.Cue.lineAlign={CENTER:\"center\",START:\"start\",END:\"end\"};goog.exportProperty(shaka.text.Cue,\"lineAlign\",shaka.text.Cue.lineAlign);shaka.text.Cue.fontWeight={NORMAL:400,BOLD:700};goog.exportProperty(shaka.text.Cue,\"fontWeight\",shaka.text.Cue.fontWeight);shaka.text.Cue.fontStyle={NORMAL:\"normal\",ITALIC:\"italic\",OBLIQUE:\"oblique\"};\ngoog.exportProperty(shaka.text.Cue,\"fontStyle\",shaka.text.Cue.fontStyle);shaka.text.Cue.textDecoration={UNDERLINE:\"underline\",LINE_THROUGH:\"lineThrough\",OVERLINE:\"overline\"};goog.exportProperty(shaka.text.Cue,\"textDecoration\",shaka.text.Cue.textDecoration);shaka.text.SimpleTextDisplayer=function(a){this.textTrack_=null;for(var b=0;b<a.textTracks.length;++b){var c=a.textTracks[b];c.mode=\"disabled\";c.label==shaka.text.SimpleTextDisplayer.TextTrackLabel_&&(this.textTrack_=c)}this.textTrack_||(this.textTrack_=a.addTextTrack(\"subtitles\",shaka.text.SimpleTextDisplayer.TextTrackLabel_));this.textTrack_.mode=\"hidden\";this.textTrackCues_=this.textTrack_.cues;goog.asserts.assert(this.textTrackCues_,'Cues should be accessible when mode is set to \"hidden\".')};\ngoog.exportSymbol(\"shaka.text.SimpleTextDisplayer\",shaka.text.SimpleTextDisplayer);shaka.text.SimpleTextDisplayer.prototype.remove=function(a,b){if(!this.textTrack_)return!1;this.removeWhere_(function(c){return c.startTime>=b||c.endTime<=a?!1:!0});return!0};goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype,\"remove\",shaka.text.SimpleTextDisplayer.prototype.remove);\nshaka.text.SimpleTextDisplayer.prototype.append=function(a){for(var b=[],c=0;c<a.length;c++){var d=this.convertToTextTrackCue_(a[c]);d&&b.push(d)}b.slice().sort(function(a,c){return a.startTime!=c.startTime?a.startTime-c.startTime:a.endTime!=c.endTime?a.endTime-c.startTime:b.indexOf(c)-b.indexOf(a)}).forEach(function(a){this.textTrack_.addCue(a)}.bind(this))};goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype,\"append\",shaka.text.SimpleTextDisplayer.prototype.append);\nshaka.text.SimpleTextDisplayer.prototype.destroy=function(){this.textTrack_&&this.removeWhere_(function(a){return!0});this.textTrack_=null;return Promise.resolve()};goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype,\"destroy\",shaka.text.SimpleTextDisplayer.prototype.destroy);shaka.text.SimpleTextDisplayer.prototype.isTextVisible=function(){return\"showing\"==this.textTrack_.mode};goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype,\"isTextVisible\",shaka.text.SimpleTextDisplayer.prototype.isTextVisible);\nshaka.text.SimpleTextDisplayer.prototype.setTextVisibility=function(a){this.textTrack_.mode=a?\"showing\":\"hidden\"};goog.exportProperty(shaka.text.SimpleTextDisplayer.prototype,\"setTextVisibility\",shaka.text.SimpleTextDisplayer.prototype.setTextVisibility);\nshaka.text.SimpleTextDisplayer.prototype.convertToTextTrackCue_=function(a){if(a.startTime>=a.endTime)return shaka.log.warning(\"Invalid cue times: \"+a.startTime+\" - \"+a.endTime),null;var b=shaka.text.Cue,c=new VTTCue(a.startTime,a.endTime,a.payload);c.lineAlign=a.lineAlign;c.positionAlign=a.positionAlign;c.size=a.size;try{c.align=a.textAlign}catch(d){}\"center\"==a.textAlign&&\"center\"!=c.align&&(c.align=\"middle\");a.writingDirection==b.writingDirection.VERTICAL_LEFT_TO_RIGHT?c.vertical=\"lr\":a.writingDirection==\nb.writingDirection.VERTICAL_RIGHT_TO_LEFT&&(c.vertical=\"rl\");a.lineInterpretation==b.lineInterpretation.PERCENTAGE&&(c.snapToLines=!1);null!=a.line&&(c.line=a.line);null!=a.position&&(c.position=a.position);return c};shaka.text.SimpleTextDisplayer.prototype.removeWhere_=function(a){for(var b=this.textTrackCues_,c=[],d=0;d<b.length;++d)a(b[d])&&c.push(b[d]);for(d=0;d<c.length;++d)this.textTrack_.removeCue(c[d])};shaka.text.SimpleTextDisplayer.TextTrackLabel_=\"Shaka Player TextTrack\";shaka.util.CancelableChain=function(){this.promise_=Promise.resolve();this.canceled_=this.complete_=this.final_=!1;this.cancelPromise_=new Promise(function(a){this.onCancelComplete_=a}.bind(this));this.onComplete_=[];this.onCancel_=[]};\nshaka.util.CancelableChain.prototype.then=function(a){goog.asserts.assert(!this.final_,\"Chain should not be final!\");this.promise_=this.promise_.then(a).then(function(a){return this.canceled_?(this.onCancelComplete_(),Promise.reject(this.rejectionValue_)):Promise.resolve(a)}.bind(this));return this};\nshaka.util.CancelableChain.prototype.finalize=function(){this.final_||(this.promise_=this.promise_.then(function(a){this.complete_=!0;this.onComplete_.forEach(function(a){a()});return Promise.resolve(a)}.bind(this),function(a){this.complete_=!0;return this.canceled_?(this.onCancelComplete_(),Promise.reject(this.rejectionValue_)):Promise.reject(a)}.bind(this)));this.final_=!0;return this.promise_};\nshaka.util.CancelableChain.prototype.cancel=function(a){if(this.complete_)return Promise.resolve();this.canceled_=!0;this.rejectionValue_=a;this.onCancel_.forEach(function(a){a()});return this.cancelPromise_};shaka.util.CancelableChain.prototype.onCancel=function(a){this.onCancel_.push(a)};shaka.util.CancelableChain.prototype.onComplete=function(a){this.onComplete_.push(a)};shaka.Player=function(a,b){shaka.util.FakeEventTarget.call(this);this.destroyed_=!1;this.video_=a;this.textVisibility_=!1;this.textDisplayer_=null;this.eventManager_=new shaka.util.EventManager;this.abrManager_=this.manifestUri_=this.manifest_=this.parser_=this.streamingEngine_=this.playheadObserver_=this.playhead_=this.mediaSourceOpen_=this.mediaSourceEngine_=this.mediaSource_=this.drmEngine_=this.networkingEngine_=null;this.nextExternalStreamId_=1E9;this.loadingTextStreamIds_=[];this.buffering_=\n!1;this.switchingPeriods_=!0;this.deferredVariant_=this.unloadChain_=this.loadChain_=null;this.deferredVariantClearBuffer_=!1;this.deferredTextStream_=null;this.pendingTimelineRegions_=[];this.activeStreamsByPeriod_={};this.config_=this.defaultConfig_();this.maxHwRes_={width:Infinity,height:Infinity};this.stats_=this.getCleanStats_();this.lastTimeStatsUpdateTimestamp_=0;this.currentAudioLanguage_=this.config_.preferredAudioLanguage;this.currentTextLanguage_=this.config_.preferredTextLanguage;this.currentTextRole_=\nthis.currentVariantRole_=\"\";b&&b(this);this.networkingEngine_=this.createNetworkingEngine();this.initialize_()};goog.inherits(shaka.Player,shaka.util.FakeEventTarget);goog.exportSymbol(\"shaka.Player\",shaka.Player);\nshaka.Player.prototype.cancelLoadChain_=function(){if(!this.loadChain_)return Promise.resolve();var a=Promise.resolve();this.parser_&&(a=this.parser_.stop(),this.parser_=null);var b=this.loadChain_.cancel(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.PLAYER,shaka.util.Error.Code.LOAD_INTERRUPTED));return Promise.all([a,b])};\nshaka.Player.prototype.destroy=function(){this.destroyed_=!0;return this.cancelLoadChain_().then(function(){var a=Promise.all([this.unloadChain_,this.destroyStreaming_(),this.eventManager_?this.eventManager_.destroy():null,this.networkingEngine_?this.networkingEngine_.destroy():null]);this.video_=null;this.textVisibility_=!1;this.config_=this.networkingEngine_=this.abrManager_=this.eventManager_=null;return a}.bind(this))};goog.exportProperty(shaka.Player.prototype,\"destroy\",shaka.Player.prototype.destroy);\nshaka.Player.version=\"v2.3.3-debug\";goog.exportProperty(shaka.Player,\"version\",shaka.Player.version);shaka.Player.supportPlugins_={};shaka.Player.registerSupportPlugin=function(a,b){shaka.Player.supportPlugins_[a]=b};goog.exportProperty(shaka.Player,\"registerSupportPlugin\",shaka.Player.registerSupportPlugin);shaka.Player.isBrowserSupported=function(){return!!window.Promise&&!!window.Uint8Array&&!!Array.prototype.forEach&&shaka.media.MediaSourceEngine.isBrowserSupported()&&shaka.media.DrmEngine.isBrowserSupported()};\ngoog.exportProperty(shaka.Player,\"isBrowserSupported\",shaka.Player.isBrowserSupported);shaka.Player.probeSupport=function(){goog.asserts.assert(shaka.Player.isBrowserSupported(),\"Must have basic support\");return shaka.media.DrmEngine.probeSupport().then(function(a){var b=shaka.media.ManifestParser.probeSupport(),c=shaka.media.MediaSourceEngine.probeSupport();a={manifest:b,media:c,drm:a};b=shaka.Player.supportPlugins_;for(var d in b)a[d]=b[d]();return a})};\ngoog.exportProperty(shaka.Player,\"probeSupport\",shaka.Player.probeSupport);\nshaka.Player.prototype.load=function(a,b,c){var d=this.unload(),e=new shaka.util.CancelableChain;this.loadChain_=e;this.dispatchEvent(new shaka.util.FakeEvent(\"loading\"));var f=Date.now();return e.then(function(){return d}).then(function(){shaka.log.debug(\"Unload latency:\",(Date.now()-f)/1E3);this.stats_=this.getCleanStats_();this.eventManager_.listen(this.video_,\"playing\",this.updateState_.bind(this));this.eventManager_.listen(this.video_,\"pause\",this.updateState_.bind(this));this.eventManager_.listen(this.video_,\n\"ended\",this.updateState_.bind(this));this.abrManager_=new this.config_.abrFactory;this.abrManager_.configure(this.config_.abr);this.textDisplayer_=new this.config_.textDisplayFactory;this.textDisplayer_.setTextVisibility(this.textVisibility_);goog.asserts.assert(this.networkingEngine_,\"Must not be destroyed\");return shaka.media.ManifestParser.getFactory(a,this.networkingEngine_,this.config_.manifest.retryParameters,c)}.bind(this)).then(function(b){this.parser_=new b;this.parser_.configure(this.config_.manifest);\ngoog.asserts.assert(this.networkingEngine_,\"Must not be destroyed\");b={networkingEngine:this.networkingEngine_,filterNewPeriod:this.filterNewPeriod_.bind(this),filterAllPeriods:this.filterAllPeriods_.bind(this),onTimelineRegionAdded:this.onTimelineRegionAdded_.bind(this),onEvent:this.onEvent_.bind(this),onError:this.onError_.bind(this)};return this.parser_.start(a,b)}.bind(this)).then(function(b){b.periods.some(function(a){return a.variants.some(function(a){return a.video&&a.audio})})&&(shaka.log.debug(\"Found variant with audio and video content, so filtering all periods.\"),\nb.periods.forEach(function(a){a.variants=a.variants.filter(function(a){return a.video&&a.audio})}));if(0==b.periods.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.NO_PERIODS);this.manifest_=b;this.manifestUri_=a;this.drmEngine_=this.createDrmEngine();this.drmEngine_.configure(this.config_.drm);return this.drmEngine_.init(b,!1)}.bind(this)).then(function(){this.filterAllPeriods_(this.manifest_.periods);this.lastTimeStatsUpdateTimestamp_=\nDate.now()/1E3;this.currentAudioLanguage_=this.config_.preferredAudioLanguage;this.currentTextLanguage_=this.config_.preferredTextLanguage;var a=this.manifest_.presentationTimeline.getDuration(),b=this.config_.playRangeEnd,c=this.config_.playRangeStart;0<c&&(this.isLive()?shaka.log.warning(\"PlayerConfiguration.playRangeStart has been configured for live content. Ignoring the setting.\"):this.manifest_.presentationTimeline.setAvailabilityStart(c));b<a&&(this.isLive()?shaka.log.warning(\"PlayerConfiguration.playRangeEnd has been configured for live content. Ignoring the setting.\"):\nthis.manifest_.presentationTimeline.setDuration(b));return Promise.all([this.drmEngine_.attach(this.video_),this.mediaSourceOpen_])}.bind(this)).then(function(){this.abrManager_.init(this.switch_.bind(this));this.playhead_=this.createPlayhead(b);this.playheadObserver_=this.createPlayheadObserver();this.mediaSourceEngine_=this.createMediaSourceEngine();this.streamingEngine_=this.createStreamingEngine();this.streamingEngine_.configure(this.config_.streaming);this.chooseCodecsAndFilterManifest_();var a=\nnew shaka.util.FakeEvent(\"streaming\");this.dispatchEvent(a);return this.streamingEngine_.init()}.bind(this)).then(function(){if(this.config_.streaming.startAtSegmentBoundary){var a=this.adjustStartTime_(this.playhead_.getTime());this.playhead_.setStartTime(a)}this.manifest_.periods.forEach(this.filterNewPeriod_.bind(this));this.onTracksChanged_();this.onAdaptation_();a=this.streamingEngine_.getCurrentPeriod();var b=shaka.util.StreamUtils.filterVariantsByLanguageAndRole(a.variants,this.currentAudioLanguage_,\nthis.currentVariantRole_);this.abrManager_.setVariants(b);a=a.variants.some(function(a){return a.primary});this.currentAudioLanguage_||a||shaka.log.warning(\"No preferred audio language set.  We will choose an arbitrary language initially\");this.pendingTimelineRegions_.forEach(this.playheadObserver_.addTimelineRegion.bind(this.playheadObserver_));this.pendingTimelineRegions_=[];this.eventManager_.listenOnce(this.video_,\"loadeddata\",function(){var a=(Date.now()-f)/1E3;this.stats_.loadLatency=a;shaka.log.debug(\"Load latency:\",\na)}.bind(this));this.loadChain_=null}.bind(this)).finalize()[\"catch\"](function(a){goog.asserts.assert(a instanceof shaka.util.Error,\"Wrong error type!\");shaka.log.debug(\"load() failed:\",a,a?a.message:null,a?a.stack:null);this.loadChain_==e&&(this.loadChain_=null,this.dispatchEvent(new shaka.util.FakeEvent(\"unloading\")));return Promise.reject(a)}.bind(this))};goog.exportProperty(shaka.Player.prototype,\"load\",shaka.Player.prototype.load);\nshaka.Player.prototype.chooseCodecsAndFilterManifest_=function(){function a(a){var b=a.video?a.video.codecs.split(\".\")[0]:\"\";a=a.audio?a.audio.codecs.split(\".\")[0]:\"\";return b+\"-\"+a}var b={};this.manifest_.periods.forEach(function(c){c.variants.forEach(function(c){var d=a(c);d in b||(b[d]=[]);b[d].push(c)})});var c=null,d=Infinity;shaka.util.MapUtils.forEach(b,function(a,b){var e=0,f=0;b.forEach(function(a){e+=a.bandwidth||0;++f});var k=e/f;shaka.log.debug(\"codecs\",a,\"avg bandwidth\",k);k<d&&(c=a,\nd=k)});goog.asserts.assert(null!=c,\"Should have chosen codecs!\");goog.asserts.assert(!isNaN(d),\"Bandwidth should be a number!\");this.manifest_.periods.forEach(function(b){b.variants=b.variants.filter(function(b){if(a(b)==c)return!0;shaka.log.debug(\"Dropping Variant (better codec available)\",b);return!1})})};\nshaka.Player.prototype.createDrmEngine=function(){goog.asserts.assert(this.networkingEngine_,\"Must not be destroyed\");var a={netEngine:this.networkingEngine_,onError:this.onError_.bind(this),onKeyStatus:this.onKeyStatus_.bind(this),onExpirationUpdated:this.onExpirationUpdated_.bind(this),onEvent:this.onEvent_.bind(this)};return new shaka.media.DrmEngine(a)};shaka.Player.prototype.createNetworkingEngine=function(){return new shaka.net.NetworkingEngine(this.onSegmentDownloaded_.bind(this))};\nshaka.Player.prototype.createPlayhead=function(a){goog.asserts.assert(this.manifest_,\"Must have manifest\");goog.asserts.assert(this.video_,\"Must have video\");return new shaka.media.Playhead(this.video_,this.manifest_,this.config_.streaming,void 0==a?null:a,this.onSeek_.bind(this),this.onEvent_.bind(this))};\nshaka.Player.prototype.createPlayheadObserver=function(){goog.asserts.assert(this.manifest_,\"Must have manifest\");return new shaka.media.PlayheadObserver(this.video_,this.mediaSource_,this.manifest_,this.config_.streaming,this.onBuffering_.bind(this),this.onEvent_.bind(this),this.onChangePeriod_.bind(this))};\nshaka.Player.prototype.createMediaSource=function(){this.mediaSource_=new MediaSource;var a=new shaka.util.PublicPromise;this.eventManager_.listen(this.mediaSource_,\"sourceopen\",a.resolve);this.video_.src=window.URL.createObjectURL(this.mediaSource_);return a};shaka.Player.prototype.createMediaSourceEngine=function(){return new shaka.media.MediaSourceEngine(this.video_,this.mediaSource_,this.textDisplayer_)};\nshaka.Player.prototype.createStreamingEngine=function(){goog.asserts.assert(this.playhead_&&this.playheadObserver_&&this.mediaSourceEngine_&&this.manifest_,\"Must not be destroyed\");var a={playhead:this.playhead_,mediaSourceEngine:this.mediaSourceEngine_,netEngine:this.networkingEngine_,onChooseStreams:this.onChooseStreams_.bind(this),onCanSwitch:this.canSwitch_.bind(this),onError:this.onError_.bind(this),onEvent:this.onEvent_.bind(this),onManifestUpdate:this.onManifestUpdate_.bind(this),onSegmentAppended:this.onSegmentAppended_.bind(this),\nfilterNewPeriod:this.filterNewPeriod_.bind(this),filterAllPeriods:this.filterAllPeriods_.bind(this)};return new shaka.media.StreamingEngine(this.manifest_,a)};shaka.Player.prototype.configure=function(a){goog.asserts.assert(this.config_,\"Config must not be null!\");shaka.util.ConfigUtils.mergeConfigObjects(this.config_,a,this.defaultConfig_(),this.configOverrides_(),\"\");this.applyConfig_()};goog.exportProperty(shaka.Player.prototype,\"configure\",shaka.Player.prototype.configure);\nshaka.Player.prototype.applyConfig_=function(){this.parser_&&this.parser_.configure(this.config_.manifest);this.drmEngine_&&this.drmEngine_.configure(this.config_.drm);if(this.streamingEngine_){this.streamingEngine_.configure(this.config_.streaming);try{this.manifest_.periods.forEach(this.filterNewPeriod_.bind(this))}catch(d){this.onError_(d)}var a=this.streamingEngine_.getActiveAudio(),b=this.streamingEngine_.getActiveVideo(),c=this.streamingEngine_.getCurrentPeriod();a=shaka.util.StreamUtils.getVariantByStreams(a,\nb,c.variants);a&&a.allowedByApplication&&a.allowedByKeySystem||(shaka.log.debug(\"Choosing new streams after changing configuration\"),this.chooseStreamsAndSwitch_(c))}this.abrManager_&&(this.abrManager_.configure(this.config_.abr),this.config_.abr.enabled&&!this.switchingPeriods_?this.abrManager_.enable():this.abrManager_.disable())};\nshaka.Player.prototype.getConfiguration=function(){goog.asserts.assert(this.config_,\"Config must not be null!\");var a=this.defaultConfig_();shaka.util.ConfigUtils.mergeConfigObjects(a,this.config_,this.defaultConfig_(),this.configOverrides_(),\"\");return a};goog.exportProperty(shaka.Player.prototype,\"getConfiguration\",shaka.Player.prototype.getConfiguration);shaka.Player.prototype.resetConfiguration=function(){this.config_=this.defaultConfig_();this.applyConfig_()};\ngoog.exportProperty(shaka.Player.prototype,\"resetConfiguration\",shaka.Player.prototype.resetConfiguration);shaka.Player.prototype.getMediaElement=function(){return this.video_};goog.exportProperty(shaka.Player.prototype,\"getMediaElement\",shaka.Player.prototype.getMediaElement);shaka.Player.prototype.getNetworkingEngine=function(){return this.networkingEngine_};goog.exportProperty(shaka.Player.prototype,\"getNetworkingEngine\",shaka.Player.prototype.getNetworkingEngine);\nshaka.Player.prototype.getManifestUri=function(){return this.manifestUri_};goog.exportProperty(shaka.Player.prototype,\"getManifestUri\",shaka.Player.prototype.getManifestUri);shaka.Player.prototype.isLive=function(){return this.manifest_?this.manifest_.presentationTimeline.isLive():!1};goog.exportProperty(shaka.Player.prototype,\"isLive\",shaka.Player.prototype.isLive);shaka.Player.prototype.isInProgress=function(){return this.manifest_?this.manifest_.presentationTimeline.isInProgress():!1};\ngoog.exportProperty(shaka.Player.prototype,\"isInProgress\",shaka.Player.prototype.isInProgress);shaka.Player.prototype.isAudioOnly=function(){if(!this.manifest_||!this.manifest_.periods.length)return!1;var a=this.manifest_.periods[0].variants;return a.length?!a[0].video:!1};goog.exportProperty(shaka.Player.prototype,\"isAudioOnly\",shaka.Player.prototype.isAudioOnly);\nshaka.Player.prototype.seekRange=function(){var a=0,b=0;this.manifest_&&(b=this.manifest_.presentationTimeline,a=b.getSeekRangeStart(),b=b.getSeekRangeEnd());return{start:a,end:b}};goog.exportProperty(shaka.Player.prototype,\"seekRange\",shaka.Player.prototype.seekRange);shaka.Player.prototype.keySystem=function(){return this.drmEngine_?this.drmEngine_.keySystem():\"\"};goog.exportProperty(shaka.Player.prototype,\"keySystem\",shaka.Player.prototype.keySystem);\nshaka.Player.prototype.drmInfo=function(){return this.drmEngine_?this.drmEngine_.getDrmInfo():null};goog.exportProperty(shaka.Player.prototype,\"drmInfo\",shaka.Player.prototype.drmInfo);shaka.Player.prototype.getExpiration=function(){return this.drmEngine_?this.drmEngine_.getExpiration():Infinity};goog.exportProperty(shaka.Player.prototype,\"getExpiration\",shaka.Player.prototype.getExpiration);shaka.Player.prototype.isBuffering=function(){return this.buffering_};\ngoog.exportProperty(shaka.Player.prototype,\"isBuffering\",shaka.Player.prototype.isBuffering);shaka.Player.prototype.unload=function(){if(this.destroyed_)return Promise.resolve();this.dispatchEvent(new shaka.util.FakeEvent(\"unloading\"));return this.cancelLoadChain_().then(function(){this.unloadChain_||(this.unloadChain_=this.resetStreaming_().then(function(){this.unloadChain_=null}.bind(this)));return this.unloadChain_}.bind(this))};goog.exportProperty(shaka.Player.prototype,\"unload\",shaka.Player.prototype.unload);\nshaka.Player.prototype.getPlaybackRate=function(){return this.playhead_?this.playhead_.getPlaybackRate():0};goog.exportProperty(shaka.Player.prototype,\"getPlaybackRate\",shaka.Player.prototype.getPlaybackRate);shaka.Player.prototype.trickPlay=function(a){shaka.log.debug(\"Trick play rate\",a);this.playhead_&&this.playhead_.setPlaybackRate(a);this.streamingEngine_&&this.streamingEngine_.setTrickPlay(1!=a)};goog.exportProperty(shaka.Player.prototype,\"trickPlay\",shaka.Player.prototype.trickPlay);\nshaka.Player.prototype.cancelTrickPlay=function(){shaka.log.debug(\"Trick play canceled\");this.playhead_&&this.playhead_.setPlaybackRate(1);this.streamingEngine_&&this.streamingEngine_.setTrickPlay(!1)};goog.exportProperty(shaka.Player.prototype,\"cancelTrickPlay\",shaka.Player.prototype.cancelTrickPlay);\nshaka.Player.prototype.getVariantTracks=function(){if(!this.manifest_||!this.playhead_)return[];this.assertCorrectActiveStreams_();var a=shaka.util.ManifestParserUtils.ContentType,b=shaka.util.StreamUtils.findPeriodContainingTime(this.manifest_,this.playhead_.getTime()),c=this.activeStreamsByPeriod_[b]||{};return shaka.util.StreamUtils.getVariantTracks(this.manifest_.periods[b],c[a.AUDIO],c[a.VIDEO])};goog.exportProperty(shaka.Player.prototype,\"getVariantTracks\",shaka.Player.prototype.getVariantTracks);\nshaka.Player.prototype.getTextTracks=function(){if(!this.manifest_||!this.playhead_)return[];this.assertCorrectActiveStreams_();var a=shaka.util.ManifestParserUtils.ContentType,b=shaka.util.StreamUtils.findPeriodContainingTime(this.manifest_,this.playhead_.getTime());return shaka.util.StreamUtils.getTextTracks(this.manifest_.periods[b],(this.activeStreamsByPeriod_[b]||{})[a.TEXT]).filter(function(a){return 0>this.loadingTextStreamIds_.indexOf(a.id)}.bind(this))};\ngoog.exportProperty(shaka.Player.prototype,\"getTextTracks\",shaka.Player.prototype.getTextTracks);shaka.Player.prototype.selectTextTrack=function(a){if(this.streamingEngine_){var b=shaka.util.StreamUtils,c=this.streamingEngine_.getCurrentPeriod();(b=b.findTextStreamForTrack(c,a))?(this.addTextStreamToSwitchHistory_(b,!1),this.switchTextStream_(b),this.currentTextLanguage_=b.language):shaka.log.error('Unable to find the track with id \"'+a.id+'\"; did we change Periods?')}};\ngoog.exportProperty(shaka.Player.prototype,\"selectTextTrack\",shaka.Player.prototype.selectTextTrack);\nshaka.Player.prototype.selectVariantTrack=function(a,b){if(this.streamingEngine_){this.config_.abr.enabled&&shaka.log.alwaysWarn(\"Changing tracks while abr manager is enabled will likely result in the selected track being overriden. Consider disabling abr before calling selectVariantTrack().\");var c=shaka.util.StreamUtils,d=this.streamingEngine_.getCurrentPeriod();(d=c.findVariantForTrack(d,a))?c.isPlayable(d)?(this.addVariantToSwitchHistory_(d,!1),this.switchVariant_(d,b),this.currentAudioLanguage_=\nd.language):shaka.log.error('Unable to switch to track with id \"'+a.id+'\" because it is restricted.'):shaka.log.error('Unable to locate track with id \"'+a.id+'\".')}};goog.exportProperty(shaka.Player.prototype,\"selectVariantTrack\",shaka.Player.prototype.selectVariantTrack);\nshaka.Player.prototype.getAudioLanguagesAndRoles=function(){if(!this.streamingEngine_)return[];var a=shaka.util.StreamUtils,b=this.streamingEngine_.getCurrentPeriod();a=a.getPlayableVariants(b.variants).map(function(a){return a.audio}).filter(shaka.util.Functional.isNotDuplicate);return this.getLanguagesAndRoles_(a)};goog.exportProperty(shaka.Player.prototype,\"getAudioLanguagesAndRoles\",shaka.Player.prototype.getAudioLanguagesAndRoles);\nshaka.Player.prototype.getTextLanguagesAndRoles=function(){if(!this.streamingEngine_)return[];var a=this.streamingEngine_.getCurrentPeriod();return this.getLanguagesAndRoles_(a.textStreams)};goog.exportProperty(shaka.Player.prototype,\"getTextLanguagesAndRoles\",shaka.Player.prototype.getTextLanguagesAndRoles);shaka.Player.prototype.getAudioLanguages=function(){if(!this.streamingEngine_)return[];var a=shaka.util.StreamUtils,b=this.streamingEngine_.getCurrentPeriod();return a.getPlayableVariants(b.variants).map(function(a){return a.language}).filter(shaka.util.Functional.isNotDuplicate)};\ngoog.exportProperty(shaka.Player.prototype,\"getAudioLanguages\",shaka.Player.prototype.getAudioLanguages);shaka.Player.prototype.getTextLanguages=function(){return this.streamingEngine_?this.streamingEngine_.getCurrentPeriod().textStreams.map(function(a){return a.language}).filter(shaka.util.Functional.isNotDuplicate):[]};goog.exportProperty(shaka.Player.prototype,\"getTextLanguages\",shaka.Player.prototype.getTextLanguages);\nshaka.Player.prototype.getLanguagesAndRoles_=function(a){var b=[];a.forEach(function(a){if(a){var c=a.language;a.roles.length?a.roles.forEach(function(a){b.push({language:c,role:a})}):b.push({language:c,role:\"\"})}else b.push({language:\"und\",role:\"\"})});return shaka.util.ArrayUtils.removeDuplicates(b,function(a,b){return a.language==b.language&&a.role==b.role})};\nshaka.Player.prototype.selectAudioLanguage=function(a,b){if(this.streamingEngine_){var c=this.streamingEngine_.getCurrentPeriod();this.currentAudioLanguage_=a;this.currentVariantRole_=b||\"\";this.chooseStreamsAndSwitch_(c)}};goog.exportProperty(shaka.Player.prototype,\"selectAudioLanguage\",shaka.Player.prototype.selectAudioLanguage);\nshaka.Player.prototype.selectTextLanguage=function(a,b){if(this.streamingEngine_){var c=this.streamingEngine_.getCurrentPeriod();this.currentTextLanguage_=a;this.currentTextRole_=b||\"\";this.chooseStreamsAndSwitch_(c)}};goog.exportProperty(shaka.Player.prototype,\"selectTextLanguage\",shaka.Player.prototype.selectTextLanguage);shaka.Player.prototype.isTextTrackVisible=function(){return this.textDisplayer_?this.textDisplayer_.isTextVisible():this.textVisibility_};\ngoog.exportProperty(shaka.Player.prototype,\"isTextTrackVisible\",shaka.Player.prototype.isTextTrackVisible);\nshaka.Player.prototype.setTextTrackVisibility=function(a){this.textDisplayer_&&this.textDisplayer_.setTextVisibility(a);this.textVisibility_=a;this.onTextTrackVisibility_();if(this.streamingEngine_){var b=shaka.util.StreamUtils;a?(a=this.streamingEngine_.getCurrentPeriod(),b=b.filterStreamsByLanguageAndRole(a.textStreams,this.currentTextLanguage_,this.currentTextRole_)[0],this.streamingEngine_.loadNewTextStream(b)):this.streamingEngine_.unloadTextStream()}};\ngoog.exportProperty(shaka.Player.prototype,\"setTextTrackVisibility\",shaka.Player.prototype.setTextTrackVisibility);shaka.Player.prototype.getPlayheadTimeAsDate=function(){if(!this.manifest_)return null;goog.asserts.assert(this.isLive(),\"getPlayheadTimeAsDate should be called on a live stream!\");var a=1E3*this.manifest_.presentationTimeline.getPresentationStartTime()+1E3*this.video_.currentTime;return new Date(a)};goog.exportProperty(shaka.Player.prototype,\"getPlayheadTimeAsDate\",shaka.Player.prototype.getPlayheadTimeAsDate);\nshaka.Player.prototype.getPresentationStartTimeAsDate=function(){if(!this.manifest_)return null;goog.asserts.assert(this.isLive(),\"getPresentationStartTimeAsDate should be called on a live stream!\");var a=1E3*this.manifest_.presentationTimeline.getPresentationStartTime();return new Date(a)};goog.exportProperty(shaka.Player.prototype,\"getPresentationStartTimeAsDate\",shaka.Player.prototype.getPresentationStartTimeAsDate);\nshaka.Player.prototype.getBufferedInfo=function(){return this.mediaSourceEngine_?this.mediaSourceEngine_.getBufferedInfo():{total:[],audio:[],video:[],text:[]}};goog.exportProperty(shaka.Player.prototype,\"getBufferedInfo\",shaka.Player.prototype.getBufferedInfo);\nshaka.Player.prototype.getStats=function(){var a=shaka.util.ManifestParserUtils.ContentType;this.updateTimeStats_();this.updateState_();var b=null,c=null,d=this.video_;d=d&&d.getVideoPlaybackQuality?d.getVideoPlaybackQuality():{};if(this.playhead_&&this.manifest_){var e=shaka.util.StreamUtils.findPeriodContainingTime(this.manifest_,this.playhead_.getTime()),f=this.manifest_.periods[e];if(e=this.activeStreamsByPeriod_[e])c=shaka.util.StreamUtils.getVariantByStreamIds(e[a.AUDIO],e[a.VIDEO],f.variants),\nb=c.video||{}}b||(b={});c||(c={});a=shaka.util.ConfigUtils.cloneObject;return{width:b.width||0,height:b.height||0,streamBandwidth:c.bandwidth||0,decodedFrames:Number(d.totalVideoFrames),droppedFrames:Number(d.droppedVideoFrames),estimatedBandwidth:this.abrManager_?this.abrManager_.getBandwidthEstimate():NaN,loadLatency:this.stats_.loadLatency,playTime:this.stats_.playTime,bufferingTime:this.stats_.bufferingTime,switchHistory:a(this.stats_.switchHistory),stateHistory:a(this.stats_.stateHistory)}};\ngoog.exportProperty(shaka.Player.prototype,\"getStats\",shaka.Player.prototype.getStats);\nshaka.Player.prototype.addTextTrack=function(a,b,c,d,e,f){if(!this.streamingEngine_)return shaka.log.error(\"Must call load() and wait for it to resolve before adding text tracks.\"),Promise.reject();for(var g=shaka.util.ManifestParserUtils.ContentType,h=this.streamingEngine_.getCurrentPeriod(),k,l=0;l<this.manifest_.periods.length;l++)if(this.manifest_.periods[l]==h){if(l==this.manifest_.periods.length-1){if(k=this.manifest_.presentationTimeline.getDuration()-h.startTime,Infinity==k)return shaka.log.error(\"The current Period or the presentation must have a duration to add external text tracks.\"),\nPromise.reject()}else k=this.manifest_.periods[l+1].startTime-h.startTime;break}var m={id:this.nextExternalStreamId_++,createSegmentIndex:Promise.resolve.bind(Promise),findSegmentPosition:function(a){return 1},getSegmentReference:function(b){return 1!=b?null:new shaka.media.SegmentReference(1,0,k,function(){return[a]},0,null)},initSegmentReference:null,presentationTimeOffset:0,mimeType:d,codecs:e||\"\",kind:c,encrypted:!1,keyId:null,language:b,label:f||null,type:g.TEXT,primary:!1,trickModeVideo:null,\ncontainsEmsgBoxes:!1,roles:[],channelsCount:null};this.loadingTextStreamIds_.push(m.id);h.textStreams.push(m);return this.streamingEngine_.loadNewTextStream(m).then(function(){if(!this.destroyed_){var a=this.manifest_.periods.indexOf(h),d=this.streamingEngine_.getActiveText();d&&(this.activeStreamsByPeriod_[a][g.TEXT]=d.id);this.loadingTextStreamIds_.splice(this.loadingTextStreamIds_.indexOf(m.id),1);shaka.log.debug(\"Choosing new streams after adding a text stream\");this.chooseStreamsAndSwitch_(h);\nthis.onTracksChanged_();return{id:m.id,active:!1,type:g.TEXT,bandwidth:0,language:b,label:f||null,kind:c,width:null,height:null}}}.bind(this))};goog.exportProperty(shaka.Player.prototype,\"addTextTrack\",shaka.Player.prototype.addTextTrack);shaka.Player.prototype.setMaxHardwareResolution=function(a,b){this.maxHwRes_.width=a;this.maxHwRes_.height=b};goog.exportProperty(shaka.Player.prototype,\"setMaxHardwareResolution\",shaka.Player.prototype.setMaxHardwareResolution);\nshaka.Player.prototype.retryStreaming=function(){return this.streamingEngine_?this.streamingEngine_.retry():!1};goog.exportProperty(shaka.Player.prototype,\"retryStreaming\",shaka.Player.prototype.retryStreaming);shaka.Player.prototype.getManifest=function(){return this.manifest_};goog.exportProperty(shaka.Player.prototype,\"getManifest\",shaka.Player.prototype.getManifest);\nshaka.Player.prototype.initialize_=function(){this.mediaSourceOpen_=this.createMediaSource();this.eventManager_.listen(this.video_,\"error\",this.onVideoError_.bind(this))};\nshaka.Player.prototype.addVariantToSwitchHistory_=function(a,b){a.video&&this.updateActiveStreams_(a.video);a.audio&&this.updateActiveStreams_(a.audio);var c=this.streamingEngine_.getActivePeriod();c=shaka.util.StreamUtils.getVariantByStreams(this.streamingEngine_.getActiveAudio(),this.streamingEngine_.getActiveVideo(),c?c.variants:[]);a!=c&&this.stats_.switchHistory.push({timestamp:Date.now()/1E3,id:a.id,type:\"variant\",fromAdaptation:b,bandwidth:a.bandwidth})};\nshaka.Player.prototype.addTextStreamToSwitchHistory_=function(a,b){this.updateActiveStreams_(a);this.stats_.switchHistory.push({timestamp:Date.now()/1E3,id:a.id,type:\"text\",fromAdaptation:b,bandwidth:null})};\nshaka.Player.prototype.updateActiveStreams_=function(a){goog.asserts.assert(this.manifest_,\"Must not be destroyed\");var b=shaka.util.StreamUtils.findPeriodContainingStream(this.manifest_,a);this.activeStreamsByPeriod_[b]||(this.activeStreamsByPeriod_[b]={});this.activeStreamsByPeriod_[b][a.type]=a.id};\nshaka.Player.prototype.destroyStreaming_=function(){this.eventManager_&&(this.eventManager_.unlisten(this.mediaSource_,\"sourceopen\"),this.eventManager_.unlisten(this.video_,\"loadeddata\"),this.eventManager_.unlisten(this.video_,\"playing\"),this.eventManager_.unlisten(this.video_,\"pause\"),this.eventManager_.unlisten(this.video_,\"ended\"));this.video_&&(this.video_.removeAttribute(\"src\"),this.video_.load());var a=Promise.all([this.abrManager_?this.abrManager_.stop():null,this.drmEngine_?this.drmEngine_.destroy():\nnull,this.mediaSourceEngine_?this.mediaSourceEngine_.destroy():null,this.playhead_?this.playhead_.destroy():null,this.playheadObserver_?this.playheadObserver_.destroy():null,this.streamingEngine_?this.streamingEngine_.destroy():null,this.parser_?this.parser_.stop():null,this.textDisplayer_?this.textDisplayer_.destroy():null]);this.switchingPeriods_=!0;this.mediaSource_=this.mediaSourceOpen_=this.manifestUri_=this.manifest_=this.textDisplayer_=this.parser_=this.streamingEngine_=this.playheadObserver_=\nthis.playhead_=this.mediaSourceEngine_=this.drmEngine_=null;this.pendingTimelineRegions_=[];this.activeStreamsByPeriod_={};this.stats_=this.getCleanStats_();return a};shaka.Player.prototype.resetStreaming_=function(){return this.parser_?this.destroyStreaming_().then(function(){this.destroyed_||(this.onBuffering_(!1),this.mediaSourceOpen_=this.createMediaSource())}.bind(this)):Promise.resolve()};\nshaka.Player.prototype.configOverrides_=function(){return{\".drm.servers\":\"\",\".drm.clearKeys\":\"\",\".drm.advanced\":{distinctiveIdentifierRequired:!1,persistentStateRequired:!1,videoRobustness:\"\",audioRobustness:\"\",serverCertificate:new Uint8Array(0)}}};\nshaka.Player.prototype.defaultConfig_=function(){var a=5E5;navigator.connection&&navigator.connection.type&&(a=1E6*navigator.connection.downlink);return{drm:{retryParameters:shaka.net.NetworkingEngine.defaultRetryParameters(),servers:{},clearKeys:{},advanced:{},delayLicenseRequestUntilPlayed:!1},manifest:{retryParameters:shaka.net.NetworkingEngine.defaultRetryParameters(),dash:{customScheme:function(a){if(a)return null},clockSyncUri:\"\",ignoreDrmInfo:!1,xlinkFailGracefully:!1,defaultPresentationDelay:10}},\nstreaming:{retryParameters:shaka.net.NetworkingEngine.defaultRetryParameters(),failureCallback:this.defaultStreamingFailureCallback_.bind(this),rebufferingGoal:2,bufferingGoal:10,bufferBehind:30,ignoreTextStreamFailures:!1,startAtSegmentBoundary:!1,smallGapLimit:.5,jumpLargeGaps:!1,durationBackoff:1},abrFactory:shaka.abr.SimpleAbrManager,textDisplayFactory:function(a){return new shaka.text.SimpleTextDisplayer(a)}.bind(null,this.video_),abr:{enabled:!0,defaultBandwidthEstimate:a,switchInterval:8,bandwidthUpgradeTarget:.85,\nbandwidthDowngradeTarget:.95,restrictions:{minWidth:0,maxWidth:Infinity,minHeight:0,maxHeight:Infinity,minPixels:0,maxPixels:Infinity,minBandwidth:0,maxBandwidth:Infinity}},preferredAudioLanguage:\"\",preferredTextLanguage:\"\",restrictions:{minWidth:0,maxWidth:Infinity,minHeight:0,maxHeight:Infinity,minPixels:0,maxPixels:Infinity,minBandwidth:0,maxBandwidth:Infinity},playRangeStart:0,playRangeEnd:Infinity}};\nshaka.Player.prototype.defaultStreamingFailureCallback_=function(a){var b=[shaka.util.Error.Code.BAD_HTTP_STATUS,shaka.util.Error.Code.HTTP_ERROR,shaka.util.Error.Code.TIMEOUT];this.isLive()&&0<=b.indexOf(a.code)&&(a.severity=shaka.util.Error.Severity.RECOVERABLE,shaka.log.warning(\"Live streaming error.  Retrying automatically...\"),this.retryStreaming())};\nshaka.Player.prototype.getCleanStats_=function(){return{width:NaN,height:NaN,streamBandwidth:NaN,decodedFrames:NaN,droppedFrames:NaN,estimatedBandwidth:NaN,loadLatency:NaN,playTime:0,bufferingTime:0,switchHistory:[],stateHistory:[]}};\nshaka.Player.prototype.filterAllPeriods_=function(a){goog.asserts.assert(this.video_,\"Must not be destroyed\");var b=shaka.util.ArrayUtils,c=shaka.util.StreamUtils,d=this.streamingEngine_?this.streamingEngine_.getActiveAudio():null,e=this.streamingEngine_?this.streamingEngine_.getActiveVideo():null;d=c.filterNewPeriod.bind(null,this.drmEngine_,d,e);a.forEach(d);b=b.count(a,function(a){return a.variants.some(c.isPlayable)});if(0==b)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,\nshaka.util.Error.Code.CONTENT_UNSUPPORTED_BY_BROWSER);if(b<a.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.UNPLAYABLE_PERIOD);a.forEach(function(a){if(shaka.util.StreamUtils.applyRestrictions(a,this.config_.restrictions,this.maxHwRes_)&&this.streamingEngine_&&this.streamingEngine_.getCurrentPeriod()==a)this.onTracksChanged_();if(!a.variants.some(c.isPlayable))throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.RESTRICTIONS_CANNOT_BE_MET);}.bind(this))};\nshaka.Player.prototype.filterNewPeriod_=function(a){goog.asserts.assert(this.video_,\"Must not be destroyed\");var b=shaka.util.StreamUtils,c=this.streamingEngine_?this.streamingEngine_.getActiveAudio():null,d=this.streamingEngine_?this.streamingEngine_.getActiveVideo():null;b.filterNewPeriod(this.drmEngine_,c,d,a);d=a.variants;c=d.some(b.isPlayable);if(shaka.util.StreamUtils.applyRestrictions(a,this.config_.restrictions,this.maxHwRes_)&&this.streamingEngine_&&this.streamingEngine_.getCurrentPeriod()==\na)this.onTracksChanged_();a=d.some(b.isPlayable);if(!c)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.UNPLAYABLE_PERIOD);if(!a)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.RESTRICTIONS_CANNOT_BE_MET);};\nshaka.Player.prototype.switchVariant_=function(a,b){this.switchingPeriods_?(this.deferredVariant_=a,this.deferredVariantClearBuffer_=b||!1):this.streamingEngine_.switchVariant(a,b||!1)};shaka.Player.prototype.switchTextStream_=function(a){this.switchingPeriods_?this.deferredTextStream_=a:this.streamingEngine_.switchTextStream(a)};\nshaka.Player.prototype.assertCorrectActiveStreams_=function(){if(this.streamingEngine_&&this.manifest_&&goog.DEBUG){var a=shaka.util.StreamUtils,b=shaka.util.ManifestParserUtils.ContentType,c=this.streamingEngine_.getActiveAudio(),d=this.streamingEngine_.getActiveVideo(),e=this.streamingEngine_.getActiveText(),f=d||c;if(f&&(a=a.findPeriodContainingStream(this.manifest_,f),f=this.manifest_.periods.indexOf(this.streamingEngine_.getCurrentPeriod()),!(0>a||a!=f))){var g=this.activeStreamsByPeriod_[f]||\n{};[c,d,e].forEach(function(a){if(a){var c=a.id;a=a.type;a==b.TEXT&&this.deferredTextStream_&&(c=this.deferredTextStream_.id);a==b.AUDIO&&this.deferredVariant_&&(c=this.deferredVariant_.audio.id);a==b.VIDEO&&this.deferredVariant_&&(c=this.deferredVariant_.video.id);goog.asserts.assert(c==g[a],\"Inconsistent active stream\")}}.bind(this))}}};\nshaka.Player.prototype.updateTimeStats_=function(){if(this.manifest_){var a=Date.now()/1E3;this.buffering_?this.stats_.bufferingTime+=a-this.lastTimeStatsUpdateTimestamp_:this.stats_.playTime+=a-this.lastTimeStatsUpdateTimestamp_;this.lastTimeStatsUpdateTimestamp_=a}};\nshaka.Player.prototype.adjustStartTime_=function(a){function b(a,b){if(!a)return null;var c=a.findSegmentPosition(b-e.startTime);if(null==c)return null;c=a.getSegmentReference(c);if(!c)return null;c=c.startTime+e.startTime;goog.asserts.assert(c<=b,\"Segment should start before time\");return c}var c=this.streamingEngine_.getActiveAudio(),d=this.streamingEngine_.getActiveVideo(),e=this.streamingEngine_.getCurrentPeriod();c=b(c,a);d=b(d,a);return null!=d&&null!=c?Math.max(d,c):null!=d?d:null!=c?c:a};\nshaka.Player.prototype.onSegmentDownloaded_=function(a,b){this.abrManager_&&this.abrManager_.segmentDownloaded(a,b)};shaka.Player.prototype.onBuffering_=function(a){this.updateTimeStats_();this.buffering_=a;this.updateState_();this.playhead_&&this.playhead_.setBuffering(a);a=new shaka.util.FakeEvent(\"buffering\",{buffering:a});this.dispatchEvent(a)};shaka.Player.prototype.onChangePeriod_=function(){this.onTracksChanged_()};\nshaka.Player.prototype.updateState_=function(){if(!this.destroyed_){var a=this.buffering_?\"buffering\":this.video_.ended?\"ended\":this.video_.paused?\"paused\":\"playing\";var b=Date.now()/1E3;if(this.stats_.stateHistory.length){var c=this.stats_.stateHistory[this.stats_.stateHistory.length-1];c.duration=b-c.timestamp;if(a==c.state)return}this.stats_.stateHistory.push({timestamp:b,state:a,duration:0})}};\nshaka.Player.prototype.onSeek_=function(){this.playheadObserver_&&this.playheadObserver_.seeked();this.streamingEngine_&&this.streamingEngine_.seeked()};shaka.Player.prototype.chooseVariant_=function(a){goog.asserts.assert(this.config_,\"Must not be destroyed\");if(!a||!a.length)return this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MANIFEST,shaka.util.Error.Code.RESTRICTIONS_CANNOT_BE_MET)),null;this.abrManager_.setVariants(a);return this.abrManager_.chooseVariant()};\nshaka.Player.prototype.chooseStreamsAndSwitch_=function(a){goog.asserts.assert(this.config_,\"Must not be destroyed\");var b=shaka.util.StreamUtils.filterVariantsByLanguageAndRole(a.variants,this.currentAudioLanguage_,this.currentVariantRole_);a=shaka.util.StreamUtils.filterStreamsByLanguageAndRole(a.textStreams,this.currentTextLanguage_,this.currentTextRole_);if(b=this.chooseVariant_(b))this.addVariantToSwitchHistory_(b,!0),this.switchVariant_(b,!0);(b=a[0])&&this.isTextTrackVisible()&&(this.addTextStreamToSwitchHistory_(b,\n!0),this.switchTextStream_(b));this.onAdaptation_()};\nshaka.Player.prototype.onChooseStreams_=function(a){shaka.log.debug(\"onChooseStreams_\",a);goog.asserts.assert(this.config_,\"Must not be destroyed\");var b=shaka.util.ManifestParserUtils.ContentType,c=shaka.util.StreamUtils;this.switchingPeriods_=!0;this.abrManager_.disable();shaka.log.debug(\"Choosing new streams after period changed\");var d={};d[b.AUDIO]=!1;d[b.TEXT]=!1;var e=c.filterVariantsByLanguageAndRole(a.variants,this.currentAudioLanguage_,this.currentVariantRole_,d),f=c.filterStreamsByLanguageAndRole(a.textStreams,\nthis.currentTextLanguage_,this.currentTextRole_,d);shaka.log.v2(\"onChooseStreams_, variants and text streams: \",e,f);e=this.chooseVariant_(e);f=f[0]||null;shaka.log.v2(\"onChooseStreams_, chosen=\",e,f);goog.asserts.assert(this.manifest_,\"Manifest should exist!\");if(this.deferredVariant_){var g=c.findPeriodContainingVariant(this.manifest_,this.deferredVariant_);g=this.manifest_.periods[g];g==a&&(e=this.deferredVariant_);this.deferredVariant_=null}this.deferredTextStream_&&(g=c.findPeriodContainingStream(this.manifest_,\nthis.deferredTextStream_),g=this.manifest_.periods[g],g==a&&(f=this.deferredTextStream_),this.deferredTextStream_=null);e&&this.addVariantToSwitchHistory_(e,!0);f&&(this.addTextStreamToSwitchHistory_(f,!0),!this.streamingEngine_.getActivePeriod()&&e&&e.audio&&d[b.TEXT]&&f.language!=e.audio.language&&(this.textDisplayer_.setTextVisibility(!0),this.onTextTrackVisibility_()));return this.isTextTrackVisible()?{variant:e,text:f}:{variant:e,text:null}};\nshaka.Player.prototype.canSwitch_=function(){shaka.log.debug(\"canSwitch_\");goog.asserts.assert(this.config_,\"Must not be destroyed\");this.switchingPeriods_=!1;this.config_.abr.enabled&&this.abrManager_.enable();this.deferredVariant_&&(this.streamingEngine_.switchVariant(this.deferredVariant_,this.deferredVariantClearBuffer_),this.deferredVariant_=null);this.deferredTextStream_&&(this.streamingEngine_.switchTextStream(this.deferredTextStream_),this.deferredTextStream_=null)};\nshaka.Player.prototype.onManifestUpdate_=function(){this.parser_&&this.parser_.update&&this.parser_.update()};shaka.Player.prototype.onSegmentAppended_=function(){if(this.playhead_)this.playhead_.onSegmentAppended()};\nshaka.Player.prototype.switch_=function(a,b){shaka.log.debug(\"switch_\");goog.asserts.assert(this.config_.abr.enabled,\"AbrManager should not call switch while disabled!\");goog.asserts.assert(!this.switchingPeriods_,\"AbrManager should not call switch while transitioning between Periods!\");this.addVariantToSwitchHistory_(a,!0);this.streamingEngine_&&(this.streamingEngine_.switchVariant(a,b||!1),this.onAdaptation_())};\nshaka.Player.prototype.onAdaptation_=function(){Promise.resolve().then(function(){if(!this.destroyed_){var a=new shaka.util.FakeEvent(\"adaptation\");this.dispatchEvent(a)}}.bind(this))};shaka.Player.prototype.onTracksChanged_=function(){Promise.resolve().then(function(){if(!this.destroyed_){var a=new shaka.util.FakeEvent(\"trackschanged\");this.dispatchEvent(a)}}.bind(this))};shaka.Player.prototype.onTextTrackVisibility_=function(){var a=new shaka.util.FakeEvent(\"texttrackvisibility\");this.dispatchEvent(a)};\nshaka.Player.prototype.onError_=function(a){if(!this.destroyed_){goog.asserts.assert(a instanceof shaka.util.Error,\"Wrong error type!\");var b=new shaka.util.FakeEvent(\"error\",{detail:a});this.dispatchEvent(b);b.defaultPrevented&&(a.handled=!0)}};shaka.Player.prototype.onTimelineRegionAdded_=function(a){this.playheadObserver_?this.playheadObserver_.addTimelineRegion(a):this.pendingTimelineRegions_.push(a)};shaka.Player.prototype.onEvent_=function(a){this.dispatchEvent(a)};\nshaka.Player.prototype.onVideoError_=function(a){if(this.video_.error&&(a=this.video_.error.code,1!=a)){var b=this.video_.error.msExtendedCode;b&&(0>b&&(b+=Math.pow(2,32)),b=b.toString(16));this.onError_(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.MEDIA,shaka.util.Error.Code.VIDEO_ERROR,a,b,this.video_.error.message))}};\nshaka.Player.prototype.onKeyStatus_=function(a){goog.asserts.assert(this.streamingEngine_,\"Should have been initialized.\");var b=[\"output-restricted\",\"internal-error\"],c=this.streamingEngine_.getCurrentPeriod(),d=!1,e=Object.keys(a);0==e.length&&shaka.log.warning(\"Got a key status event without any key statuses, so we don't know the real key statuses. If we don't have all the keys, you'll need to set restrictions so we don't select those tracks.\");var f=1==e.length&&\"00\"==e[0];f&&shaka.log.warning(\"Got a synthetic key status event, so we don't know the real key statuses. If we don't have all the keys, you'll need to set restrictions so we don't select those tracks.\");\ne.length&&c.variants.forEach(function(c){var e=[];c.audio&&e.push(c.audio);c.video&&e.push(c.video);e.forEach(function(e){var g=c.allowedByKeySystem;e.keyId&&(e=a[f?\"00\":e.keyId],c.allowedByKeySystem=!!e&&0>b.indexOf(e));g!=c.allowedByKeySystem&&(d=!0)})});e=this.streamingEngine_.getActiveAudio();var g=this.streamingEngine_.getActiveVideo();(e=shaka.util.StreamUtils.getVariantByStreams(e,g,c.variants))&&!e.allowedByKeySystem&&(shaka.log.debug(\"Choosing new streams after key status changed\"),this.chooseStreamsAndSwitch_(c));\nif(d)this.onTracksChanged_()};shaka.Player.prototype.onExpirationUpdated_=function(a,b){if(this.parser_&&this.parser_.onExpirationUpdated)this.parser_.onExpirationUpdated(a,b);var c=new shaka.util.FakeEvent(\"expirationupdated\");this.dispatchEvent(c)};shaka.offline.Storage=function(a){if(!a||a.constructor!=shaka.Player)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.LOCAL_PLAYER_INSTANCE_REQUIRED);this.storageEngine_=null;this.player_=a;this.config_=this.defaultConfig_();this.drmEngine_=null;this.storeInProgress_=!1;this.downloadManager_=this.pendingContent_=this.manifest_=this.firstPeriodTracks_=null};goog.exportSymbol(\"shaka.offline.Storage\",shaka.offline.Storage);\nshaka.offline.Storage.support=function(){return shaka.offline.StorageEngineFactory.isSupported()};goog.exportProperty(shaka.offline.Storage,\"support\",shaka.offline.Storage.support);shaka.offline.Storage.prototype.destroy=function(){var a=this.storageEngine_,b=this.downloadManager_?this.downloadManager_.destroy()[\"catch\"](function(){}).then(function(){if(a)return a.destroy()}):Promise.resolve();this.config_=this.player_=this.downloadManager_=this.storageEngine_=null;return b};\ngoog.exportProperty(shaka.offline.Storage.prototype,\"destroy\",shaka.offline.Storage.prototype.destroy);shaka.offline.Storage.prototype.configure=function(a){goog.asserts.assert(this.config_,\"Storage must not be destroyed\");shaka.util.ConfigUtils.mergeConfigObjects(this.config_,a,this.defaultConfig_(),{},\"\")};goog.exportProperty(shaka.offline.Storage.prototype,\"configure\",shaka.offline.Storage.prototype.configure);\nshaka.offline.Storage.prototype.store=function(a,b,c){if(this.storeInProgress_)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.STORE_ALREADY_IN_PROGRESS));this.storeInProgress_=!0;var d=b||{},e=null,f=function(a){e=a};return this.initIfNeeded_().then(function(){this.checkDestroyed_();return this.loadInternal(a,f,c)}.bind(this)).then(function(b){this.checkDestroyed_();if(e)throw e;return this.downloadAndStoreManifest_(a,\nb.manifest,d,b.drmEngine)}.bind(this)).then(function(a){this.checkDestroyed_();return this.cleanup_().then(function(){return a})}.bind(this))[\"catch\"](function(a){e=e||a;return this.cleanup_().then(function(){throw e;})}.bind(this))};goog.exportProperty(shaka.offline.Storage.prototype,\"store\",shaka.offline.Storage.prototype.store);\nshaka.offline.Storage.prototype.downloadAndStoreManifest_=function(a,b,c,d){var e=shaka.offline.OfflineUtils;if(b.presentationTimeline.isLive()||b.presentationTimeline.isInProgress())throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.CANNOT_STORE_LIVE_OFFLINE,a);this.manifest_=b;this.drmEngine_=d;this.filterAllPeriods_(b.periods);this.pendingContent_=e.createStoredContentFromManifest(a,b,0,c);var f=this.createOfflineManifest_(a,c);\nreturn this.downloadManager_.downloadAndStore(f).then(function(a){var b=shaka.offline.OfflineUtils;a=shaka.offline.OfflineUri.manifestIdToUri(a);return b.createStoredContentFromManifestDB(a,f)})};shaka.offline.Storage.prototype.remove=function(a){return a.offlineUri?(shaka.log.alwaysWarn(\"Removing downloaded content using shakaExtern.StoredContent is deprecated. Please remove using the offline uri.\"),this.removeByUrl_(a.offlineUri)):this.removeByUrl_(a)};\ngoog.exportProperty(shaka.offline.Storage.prototype,\"remove\",shaka.offline.Storage.prototype.remove);\nshaka.offline.Storage.prototype.removeByUrl_=function(a){var b=shaka.offline.OfflineUri.uriToManifestId(a);if(null==b)return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.MALFORMED_OFFLINE_URI,a));var c=null,d=function(a){a.code!=shaka.util.Error.Code.OFFLINE_SESSION_REMOVED&&(c=a)},e,f;return this.initIfNeeded_().then(function(){goog.asserts.assert(null!=b,\"Manifest Ids cannot be null.\");this.checkDestroyed_();return this.storageEngine_.getManifest(b)}.bind(this)).then(function(b){this.checkDestroyed_();\nif(!b)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.REQUESTED_ITEM_NOT_FOUND,a);e=b;b=shaka.offline.OfflineManifestParser.reconstructManifest(e);var c=this.player_.getNetworkingEngine();goog.asserts.assert(c,\"Player must not be destroyed\");f=new shaka.media.DrmEngine({netEngine:c,onError:d,onKeyStatus:function(){},onExpirationUpdated:function(){},onEvent:function(){}});f.configure(this.player_.getConfiguration().drm);return f.init(b,\nthis.config_.usePersistentLicense||!1)}.bind(this)).then(function(){return f.removeSessions(e.sessionIds)}.bind(this)).then(function(){return f.destroy()}.bind(this)).then(function(){this.checkDestroyed_();if(c)throw c;goog.asserts.assert(null!=b,\"Manifest id cannot be null\");return this.removeManifest_(a,b,e)}.bind(this))};\nshaka.offline.Storage.prototype.removeManifest_=function(a,b,c){var d=this.config_.progressCallback,e=shaka.offline.OfflineUtils.createStoredContentFromManifestDB(a,c),f=shaka.offline.Storage.getAllSegmentIds_(c),g=0,h=f.length+1,k=function(){g++;d(e,g/h)};return Promise.resolve().then(function(){this.checkDestroyed_();return this.storageEngine_.removeSegments(f,k)}.bind(this)).then(function(){this.checkDestroyed_();return this.storageEngine_.removeManifests([b],k)}.bind(this))};\nshaka.offline.Storage.prototype.list=function(){var a=shaka.offline.OfflineUtils,b=[];return this.initIfNeeded_().then(function(){this.checkDestroyed_();return this.storageEngine_.forEachManifest(function(c,d){var e=a.createStoredContentFromManifestDB(shaka.offline.OfflineUri.manifestIdToUri(c),d);b.push(e)})}.bind(this)).then(function(){return b})};goog.exportProperty(shaka.offline.Storage.prototype,\"list\",shaka.offline.Storage.prototype.list);\nshaka.offline.Storage.prototype.loadInternal=function(a,b,c){var d=this.player_.getNetworkingEngine(),e=this.player_.getConfiguration(),f,g,h,k=function(){};return shaka.media.ManifestParser.getFactory(a,d,e.manifest.retryParameters,c).then(function(c){this.checkDestroyed_();h=new c;h.configure(e.manifest);c={networkingEngine:d,filterAllPeriods:this.filterAllPeriods_.bind(this),filterNewPeriod:this.filterPeriod_.bind(this),onTimelineRegionAdded:function(){},onEvent:function(){},onError:b};return h.start(a,\nc)}.bind(this)).then(function(a){this.checkDestroyed_();f=a;g=new shaka.media.DrmEngine({netEngine:d,onError:b,onKeyStatus:k,onExpirationUpdated:function(){},onEvent:function(){}});g.configure(e.drm);return g.init(f,this.config_.usePersistentLicense||!1)}.bind(this)).then(function(){this.checkDestroyed_();return this.createSegmentIndex_(f)}.bind(this)).then(function(){this.checkDestroyed_();return g.createOrLoad()}.bind(this)).then(function(){this.checkDestroyed_();return h.stop()}.bind(this)).then(function(){this.checkDestroyed_();\nreturn{manifest:f,drmEngine:g}}.bind(this))[\"catch\"](function(a){if(h)return h.stop().then(function(){throw a;});throw a;})};\nshaka.offline.Storage.prototype.defaultTrackSelect_=function(a){var b=shaka.util.LanguageUtils,c=shaka.util.ManifestParserUtils.ContentType,d=[],e=b.normalize(this.player_.getConfiguration().preferredAudioLanguage),f=[b.MatchType.EXACT,b.MatchType.BASE_LANGUAGE_OKAY,b.MatchType.OTHER_SUB_LANGUAGE_OKAY],g=a.filter(function(a){return\"variant\"==a.type});f=f.map(function(a){return g.filter(function(c){c=b.normalize(c.language);return b.match(a,e,c)})});for(var h,k=0;k<f.length;k++)if(f[k].length){h=f[k];\nbreak}h||(f=g.filter(function(a){return a.primary}),f.length&&(h=f));h||(h=g,1<g.map(function(a){return a.language}).filter(shaka.util.Functional.isNotDuplicate).length&&shaka.log.warning(\"Could not choose a good audio track based on language preferences or primary tracks.  An arbitrary language will be stored!\"));var l=h.filter(function(a){return a.height&&480>=a.height});l.length&&(l.sort(function(a,b){return b.height-a.height}),h=l.filter(function(a){return a.height==l[0].height}));h.sort(function(a,\nb){return a.bandwidth-b.bandwidth});h.length&&d.push(h[Math.floor(h.length/2)]);d.push.apply(d,a.filter(function(a){return a.type==c.TEXT}));return d};shaka.offline.Storage.prototype.defaultConfig_=function(){return{trackSelectionCallback:this.defaultTrackSelect_.bind(this),progressCallback:function(a,b){if(a||b)return null},usePersistentLicense:!0}};\nshaka.offline.Storage.prototype.initIfNeeded_=function(){if(!shaka.offline.Storage.support())return Promise.reject(new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.STORAGE_NOT_SUPPORTED));if(this.storageEngine_)return Promise.resolve();goog.asserts.assert(this.player_,\"Player must be initialized\");var a=this.player_.getNetworkingEngine(),b=this.player_.getConfiguration().streaming.retryParameters;return shaka.offline.StorageEngineFactory.createStorageEngine().then(function(c){goog.asserts.assert(a,\n\"Need valid networking engine.\");goog.asserts.assert(c,\"Need valid storage engine.\");this.storageEngine_=c;this.downloadManager_=new shaka.offline.DownloadManager(c,a,b);this.downloadManager_.followProgress(function(a,b){var c=this.pendingContent_;goog.asserts.assert(c,\"Need stored content to be set when updating download progress.\");c.size=b;this.config_.progressCallback(c,a)}.bind(this))}.bind(this))};shaka.offline.Storage.prototype.filterAllPeriods_=function(a){a.forEach(this.filterPeriod_.bind(this))};\nshaka.offline.Storage.prototype.filterPeriod_=function(a){var b=shaka.util.StreamUtils,c=null;if(this.firstPeriodTracks_){var d=this.firstPeriodTracks_.filter(function(a){return\"variant\"==a.type})[0];d&&(c=b.findVariantForTrack(a,d))}var e=d=null;c&&(c.audio&&(d=c.audio),c.video&&(e=c.video));b.filterNewPeriod(this.drmEngine_,d,e,a);b.applyRestrictions(a,this.player_.getConfiguration().restrictions,{width:Infinity,height:Infinity})};\nshaka.offline.Storage.prototype.cleanup_=function(){var a=this.drmEngine_?this.drmEngine_.destroy():Promise.resolve();this.manifest_=this.drmEngine_=null;this.storeInProgress_=!1;this.firstPeriodTracks_=null;return a};\nshaka.offline.Storage.prototype.createSegmentIndex_=function(a){var b=shaka.util.Functional,c=a.periods.map(function(a){return a.variants}).reduce(b.collapseArrays,[]).map(function(a){var b=[];a.audio&&b.push(a.audio);a.video&&b.push(a.video);return b}).reduce(b.collapseArrays,[]).filter(b.isNotDuplicate);a=a.periods.map(function(a){return a.textStreams}).reduce(b.collapseArrays,[]);c.push.apply(c,a);return Promise.all(c.map(function(a){return a.createSegmentIndex()}))};\nshaka.offline.Storage.prototype.createOfflineManifest_=function(a,b){var c=this.manifest_.periods.map(this.createPeriod_.bind(this)),d=this.drmEngine_.getDrmInfo(),e=this.drmEngine_.getSessionIds();if(d&&this.config_.usePersistentLicense){if(!e.length)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.NO_INIT_DATA_FOR_OFFLINE,a);d.initData=[]}return{originalManifestUri:a,duration:this.manifest_.presentationTimeline.getDuration(),size:0,\nexpiration:this.drmEngine_.getExpiration(),periods:c,sessionIds:this.config_.usePersistentLicense?e:[],drmInfo:d,appMetadata:b}};\nshaka.offline.Storage.prototype.createPeriod_=function(a){var b=shaka.util.StreamUtils,c=b.getVariantTracks(a,null,null),d=b.getTextTracks(a,null);c=c.concat(d);c=this.config_.trackSelectionCallback(c);null==this.firstPeriodTracks_&&(this.firstPeriodTracks_=c,this.filterAllPeriods_(this.manifest_.periods));for(d=c.length-1;0<d;--d){for(var e=!1,f=d-1;0<=f;--f)if(c[d].type==c[f].type&&c[d].kind==c[f].kind&&c[d].language==c[f].language){shaka.log.warning(\"Multiple tracks of the same type/kind/language given.\");\ne=!0;break}if(e)break}e=[];for(d=0;d<c.length;d++){var g=b.findVariantForTrack(a,c[d]);g?(g.audio&&((f=e.filter(function(a){return a.id==g.audio.id})[0])?f.variantIds.push(g.id):(f=g.video?g.bandwidth/2:g.bandwidth,e.push(this.createStream_(a,g.audio,f,g.id)))),g.video&&((f=e.filter(function(a){return a.id==g.video.id})[0])?f.variantIds.push(g.id):(f=g.audio?g.bandwidth/2:g.bandwidth,e.push(this.createStream_(a,g.video,f,g.id))))):(f=b.findTextStreamForTrack(a,c[d]),goog.asserts.assert(f,\"Could not find track with id \"+\nc[d].id),e.push(this.createStream_(a,f,0)))}return{startTime:a.startTime,streams:e}};\nshaka.offline.Storage.prototype.createStream_=function(a,b,c,d){var e={id:b.id,primary:b.primary,presentationTimeOffset:b.presentationTimeOffset||0,contentType:b.type,mimeType:b.mimeType,codecs:b.codecs,frameRate:b.frameRate,kind:b.kind,language:b.language,label:b.label,width:b.width||null,height:b.height||null,initSegmentKey:null,encrypted:b.encrypted,keyId:b.keyId,segments:[],variantIds:[]};null!=d&&e.variantIds.push(d);a=this.manifest_.presentationTimeline.getSegmentAvailabilityStart();shaka.offline.Storage.forEachSegment_(b,\na,function(a){var d=a.startTime,f=a.endTime;this.downloadManager_.addSegment(b.type,a,(f-d)*c/8,function(a){e.segments.push({startTime:d,endTime:f,dataKey:a})})}.bind(this));(a=b.initSegmentReference)&&this.downloadManager_.addSegment(b.contentType,a,0,function(a){e.initSegmentKey=a});return e};shaka.offline.Storage.forEachSegment_=function(a,b,c){b=a.findSegmentPosition(b);for(var d=null==b?null:a.getSegmentReference(b);d;)c(d),d=a.getSegmentReference(++b)};\nshaka.offline.Storage.prototype.checkDestroyed_=function(){if(!this.player_)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.STORAGE,shaka.util.Error.Code.OPERATION_ABORTED);};shaka.offline.Storage.getAllSegmentIds_=function(a){var b=[];a.periods.forEach(function(a){a.streams.forEach(function(a){null!=a.initSegmentKey&&b.push(a.initSegmentKey);a.segments.forEach(function(a){b.push(a.dataKey)})})});return b};shaka.offline.Storage.deleteAll=function(){return shaka.offline.StorageEngineFactory.deleteStorage()};\ngoog.exportProperty(shaka.offline.Storage,\"deleteAll\",shaka.offline.Storage.deleteAll);shaka.Player.registerSupportPlugin(\"offline\",shaka.offline.Storage.support);shaka.polyfill={};shaka.polyfill.installAll=function(){for(var a=0;a<shaka.polyfill.polyfills_.length;++a)shaka.polyfill.polyfills_[a]()};goog.exportSymbol(\"shaka.polyfill.installAll\",shaka.polyfill.installAll);shaka.polyfill.polyfills_=[];shaka.polyfill.register=function(a){shaka.polyfill.polyfills_.push(a)};goog.exportSymbol(\"shaka.polyfill.register\",shaka.polyfill.register);shaka.polyfill.Fullscreen={};\nshaka.polyfill.Fullscreen.install=function(){if(window.Document){var a=Element.prototype;a.requestFullscreen=a.requestFullscreen||a.mozRequestFullScreen||a.msRequestFullscreen||a.webkitRequestFullscreen;a=Document.prototype;a.exitFullscreen=a.exitFullscreen||a.mozCancelFullScreen||a.msExitFullscreen||a.webkitExitFullscreen;\"fullscreenElement\"in document||(Object.defineProperty(document,\"fullscreenElement\",{get:function(){return document.mozFullScreenElement||document.msFullscreenElement||document.webkitFullscreenElement}}),\nObject.defineProperty(document,\"fullscreenEnabled\",{get:function(){return document.mozFullScreenEnabled||document.msFullscreenEnabled||document.webkitFullscreenEnabled}}));a=shaka.polyfill.Fullscreen.proxyEvent_;document.addEventListener(\"webkitfullscreenchange\",a);document.addEventListener(\"webkitfullscreenerror\",a);document.addEventListener(\"mozfullscreenchange\",a);document.addEventListener(\"mozfullscreenerror\",a);document.addEventListener(\"MSFullscreenChange\",a);document.addEventListener(\"MSFullscreenError\",\na)}};shaka.polyfill.Fullscreen.proxyEvent_=function(a){var b=a.type.replace(/^(webkit|moz|MS)/,\"\").toLowerCase();if(\"function\"===typeof Event)var c=new Event(b,a);else c=document.createEvent(\"Event\"),c.initEvent(b,a.bubbles,a.cancelable);a.target.dispatchEvent(c)};shaka.polyfill.register(shaka.polyfill.Fullscreen.install);shaka.polyfill.IndexedDB={};shaka.polyfill.IndexedDB.install=function(){shaka.log.debug(\"IndexedDB.install\");var a=navigator.userAgent;a&&0<=a.indexOf(\"CrKey\")&&(shaka.log.debug(\"Removing IndexedDB from ChromeCast\"),delete window.indexedDB,goog.asserts.assert(!window.indexedDB,\"Failed to override window.indexedDB\"))};shaka.polyfill.register(shaka.polyfill.IndexedDB.install);shaka.polyfill.InputEvent={};shaka.polyfill.InputEvent.install=function(){shaka.log.debug(\"InputEvent.install\");0>navigator.userAgent.indexOf(\"Trident/\")||HTMLInputElement.prototype.addEventListener==shaka.polyfill.InputEvent.addEventListener_||(shaka.log.info(\"Patching input event support on IE.\"),shaka.polyfill.InputEvent.originalAddEventListener_=HTMLInputElement.prototype.addEventListener,HTMLInputElement.prototype.addEventListener=shaka.polyfill.InputEvent.addEventListener_)};\nshaka.polyfill.InputEvent.addEventListener_=function(a,b,c){if(\"input\"==a)switch(this.type){case \"range\":a=\"change\"}shaka.polyfill.InputEvent.originalAddEventListener_.call(this,a,b,c)};shaka.polyfill.register(shaka.polyfill.InputEvent.install);shaka.polyfill.MathRound={};shaka.polyfill.MathRound.MAX_ACCURATE_INPUT_=4503599627370496;shaka.polyfill.MathRound.install=function(){shaka.log.debug(\"mathRound.install\");var a=shaka.polyfill.MathRound.MAX_ACCURATE_INPUT_+1;if(Math.round(a)!=a){shaka.log.debug(\"polyfill Math.round\");var b=Math.round;Math.round=function(a){var c=a;a<=shaka.polyfill.MathRound.MAX_ACCURATE_INPUT_&&(c=b(a));return c}}};shaka.polyfill.register(shaka.polyfill.MathRound.install);shaka.util.Pssh=function(a){this.systemIds=[];this.cencKeyIds=[];this.dataBoundaries=[];(new shaka.util.Mp4Parser).fullBox(\"pssh\",this.parseBox_.bind(this)).parse(a.buffer);0==this.dataBoundaries.length&&shaka.log.warning(\"No pssh box found!\")};\nshaka.util.Pssh.prototype.parseBox_=function(a){goog.asserts.assert(null!=a.version,\"PSSH boxes are full boxes and must have a valid version\");goog.asserts.assert(null!=a.flags,\"PSSH boxes are full boxes and must have a valid flag\");if(1<a.version)shaka.log.warning(\"Unrecognized PSSH version found!\");else{var b=shaka.util.Uint8ArrayUtils.toHex(a.reader.readBytes(16)),c=[];if(0<a.version)for(var d=a.reader.readUint32(),e=0;e<d;++e){var f=shaka.util.Uint8ArrayUtils.toHex(a.reader.readBytes(16));c.push(f)}d=\na.reader.readUint32();a.reader.skip(d);this.cencKeyIds.push.apply(this.cencKeyIds,c);this.systemIds.push(b);this.dataBoundaries.push({start:a.start,end:a.start+a.size-1});a.reader.getPosition()!=a.reader.getLength()&&shaka.log.warning(\"Mismatch between box size and data size!\")}};shaka.polyfill.PatchedMediaKeysMs={};shaka.polyfill.PatchedMediaKeysMs.install=function(){shaka.log.debug(\"PatchedMediaKeysMs.install\");var a=shaka.polyfill.PatchedMediaKeysMs;a.MediaKeyStatusMap.KEY_ID_=(new Uint8Array([0])).buffer;delete HTMLMediaElement.prototype.mediaKeys;HTMLMediaElement.prototype.mediaKeys=null;HTMLMediaElement.prototype.setMediaKeys=a.setMediaKeys;window.MediaKeys=a.MediaKeys;window.MediaKeySystemAccess=a.MediaKeySystemAccess;navigator.requestMediaKeySystemAccess=a.requestMediaKeySystemAccess};\nshaka.polyfill.PatchedMediaKeysMs.requestMediaKeySystemAccess=function(a,b){shaka.log.debug(\"PatchedMediaKeysMs.requestMediaKeySystemAccess\");goog.asserts.assert(this==navigator,'bad \"this\" for requestMediaKeySystemAccess');var c=shaka.polyfill.PatchedMediaKeysMs;try{var d=new c.MediaKeySystemAccess(a,b);return Promise.resolve(d)}catch(e){return Promise.reject(e)}};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess=function(a,b){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeySystemAccess\");this.keySystem=a;for(var c=!1,d=0;d<b.length;++d){var e=b[d],f={audioCapabilities:[],videoCapabilities:[],persistentState:\"optional\",distinctiveIdentifier:\"optional\",initDataTypes:e.initDataTypes,sessionTypes:[\"temporary\"],label:e.label},g=!1;if(e.audioCapabilities)for(var h=0;h<e.audioCapabilities.length;++h){var k=e.audioCapabilities[h];if(k.contentType){g=!0;var l=k.contentType.split(\";\")[0];\nMSMediaKeys.isTypeSupported(this.keySystem,l)&&(f.audioCapabilities.push(k),c=!0)}}if(e.videoCapabilities)for(h=0;h<e.videoCapabilities.length;++h)k=e.videoCapabilities[h],k.contentType&&(g=!0,l=k.contentType.split(\";\")[0],MSMediaKeys.isTypeSupported(this.keySystem,l)&&(f.videoCapabilities.push(k),c=!0));g||(c=MSMediaKeys.isTypeSupported(this.keySystem,\"video/mp4\"));\"required\"==e.persistentState&&(c=!1);if(c){this.configuration_=f;return}}c=Error(\"Unsupported keySystem\");c.name=\"NotSupportedError\";\nc.code=DOMException.NOT_SUPPORTED_ERR;throw c;};shaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess.prototype.createMediaKeys=function(){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeySystemAccess.createMediaKeys\");var a=new shaka.polyfill.PatchedMediaKeysMs.MediaKeys(this.keySystem);return Promise.resolve(a)};shaka.polyfill.PatchedMediaKeysMs.MediaKeySystemAccess.prototype.getConfiguration=function(){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeySystemAccess.getConfiguration\");return this.configuration_};\nshaka.polyfill.PatchedMediaKeysMs.setMediaKeys=function(a){shaka.log.debug(\"PatchedMediaKeysMs.setMediaKeys\");goog.asserts.assert(this instanceof HTMLMediaElement,'bad \"this\" for setMediaKeys');var b=shaka.polyfill.PatchedMediaKeysMs,c=this.mediaKeys;c&&c!=a&&(goog.asserts.assert(c instanceof b.MediaKeys,\"non-polyfill instance of oldMediaKeys\"),c.setMedia(null));delete this.mediaKeys;return(this.mediaKeys=a)?(goog.asserts.assert(a instanceof b.MediaKeys,\"non-polyfill instance of newMediaKeys\"),a.setMedia(this)):\nPromise.resolve()};shaka.polyfill.PatchedMediaKeysMs.MediaKeys=function(a){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeys\");this.nativeMediaKeys_=new MSMediaKeys(a);this.eventManager_=new shaka.util.EventManager};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.createSession=function(a){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeys.createSession\");var b=a||\"temporary\";if(\"temporary\"!=b)throw new TypeError(\"Session type \"+a+\" is unsupported on this platform.\");return new shaka.polyfill.PatchedMediaKeysMs.MediaKeySession(this.nativeMediaKeys_,b)};shaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.setServerCertificate=function(a){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeys.setServerCertificate\");return Promise.resolve(!1)};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeys.prototype.setMedia=function(a){function b(){a.msSetMediaKeys(d.nativeMediaKeys_);a.removeEventListener(\"loadedmetadata\",b)}var c=shaka.polyfill.PatchedMediaKeysMs;this.eventManager_.removeAll();if(!a)return Promise.resolve();this.eventManager_.listen(a,\"msneedkey\",c.onMsNeedKey_);var d=this;try{return 1<=a.readyState?a.msSetMediaKeys(this.nativeMediaKeys_):a.addEventListener(\"loadedmetadata\",b),Promise.resolve()}catch(e){return Promise.reject(e)}};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession=function(a,b){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeySession\");shaka.util.FakeEventTarget.call(this);this.nativeMediaKeySession_=null;this.nativeMediaKeys_=a;this.updatePromise_=this.generateRequestPromise_=null;this.eventManager_=new shaka.util.EventManager;this.sessionId=\"\";this.expiration=NaN;this.closed=new shaka.util.PublicPromise;this.keyStatuses=new shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap};\ngoog.inherits(shaka.polyfill.PatchedMediaKeysMs.MediaKeySession,shaka.util.FakeEventTarget);\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.generateRequest=function(a,b){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeySession.generateRequest\");this.generateRequestPromise_=new shaka.util.PublicPromise;try{this.nativeMediaKeySession_=this.nativeMediaKeys_.createSession(\"video/mp4\",new Uint8Array(b),null),this.eventManager_.listen(this.nativeMediaKeySession_,\"mskeymessage\",this.onMsKeyMessage_.bind(this)),this.eventManager_.listen(this.nativeMediaKeySession_,\"mskeyadded\",this.onMsKeyAdded_.bind(this)),\nthis.eventManager_.listen(this.nativeMediaKeySession_,\"mskeyerror\",this.onMsKeyError_.bind(this)),this.updateKeyStatus_(\"status-pending\")}catch(c){this.generateRequestPromise_.reject(c)}return this.generateRequestPromise_};shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.load=function(){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeySession.load\");return Promise.reject(Error(\"MediaKeySession.load not yet supported\"))};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.update=function(a){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeySession.update\");this.updatePromise_=new shaka.util.PublicPromise;try{this.nativeMediaKeySession_.update(new Uint8Array(a))}catch(b){this.updatePromise_.reject(b)}return this.updatePromise_};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.close=function(){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeySession.close\");try{this.nativeMediaKeySession_.close(),this.closed.resolve(),this.eventManager_.removeAll()}catch(a){this.closed.reject(a)}return this.closed};shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.remove=function(){shaka.log.debug(\"PatchedMediaKeysMs.MediaKeySession.remove\");return Promise.reject(Error(\"MediaKeySession.remove is only applicable for persistent licenses, which are not supported on this platform\"))};\nshaka.polyfill.PatchedMediaKeysMs.onMsNeedKey_=function(a){shaka.log.debug(\"PatchedMediaKeysMs.onMsNeedKey_\",a);var b=shaka.polyfill.PatchedMediaKeysMs,c=document.createEvent(\"CustomEvent\");c.initCustomEvent(\"encrypted\",!1,!1,null);c.initDataType=\"cenc\";c.initData=b.NormaliseInitData_(a.initData);this.dispatchEvent(c)};\nshaka.polyfill.PatchedMediaKeysMs.NormaliseInitData_=function(a){if(!a)return a;var b=new shaka.util.Pssh(a);if(1>=b.dataBoundaries.length)return a;for(var c=[],d=0;d<b.dataBoundaries.length;d++){var e=a.subarray(b.dataBoundaries[d].start,b.dataBoundaries[d].end+1);c.push(e)}a=shaka.util.ArrayUtils.removeDuplicates(c,shaka.polyfill.PatchedMediaKeysMs.compareInitDatas_);for(d=b=0;d<a.length;d++)b+=a[d].length;b=new Uint8Array(b);for(d=c=0;d<a.length;d++)b.set(a[d],c),c+=a[d].length;return b};\nshaka.polyfill.PatchedMediaKeysMs.compareInitDatas_=function(a,b){return shaka.util.Uint8ArrayUtils.equal(a,b)};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.onMsKeyMessage_=function(a){shaka.log.debug(\"PatchedMediaKeysMs.onMsKeyMessage_\",a);goog.asserts.assert(this.generateRequestPromise_,\"generateRequestPromise_ not set in onMsKeyMessage_\");this.generateRequestPromise_&&(this.generateRequestPromise_.resolve(),this.generateRequestPromise_=null);var b=void 0==this.keyStatuses.getStatus();a=new shaka.util.FakeEvent(\"message\",{messageType:b?\"licenserequest\":\"licenserenewal\",message:a.message.buffer});\nthis.dispatchEvent(a)};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.onMsKeyAdded_=function(a){shaka.log.debug(\"PatchedMediaKeysMs.onMsKeyAdded_\",a);this.generateRequestPromise_?(shaka.log.debug(\"Simulating completion for a PR persistent license.\"),goog.asserts.assert(!this.updatePromise_,\"updatePromise_ and generateRequestPromise_ set in onMsKeyAdded_\"),this.updateKeyStatus_(\"usable\"),this.generateRequestPromise_.resolve(),this.generateRequestPromise_=null):(goog.asserts.assert(this.updatePromise_,\"updatePromise_ not set in onMsKeyAdded_\"),\nthis.updatePromise_&&(this.updateKeyStatus_(\"usable\"),this.updatePromise_.resolve(),this.updatePromise_=null))};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.onMsKeyError_=function(a){shaka.log.debug(\"PatchedMediaKeysMs.onMsKeyError_\",a);a=Error(\"EME PatchedMediaKeysMs key error\");a.errorCode=this.nativeMediaKeySession_.error;if(null!=this.generateRequestPromise_)this.generateRequestPromise_.reject(a),this.generateRequestPromise_=null;else if(null!=this.updatePromise_)this.updatePromise_.reject(a),this.updatePromise_=null;else switch(this.nativeMediaKeySession_.error.code){case MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT:case MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE:this.updateKeyStatus_(\"output-not-allowed\");\nbreak;default:this.updateKeyStatus_(\"internal-error\")}};shaka.polyfill.PatchedMediaKeysMs.MediaKeySession.prototype.updateKeyStatus_=function(a){this.keyStatuses.setStatus(a);a=new shaka.util.FakeEvent(\"keystatuseschange\");this.dispatchEvent(a)};shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap=function(){this.size=0;this.status_=void 0};shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.setStatus=function(a){this.size=void 0==a?0:1;this.status_=a};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.getStatus=function(){return this.status_};shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.forEach=function(a){this.status_&&a(this.status_,shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.KEY_ID_)};shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.get=function(a){if(this.has(a))return this.status_};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.has=function(a){var b=shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.KEY_ID_;return this.status_&&shaka.util.Uint8ArrayUtils.equal(new Uint8Array(a),new Uint8Array(b))?!0:!1};shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.entries=function(){goog.asserts.assert(!1,\"Not used!  Provided only for compiler.\")};shaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.keys=function(){goog.asserts.assert(!1,\"Not used!  Provided only for compiler.\")};\nshaka.polyfill.PatchedMediaKeysMs.MediaKeyStatusMap.prototype.values=function(){goog.asserts.assert(!1,\"Not used!  Provided only for compiler.\")};shaka.polyfill.PatchedMediaKeysNop={};shaka.polyfill.PatchedMediaKeysNop.install=function(){shaka.log.debug(\"PatchedMediaKeysNop.install\");var a=shaka.polyfill.PatchedMediaKeysNop;navigator.requestMediaKeySystemAccess=a.requestMediaKeySystemAccess;delete HTMLMediaElement.prototype.mediaKeys;HTMLMediaElement.prototype.mediaKeys=null;HTMLMediaElement.prototype.setMediaKeys=a.setMediaKeys;window.MediaKeys=a.MediaKeys;window.MediaKeySystemAccess=a.MediaKeySystemAccess};\nshaka.polyfill.PatchedMediaKeysNop.requestMediaKeySystemAccess=function(a,b){shaka.log.debug(\"PatchedMediaKeysNop.requestMediaKeySystemAccess\");goog.asserts.assert(this==navigator,'bad \"this\" for requestMediaKeySystemAccess');return Promise.reject(Error(\"The key system specified is not supported.\"))};\nshaka.polyfill.PatchedMediaKeysNop.setMediaKeys=function(a){shaka.log.debug(\"PatchedMediaKeysNop.setMediaKeys\");goog.asserts.assert(this instanceof HTMLMediaElement,'bad \"this\" for setMediaKeys');return null==a?Promise.resolve():Promise.reject(Error(\"MediaKeys not supported.\"))};shaka.polyfill.PatchedMediaKeysNop.MediaKeys=function(){throw new TypeError(\"Illegal constructor.\");};shaka.polyfill.PatchedMediaKeysNop.MediaKeys.prototype.createSession=function(){};\nshaka.polyfill.PatchedMediaKeysNop.MediaKeys.prototype.setServerCertificate=function(){};shaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess=function(){throw new TypeError(\"Illegal constructor.\");};shaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess.prototype.getConfiguration=function(){};shaka.polyfill.PatchedMediaKeysNop.MediaKeySystemAccess.prototype.createMediaKeys=function(){};shaka.polyfill.PatchedMediaKeysWebkit={};shaka.polyfill.PatchedMediaKeysWebkit.prefix_=\"\";\nshaka.polyfill.PatchedMediaKeysWebkit.install=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.install\");var b=shaka.polyfill.PatchedMediaKeysWebkit;b.prefix_=a;a=b.prefixApi_;goog.asserts.assert(HTMLMediaElement.prototype[a(\"generateKeyRequest\")],\"PatchedMediaKeysWebkit APIs not available!\");b.MediaKeyStatusMap.KEY_ID_=(new Uint8Array([0])).buffer;navigator.requestMediaKeySystemAccess=b.requestMediaKeySystemAccess;delete HTMLMediaElement.prototype.mediaKeys;HTMLMediaElement.prototype.mediaKeys=\nnull;HTMLMediaElement.prototype.setMediaKeys=b.setMediaKeys;window.MediaKeys=b.MediaKeys;window.MediaKeySystemAccess=b.MediaKeySystemAccess};shaka.polyfill.PatchedMediaKeysWebkit.prefixApi_=function(a){var b=shaka.polyfill.PatchedMediaKeysWebkit.prefix_;return b?b+a.charAt(0).toUpperCase()+a.slice(1):a};\nshaka.polyfill.PatchedMediaKeysWebkit.requestMediaKeySystemAccess=function(a,b){shaka.log.debug(\"PatchedMediaKeysWebkit.requestMediaKeySystemAccess\");goog.asserts.assert(this==navigator,'bad \"this\" for requestMediaKeySystemAccess');var c=shaka.polyfill.PatchedMediaKeysWebkit;try{var d=new c.MediaKeySystemAccess(a,b);return Promise.resolve(d)}catch(e){return Promise.reject(e)}};\nshaka.polyfill.PatchedMediaKeysWebkit.setMediaKeys=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.setMediaKeys\");goog.asserts.assert(this instanceof HTMLMediaElement,'bad \"this\" for setMediaKeys');var b=shaka.polyfill.PatchedMediaKeysWebkit,c=this.mediaKeys;c&&c!=a&&(goog.asserts.assert(c instanceof b.MediaKeys,\"non-polyfill instance of oldMediaKeys\"),c.setMedia(null));delete this.mediaKeys;if(this.mediaKeys=a)goog.asserts.assert(a instanceof b.MediaKeys,\"non-polyfill instance of newMediaKeys\"),\na.setMedia(this);return Promise.resolve()};shaka.polyfill.PatchedMediaKeysWebkit.getVideoElement_=function(){var a=document.getElementsByTagName(\"video\");return a.length?a[0]:document.createElement(\"video\")};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess=function(a,b){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySystemAccess\");this.internalKeySystem_=this.keySystem=a;var c=!1;\"org.w3.clearkey\"==a&&(this.internalKeySystem_=\"webkit-org.w3.clearkey\",c=!1);for(var d=!1,e=shaka.polyfill.PatchedMediaKeysWebkit.getVideoElement_(),f=0;f<b.length;++f){var g=b[f],h={audioCapabilities:[],videoCapabilities:[],persistentState:\"optional\",distinctiveIdentifier:\"optional\",initDataTypes:g.initDataTypes,\nsessionTypes:[\"temporary\"],label:g.label},k=!1;if(g.audioCapabilities)for(var l=0;l<g.audioCapabilities.length;++l){var m=g.audioCapabilities[l];if(m.contentType){k=!0;var n=m.contentType.split(\";\")[0];e.canPlayType(n,this.internalKeySystem_)&&(h.audioCapabilities.push(m),d=!0)}}if(g.videoCapabilities)for(l=0;l<g.videoCapabilities.length;++l)m=g.videoCapabilities[l],m.contentType&&(k=!0,e.canPlayType(m.contentType,this.internalKeySystem_)&&(h.videoCapabilities.push(m),d=!0));k||(d=e.canPlayType(\"video/mp4\",\nthis.internalKeySystem_)||e.canPlayType(\"video/webm\",this.internalKeySystem_));\"required\"==g.persistentState&&(c?(h.persistentState=\"required\",h.sessionTypes=[\"persistent-license\"]):d=!1);if(d){this.configuration_=h;return}}c=\"Unsupported keySystem\";if(\"org.w3.clearkey\"==a||\"com.widevine.alpha\"==a)c=\"None of the requested configurations were supported.\";c=Error(c);c.name=\"NotSupportedError\";c.code=DOMException.NOT_SUPPORTED_ERR;throw c;};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess.prototype.createMediaKeys=function(){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySystemAccess.createMediaKeys\");var a=new shaka.polyfill.PatchedMediaKeysWebkit.MediaKeys(this.internalKeySystem_);return Promise.resolve(a)};shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySystemAccess.prototype.getConfiguration=function(){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySystemAccess.getConfiguration\");return this.configuration_};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeys\");this.keySystem_=a;this.media_=null;this.eventManager_=new shaka.util.EventManager;this.newSessions_=[];this.sessionMap_={}};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.setMedia=function(a){this.media_=a;this.eventManager_.removeAll();var b=shaka.polyfill.PatchedMediaKeysWebkit.prefix_;a&&(this.eventManager_.listen(a,b+\"needkey\",this.onWebkitNeedKey_.bind(this)),this.eventManager_.listen(a,b+\"keymessage\",this.onWebkitKeyMessage_.bind(this)),this.eventManager_.listen(a,b+\"keyadded\",this.onWebkitKeyAdded_.bind(this)),this.eventManager_.listen(a,b+\"keyerror\",this.onWebkitKeyError_.bind(this)))};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.createSession=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeys.createSession\");var b=a||\"temporary\";if(\"temporary\"!=b&&\"persistent-license\"!=b)throw new TypeError(\"Session type \"+a+\" is unsupported on this platform.\");a=shaka.polyfill.PatchedMediaKeysWebkit;var c=this.media_||document.createElement(\"video\");c.src||(c.src=\"about:blank\");b=new a.MediaKeySession(c,this.keySystem_,b);this.newSessions_.push(b);return b};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.setServerCertificate=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeys.setServerCertificate\");return Promise.resolve(!1)};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitNeedKey_=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.onWebkitNeedKey_\",a);goog.asserts.assert(this.media_,\"media_ not set in onWebkitNeedKey_\");var b=document.createEvent(\"CustomEvent\");b.initCustomEvent(\"encrypted\",!1,!1,null);b.initDataType=\"webm\";b.initData=a.initData;this.media_.dispatchEvent(b)};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyMessage_=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.onWebkitKeyMessage_\",a);var b=this.findSession_(a.sessionId);if(b){var c=void 0==b.keyStatuses.getStatus();a=new shaka.util.FakeEvent(\"message\",{messageType:c?\"licenserequest\":\"licenserenewal\",message:a.message});b.generated();b.dispatchEvent(a)}else shaka.log.error(\"Session not found\",a.sessionId)};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyAdded_=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.onWebkitKeyAdded_\",a);a=this.findSession_(a.sessionId);goog.asserts.assert(a,\"unable to find session in onWebkitKeyAdded_\");a&&a.ready()};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.onWebkitKeyError_=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.onWebkitKeyError_\",a);var b=this.findSession_(a.sessionId);goog.asserts.assert(b,\"unable to find session in onWebkitKeyError_\");b&&b.handleError(a)};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeys.prototype.findSession_=function(a){var b=this.sessionMap_[a];return b?(shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeys.findSession_\",b),b):(b=this.newSessions_.shift())?(b.sessionId=a,this.sessionMap_[a]=b,shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeys.findSession_\",b),b):null};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession=function(a,b,c){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySession\");shaka.util.FakeEventTarget.call(this);this.media_=a;this.initialized_=!1;this.updatePromise_=this.generatePromise_=null;this.keySystem_=b;this.type_=c;this.sessionId=\"\";this.expiration=NaN;this.closed=new shaka.util.PublicPromise;this.keyStatuses=new shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap};\ngoog.inherits(shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession,shaka.util.FakeEventTarget);shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generated=function(){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySession.generated\");this.generatePromise_&&(this.generatePromise_.resolve(),this.generatePromise_=null)};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.ready=function(){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySession.ready\");this.updateKeyStatus_(\"usable\");this.updatePromise_&&this.updatePromise_.resolve();this.updatePromise_=null};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.handleError=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySession.handleError\",a);var b=Error(\"EME v0.1b key error\");b.errorCode=a.errorCode;b.errorCode.systemCode=a.systemCode;!a.sessionId&&this.generatePromise_?(b.method=\"generateRequest\",45==a.systemCode&&(b.message=\"Unsupported session type.\"),this.generatePromise_.reject(b),this.generatePromise_=null):a.sessionId&&this.updatePromise_?(b.method=\"update\",this.updatePromise_.reject(b),\nthis.updatePromise_=null):(b=a.systemCode,a.errorCode.code==MediaKeyError.MEDIA_KEYERR_OUTPUT?this.updateKeyStatus_(\"output-restricted\"):1==b?this.updateKeyStatus_(\"expired\"):this.updateKeyStatus_(\"internal-error\"))};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generate_=function(a,b){if(this.initialized_)return Promise.reject(Error(\"The session is already initialized.\"));this.initialized_=!0;try{if(\"persistent-license\"==this.type_){var c=shaka.util.StringUtils;if(b)var d=new Uint8Array(c.toUTF8(\"LOAD_SESSION|\"+b));else{var e=c.toUTF8(\"PERSISTENT|\"),f=new Uint8Array(e.byteLength+a.byteLength);f.set(new Uint8Array(e),0);f.set(new Uint8Array(a),e.byteLength);d=f}}else goog.asserts.assert(\"temporary\"==\nthis.type_,\"expected temporary session\"),goog.asserts.assert(!b,\"unexpected offline session ID\"),d=new Uint8Array(a);goog.asserts.assert(d,\"init data not set!\")}catch(h){return Promise.reject(h)}goog.asserts.assert(null==this.generatePromise_,\"generatePromise_ should be null\");this.generatePromise_=new shaka.util.PublicPromise;c=shaka.polyfill.PatchedMediaKeysWebkit.prefixApi_;var g=c(\"generateKeyRequest\");try{this.media_[g](this.keySystem_,d)}catch(h){if(\"InvalidStateError\"!=h.name)return this.generatePromise_=\nnull,Promise.reject(h);setTimeout(function(){try{this.media_[g](this.keySystem_,d)}catch(k){this.generatePromise_.reject(k),this.generatePromise_=null}}.bind(this),10)}return this.generatePromise_};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.update_=function(a,b){if(this.updatePromise_)this.updatePromise_.then(this.update_.bind(this,a,b))[\"catch\"](this.update_.bind(this,a,b));else{this.updatePromise_=a;if(\"webkit-org.w3.clearkey\"==this.keySystem_){var c=shaka.util.Uint8ArrayUtils;var d=shaka.util.StringUtils.fromUTF8(b);var e=JSON.parse(d);\"oct\"!=e.keys[0].kty&&(this.updatePromise_.reject(Error(\"Response is not a valid JSON Web Key Set.\")),this.updatePromise_=null);d=c.fromBase64(e.keys[0].k);\nc=c.fromBase64(e.keys[0].kid)}else d=new Uint8Array(b),c=null;e=shaka.polyfill.PatchedMediaKeysWebkit.prefixApi_;e=e(\"addKey\");try{this.media_[e](this.keySystem_,d,c,this.sessionId)}catch(f){this.updatePromise_.reject(f),this.updatePromise_=null}}};shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.updateKeyStatus_=function(a){this.keyStatuses.setStatus(a);a=new shaka.util.FakeEvent(\"keystatuseschange\");this.dispatchEvent(a)};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.generateRequest=function(a,b){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySession.generateRequest\");return this.generate_(b,null)};shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.load=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySession.load\");return\"persistent-license\"==this.type_?this.generate_(null,a):Promise.reject(Error(\"Not a persistent session.\"))};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.update=function(a){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySession.update\",a);goog.asserts.assert(this.sessionId,\"update without session ID\");var b=new shaka.util.PublicPromise;this.update_(b,a);return b};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.close=function(){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySession.close\");if(\"persistent-license\"!=this.type_){if(!this.sessionId)return this.closed.reject(Error(\"The session is not callable.\")),this.closed;var a=shaka.polyfill.PatchedMediaKeysWebkit.prefixApi_;a=a(\"cancelKeyRequest\");try{this.media_[a](this.keySystem_,this.sessionId)}catch(b){}}this.closed.resolve();return this.closed};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.prototype.remove=function(){shaka.log.debug(\"PatchedMediaKeysWebkit.MediaKeySession.remove\");return\"persistent-license\"!=this.type_?Promise.reject(Error(\"Not a persistent session.\")):this.close()};shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap=function(){this.size=0;this.status_=void 0};shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.setStatus=function(a){this.size=void 0==a?0:1;this.status_=a};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.getStatus=function(){return this.status_};shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.forEach=function(a){this.status_&&a(this.status_,shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.KEY_ID_)};shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.get=function(a){if(this.has(a))return this.status_};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.has=function(a){var b=shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.KEY_ID_;return this.status_&&shaka.util.Uint8ArrayUtils.equal(new Uint8Array(a),new Uint8Array(b))?!0:!1};shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.entries=function(){goog.asserts.assert(!1,\"Not used!  Provided only for compiler.\")};\nshaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.keys=function(){goog.asserts.assert(!1,\"Not used!  Provided only for compiler.\")};shaka.polyfill.PatchedMediaKeysWebkit.MediaKeyStatusMap.prototype.values=function(){goog.asserts.assert(!1,\"Not used!  Provided only for compiler.\")};shaka.polyfill.MediaKeys={};\nshaka.polyfill.MediaKeys.install=function(){shaka.log.debug(\"MediaKeys.install\");window.HTMLVideoElement&&(navigator.requestMediaKeySystemAccess&&MediaKeySystemAccess.prototype.getConfiguration?shaka.log.info(\"Using native EME as-is.\"):HTMLMediaElement.prototype.webkitGenerateKeyRequest?(shaka.log.info(\"Using webkit-prefixed EME v0.1b\"),shaka.polyfill.PatchedMediaKeysWebkit.install(\"webkit\")):HTMLMediaElement.prototype.generateKeyRequest?(shaka.log.info(\"Using nonprefixed EME v0.1b\"),shaka.polyfill.PatchedMediaKeysWebkit.install(\"\")):\nwindow.MSMediaKeys?(shaka.log.info(\"Using ms-prefixed EME v20140218\"),shaka.polyfill.PatchedMediaKeysMs.install()):(shaka.log.info(\"EME not available.\"),shaka.polyfill.PatchedMediaKeysNop.install()))};shaka.polyfill.register(shaka.polyfill.MediaKeys.install);shaka.polyfill.MediaSource={};\nshaka.polyfill.MediaSource.install=function(){shaka.log.debug(\"MediaSource.install\");if(window.MediaSource)if(window.cast&&cast.__platform__&&cast.__platform__.canDisplayType)shaka.log.info(\"Patching Chromecast MSE bugs.\"),shaka.polyfill.MediaSource.patchCastIsTypeSupported_();else if(navigator.vendor&&0<=navigator.vendor.indexOf(\"Apple\")){var a=navigator.appVersion;shaka.polyfill.MediaSource.rejectTsContent_();0<=a.indexOf(\"Version/8\")?(shaka.log.info(\"Blacklisting Safari 8 MSE.\"),shaka.polyfill.MediaSource.blacklist_()):\n0<=a.indexOf(\"Version/9\")?(shaka.log.info(\"Patching Safari 9 MSE bugs.\"),shaka.polyfill.MediaSource.stubAbort_()):0<=a.indexOf(\"Version/10\")?(shaka.log.info(\"Patching Safari 10 MSE bugs.\"),shaka.polyfill.MediaSource.stubAbort_(),shaka.polyfill.MediaSource.patchEndOfStreamEvents_()):0<=a.indexOf(\"Version/11\")&&(shaka.log.info(\"Patching Safari 11 MSE bugs.\"),shaka.polyfill.MediaSource.stubAbort_(),shaka.polyfill.MediaSource.patchRemovalRange_())}else shaka.log.info(\"Using native MSE as-is.\");else shaka.log.info(\"No MSE implementation available.\")};\nshaka.polyfill.MediaSource.blacklist_=function(){window.MediaSource=null};shaka.polyfill.MediaSource.stubAbort_=function(){var a=MediaSource.prototype.addSourceBuffer;MediaSource.prototype.addSourceBuffer=function(){var b=a.apply(this,arguments);b.abort=function(){};return b}};shaka.polyfill.MediaSource.patchRemovalRange_=function(){var a=SourceBuffer.prototype.remove;SourceBuffer.prototype.remove=function(b,c){return a.call(this,b,c-.001)}};\nshaka.polyfill.MediaSource.patchEndOfStreamEvents_=function(){var a=MediaSource.prototype.endOfStream;MediaSource.prototype.endOfStream=function(){for(var b=0,c=0;c<this.sourceBuffers.length;++c){var f=this.sourceBuffers[c];f=f.buffered.end(f.buffered.length-1);b=Math.max(b,f)}if(!isNaN(this.duration)&&b<this.duration)for(this.ignoreUpdateEnd_=!0,c=0;c<this.sourceBuffers.length;++c)f=this.sourceBuffers[c],f.eventSuppressed_=!1;return a.apply(this,arguments)};var b=!1,c=MediaSource.prototype.addSourceBuffer;\nMediaSource.prototype.addSourceBuffer=function(){var a=c.apply(this,arguments);a.mediaSource_=this;a.addEventListener(\"updateend\",shaka.polyfill.MediaSource.ignoreUpdateEnd_,!1);b||(this.addEventListener(\"sourceclose\",shaka.polyfill.MediaSource.cleanUpListeners_,!1),b=!0);return a}};\nshaka.polyfill.MediaSource.ignoreUpdateEnd_=function(a){var b=a.target,c=b.mediaSource_;if(c.ignoreUpdateEnd_){a.preventDefault();a.stopPropagation();a.stopImmediatePropagation();b.eventSuppressed_=!0;for(a=0;a<c.sourceBuffers.length;++a)if(0==c.sourceBuffers[a].eventSuppressed_)return;c.ignoreUpdateEnd_=!1}};\nshaka.polyfill.MediaSource.cleanUpListeners_=function(a){a=a.target;for(var b=0;b<a.sourceBuffers.length;++b)a.sourceBuffers[b].removeEventListener(\"updateend\",shaka.polyfill.MediaSource.ignoreUpdateEnd_,!1);a.removeEventListener(\"sourceclose\",shaka.polyfill.MediaSource.cleanUpListeners_,!1)};shaka.polyfill.MediaSource.rejectTsContent_=function(){var a=MediaSource.isTypeSupported;MediaSource.isTypeSupported=function(b){return\"mp2t\"==b.split(/ *; */)[0].split(\"/\")[1]?!1:a(b)}};\nshaka.polyfill.MediaSource.patchCastIsTypeSupported_=function(){var a=MediaSource.isTypeSupported,b=/^dv(?:he|av)\\./;MediaSource.isTypeSupported=function(c){for(var d=c.split(/ *; */),e=d[0],f={},g=1;g<d.length;++g){var h=d[g].split(\"=\"),k=h[0];h=h[1].replace(/\"(.*)\"/,\"$1\");f[k]=h}d=f.codecs;if(!d)return a(c);var l=!1,m=!1;c=d.split(\",\").filter(function(a){if(b.test(a))return m=!0,!1;/^(hev|hvc)1\\.2/.test(a)&&(l=!0);return!0});m&&(l=!1);f.codecs=c.join(\",\");l&&(f.eotf=\"smpte2084\");for(k in f)h=f[k],\ne+=\"; \"+k+'=\"'+h+'\"';return cast.__platform__.canDisplayType(e)}};shaka.polyfill.register(shaka.polyfill.MediaSource.install);shaka.polyfill.Promise=function(a){this.thens_=[];this.catches_=[];this.state_=shaka.polyfill.Promise.State.PENDING;if(a)try{a(this.resolve_.bind(this),this.reject_.bind(this))}catch(b){this.reject_(b)}};shaka.polyfill.Promise.State={PENDING:0,RESOLVED:1,REJECTED:2};\nshaka.polyfill.Promise.install=function(a){window.setImmediate?(shaka.polyfill.Promise.setImmediate_=function(a){return window.setImmediate(a)},shaka.polyfill.Promise.clearImmediate_=function(a){return window.clearImmediate(a)}):(shaka.polyfill.Promise.setImmediate_=function(a){return window.setTimeout(a,0)},shaka.polyfill.Promise.clearImmediate_=function(a){return window.clearTimeout(a)});window.Promise&&!a?shaka.log.info(\"Using native Promises.\"):(shaka.log.info(\"Using Promises polyfill.\"),window.Promise=\nshaka.polyfill.Promise,window.Promise.resolve=shaka.polyfill.Promise.resolve,window.Promise.reject=shaka.polyfill.Promise.reject,window.Promise.all=shaka.polyfill.Promise.all,window.Promise.race=shaka.polyfill.Promise.race,window.Promise.prototype.then=shaka.polyfill.Promise.prototype.then,window.Promise.prototype[\"catch\"]=shaka.polyfill.Promise.prototype[\"catch\"])};\nshaka.polyfill.Promise.uninstall=function(){shaka.polyfill.Promise.nativePromise_&&(shaka.log.info(\"Removing Promise polyfill.\"),window.Promise=shaka.polyfill.Promise.nativePromise_,shaka.polyfill.Promise.q_=[])};shaka.polyfill.Promise.resolve=function(a){var b=new shaka.polyfill.Promise;b.resolve_(void 0);return b.then(function(){return a})};shaka.polyfill.Promise.reject=function(a){var b=new shaka.polyfill.Promise;b.reject_(a);return b};\nshaka.polyfill.Promise.all=function(a){var b=new shaka.polyfill.Promise;if(!a.length)return b.resolve_([]),b;for(var c=0,d=Array(a.length),e=function(a,b,e){goog.asserts.assert(a.state_!=shaka.polyfill.Promise.State.RESOLVED,\"Invalid Promise state in Promise.all\");a.state_==shaka.polyfill.Promise.State.PENDING&&(d[b]=e,c++,c==d.length&&a.resolve_(d))},f=b.reject_.bind(b),g=0;g<a.length;++g)a[g]&&a[g].then?a[g].then(e.bind(null,b,g),f):e(b,g,a[g]);return b};\nshaka.polyfill.Promise.race=function(a){for(var b=new shaka.polyfill.Promise,c=b.resolve_.bind(b),d=b.reject_.bind(b),e=0;e<a.length;++e)a[e]&&a[e].then?a[e].then(c,d):c(a[e]);return b};\nshaka.polyfill.Promise.prototype.then=function(a,b){var c=new shaka.polyfill.Promise;switch(this.state_){case shaka.polyfill.Promise.State.RESOLVED:this.schedule_(c,a);break;case shaka.polyfill.Promise.State.REJECTED:this.schedule_(c,b);break;case shaka.polyfill.Promise.State.PENDING:this.thens_.push({promise:c,callback:a}),this.catches_.push({promise:c,callback:b})}return c};shaka.polyfill.Promise.prototype[\"catch\"]=function(a){return this.then(void 0,a)};\nshaka.polyfill.Promise.prototype.resolve_=function(a){if(this.state_==shaka.polyfill.Promise.State.PENDING){this.value_=a;this.state_=shaka.polyfill.Promise.State.RESOLVED;for(a=0;a<this.thens_.length;++a)this.schedule_(this.thens_[a].promise,this.thens_[a].callback);this.thens_=[];this.catches_=[]}};\nshaka.polyfill.Promise.prototype.reject_=function(a){if(this.state_==shaka.polyfill.Promise.State.PENDING){this.value_=a;this.state_=shaka.polyfill.Promise.State.REJECTED;for(a=0;a<this.catches_.length;++a)this.schedule_(this.catches_[a].promise,this.catches_[a].callback);this.thens_=[];this.catches_=[]}};\nshaka.polyfill.Promise.prototype.schedule_=function(a,b){goog.asserts.assert(this.state_!=shaka.polyfill.Promise.State.PENDING,\"Invalid Promise state in Promise.schedule_\");var c=shaka.polyfill.Promise,d=function(){if(b&&\"function\"==typeof b){try{var d=b(this.value_)}catch(g){a.reject_(g);return}try{var f=d&&d.then}catch(g){a.reject_(g);return}d instanceof c?d==a?a.reject_(new TypeError(\"Chaining cycle detected\")):d.then(a.resolve_.bind(a),a.reject_.bind(a)):f?c.handleThenable_(d,f,a):a.resolve_(d)}else this.state_==\nc.State.RESOLVED?a.resolve_(this.value_):a.reject_(this.value_)}.bind(this);c.q_.push(d);null==c.flushTimer_&&(c.flushTimer_=c.setImmediate_(c.flush))};shaka.polyfill.Promise.handleThenable_=function(a,b,c){var d=shaka.polyfill.Promise;try{var e=!1;b.call(a,function(a){if(!e){e=!0;try{var b=a&&a.then}catch(h){c.reject_(h);return}b?d.handleThenable_(a,b,c):c.resolve_(a)}},c.reject_.bind(c))}catch(f){c.reject_(f)}};\nshaka.polyfill.Promise.flush=function(){for(var a=shaka.polyfill.Promise;a.q_.length;){null!=a.flushTimer_&&(a.clearImmediate_(a.flushTimer_),a.flushTimer_=null);var b=a.q_;a.q_=[];for(var c=0;c<b.length;++c)b[c]()}};shaka.polyfill.Promise.setImmediate_=function(a){return 0};shaka.polyfill.Promise.clearImmediate_=function(a){};shaka.polyfill.Promise.flushTimer_=null;shaka.polyfill.Promise.q_=[];shaka.polyfill.Promise.nativePromise_=window.Promise;shaka.polyfill.register(shaka.polyfill.Promise.install);shaka.polyfill.VideoPlayPromise={};shaka.polyfill.VideoPlayPromise.install=function(){shaka.log.debug(\"VideoPlayPromise.install\");if(window.HTMLMediaElement){var a=HTMLMediaElement.prototype.play;HTMLMediaElement.prototype.play=function(){var b=a.apply(this,arguments);b&&b[\"catch\"](function(){});return b}}};shaka.polyfill.register(shaka.polyfill.VideoPlayPromise.install);shaka.polyfill.VideoPlaybackQuality={};shaka.polyfill.VideoPlaybackQuality.install=function(){if(window.HTMLVideoElement){var a=HTMLVideoElement.prototype;!a.getVideoPlaybackQuality&&\"webkitDroppedFrameCount\"in a&&(a.getVideoPlaybackQuality=shaka.polyfill.VideoPlaybackQuality.webkit_)}};shaka.polyfill.VideoPlaybackQuality.webkit_=function(){return{droppedVideoFrames:this.webkitDroppedFrameCount,totalVideoFrames:this.webkitDecodedFrameCount,corruptedVideoFrames:0,creationTime:NaN,totalFrameDelay:0}};\nshaka.polyfill.register(shaka.polyfill.VideoPlaybackQuality.install);shaka.polyfill.VTTCue={};\nshaka.polyfill.VTTCue.install=function(){if(window.VTTCue)shaka.log.info(\"Using native VTTCue.\");else if(window.TextTrackCue){var a=TextTrackCue.length;3==a?(shaka.log.info(\"Using VTTCue polyfill from 3 argument TextTrackCue.\"),window.VTTCue=shaka.polyfill.VTTCue.from3ArgsTextTrackCue_):6==a?(shaka.log.info(\"Using VTTCue polyfill from 6 argument TextTrackCue.\"),window.VTTCue=shaka.polyfill.VTTCue.from6ArgsTextTrackCue_):shaka.polyfill.VTTCue.canUse3ArgsTextTrackCue_()&&(shaka.log.info(\"Using VTTCue polyfill from 3 argument TextTrackCue.\"),window.VTTCue=\nshaka.polyfill.VTTCue.from3ArgsTextTrackCue_)}else shaka.log.error(\"VTTCue not available.\")};shaka.polyfill.VTTCue.from3ArgsTextTrackCue_=function(a,b,c){return new window.TextTrackCue(a,b,c)};shaka.polyfill.VTTCue.from6ArgsTextTrackCue_=function(a,b,c){return new window.TextTrackCue(a+\"-\"+b+\"-\"+c,a,b,c)};shaka.polyfill.VTTCue.canUse3ArgsTextTrackCue_=function(){try{return!!shaka.polyfill.VTTCue.from3ArgsTextTrackCue_(1,2,\"\")}catch(a){return!1}};shaka.polyfill.register(shaka.polyfill.VTTCue.install);shaka.text.TtmlTextParser=function(){};shaka.text.TtmlTextParser.prototype.parseInit=function(a){goog.asserts.assert(!1,\"TTML does not have init segments\")};\nshaka.text.TtmlTextParser.prototype.parseMedia=function(a,b){var c=shaka.util.StringUtils.fromUTF8(a),d=[],e=new DOMParser,f=null;try{f=e.parseFromString(c,\"text/xml\")}catch(m){throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_XML);}if(f){if(e=f.getElementsByTagName(\"tt\")[0]){f=e.getAttribute(\"ttp:frameRate\");var g=e.getAttribute(\"ttp:subFrameRate\");var h=e.getAttribute(\"ttp:frameRateMultiplier\");var k=e.getAttribute(\"ttp:tickRate\");\nc=e.getAttribute(\"xml:space\")||\"default\"}else throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_XML);if(\"default\"!=c&&\"preserve\"!=c)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_XML);c=\"default\"==c;f=new shaka.text.TtmlTextParser.RateInfo_(f,g,h,k);g=shaka.text.TtmlTextParser.getLeafNodes_(e.getElementsByTagName(\"styling\")[0]);h=shaka.text.TtmlTextParser.getLeafNodes_(e.getElementsByTagName(\"layout\")[0]);\ne=shaka.text.TtmlTextParser.getLeafNodes_(e.getElementsByTagName(\"body\")[0]);for(k=0;k<e.length;k++){var l=shaka.text.TtmlTextParser.parseCue_(e[k],b.periodStart,f,g,h,c);l&&d.push(l)}}return d};shaka.text.TtmlTextParser.timeColonFormatFrames_=/^(\\d{2,}):(\\d{2}):(\\d{2}):(\\d{2})\\.?(\\d+)?$/;shaka.text.TtmlTextParser.timeColonFormat_=/^(?:(\\d{2,}):)?(\\d{2}):(\\d{2})$/;shaka.text.TtmlTextParser.timeColonFormatMilliseconds_=/^(?:(\\d{2,}):)?(\\d{2}):(\\d{2}\\.\\d{2,})$/;\nshaka.text.TtmlTextParser.timeFramesFormat_=/^(\\d*(?:\\.\\d*)?)f$/;shaka.text.TtmlTextParser.timeTickFormat_=/^(\\d*(?:\\.\\d*)?)t$/;shaka.text.TtmlTextParser.timeHMSFormat_=/^(?:(\\d*(?:\\.\\d*)?)h)?(?:(\\d*(?:\\.\\d*)?)m)?(?:(\\d*(?:\\.\\d*)?)s)?(?:(\\d*(?:\\.\\d*)?)ms)?$/;shaka.text.TtmlTextParser.percentValues_=/^(\\d{1,2}|100)% (\\d{1,2}|100)%$/;shaka.text.TtmlTextParser.unitValues_=/^(\\d+px|\\d+em)$/;\nshaka.text.TtmlTextParser.textAlignToLineAlign_={left:shaka.text.Cue.lineAlign.START,center:shaka.text.Cue.lineAlign.CENTER,right:shaka.text.Cue.lineAlign.END,start:shaka.text.Cue.lineAlign.START,end:shaka.text.Cue.lineAlign.END};shaka.text.TtmlTextParser.textAlignToPositionAlign_={left:shaka.text.Cue.positionAlign.LEFT,center:shaka.text.Cue.positionAlign.CENTER,right:shaka.text.Cue.positionAlign.RIGHT};\nshaka.text.TtmlTextParser.getLeafNodes_=function(a){var b=[];if(!a)return b;for(var c=a.childNodes,d=0;d<c.length;d++){var e=\"span\"==c[d].nodeName&&\"p\"==a.nodeName;c[d].nodeType!=Node.ELEMENT_NODE||\"br\"==c[d].nodeName||e||(goog.asserts.assert(c[d]instanceof Element,\"Node should be Element!\"),e=shaka.text.TtmlTextParser.getLeafNodes_(c[d]),goog.asserts.assert(0<e.length,\"Only a null Element should return no leaves!\"),b=b.concat(e))}b.length||b.push(a);return b};\nshaka.text.TtmlTextParser.addNewLines_=function(a,b){for(var c=a.childNodes,d=0;d<c.length;d++)if(\"br\"==c[d].nodeName&&0<d)c[d-1].textContent+=\"\\n\";else if(0<c[d].childNodes.length)shaka.text.TtmlTextParser.addNewLines_(c[d],b);else if(b){var e=c[d].textContent.trim();e=e.replace(/\\s+/g,\" \");c[d].textContent=e}};\nshaka.text.TtmlTextParser.parseCue_=function(a,b,c,d,e,f){if(!a.hasAttribute(\"begin\")&&!a.hasAttribute(\"end\")&&/^\\s*$/.test(a.textContent))return null;shaka.text.TtmlTextParser.addNewLines_(a,f);f=shaka.text.TtmlTextParser.parseTime_(a.getAttribute(\"begin\"),c);var g=shaka.text.TtmlTextParser.parseTime_(a.getAttribute(\"end\"),c);c=shaka.text.TtmlTextParser.parseTime_(a.getAttribute(\"dur\"),c);var h=a.textContent;null==g&&null!=c&&(g=f+c);if(null==f||null==g)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,\nshaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_TEXT_CUE);b=new shaka.text.Cue(f+b,g+b,h);e=shaka.text.TtmlTextParser.getElementFromCollection_(a,\"region\",e);shaka.text.TtmlTextParser.addStyle_(b,a,e,d);return b};\nshaka.text.TtmlTextParser.addStyle_=function(a,b,c,d){var e=shaka.text.TtmlTextParser,f=shaka.text.Cue;\"rtl\"==e.getStyleAttribute_(b,c,d,\"tts:direction\")&&(a.writingDirection=f.writingDirection.HORIZONTAL_RIGHT_TO_LEFT);var g=e.getStyleAttribute_(b,c,d,\"tts:writingMode\");\"tb\"==g||\"tblr\"==g?a.writingDirection=f.writingDirection.VERTICAL_LEFT_TO_RIGHT:\"tbrl\"==g?a.writingDirection=f.writingDirection.VERTICAL_RIGHT_TO_LEFT:\"rltb\"==g||\"rl\"==g?a.writingDirection=f.writingDirection.HORIZONTAL_RIGHT_TO_LEFT:\ng&&(a.writingDirection=f.writingDirection.HORIZONTAL_LEFT_TO_RIGHT);if(g=e.getStyleAttribute_(b,c,d,\"tts:origin\"))g=e.percentValues_.exec(g),null!=g&&(a.region.x=Number(g[1]),a.region.y=Number(g[2]));if(g=e.getStyleAttribute_(b,c,d,\"tts:extent\"))g=e.percentValues_.exec(g),null!=g&&(a.region.width=Number(g[1]),a.region.height=Number(g[2]));if(g=e.getStyleAttribute_(b,c,d,\"tts:textAlign\"))a.positionAlign=e.textAlignToPositionAlign_[g],a.lineAlign=e.textAlignToLineAlign_[g],goog.asserts.assert(g.toUpperCase()in\nf.textAlign,g.toUpperCase()+\" Should be in Cue.textAlign values!\"),a.textAlign=f.textAlign[g.toUpperCase()];if(g=e.getStyleAttribute_(b,c,d,\"tts:displayAlign\"))goog.asserts.assert(g.toUpperCase()in f.displayAlign,g.toUpperCase()+\" Should be in Cue.displayAlign values!\"),a.displayAlign=f.displayAlign[g.toUpperCase()];if(g=e.getStyleAttribute_(b,c,d,\"tts:color\"))a.color=g;if(g=e.getStyleAttribute_(b,c,d,\"tts:backgroundColor\"))a.backgroundColor=g;if(g=e.getStyleAttribute_(b,c,d,\"tts:fontFamily\"))a.fontFamily=\ng;(g=e.getStyleAttribute_(b,c,d,\"tts:fontWeight\"))&&\"bold\"==g&&(a.fontWeight=f.fontWeight.BOLD);(g=e.getStyleAttribute_(b,c,d,\"tts:wrapOption\"))&&\"noWrap\"==g&&(a.wrapLine=!1);(g=e.getStyleAttribute_(b,c,d,\"tts:lineHeight\"))&&g.match(e.unitValues_)&&(a.lineHeight=g);(g=e.getStyleAttribute_(b,c,d,\"tts:fontSize\"))&&g.match(e.unitValues_)&&(a.fontSize=g);if(g=e.getStyleAttribute_(b,c,d,\"tts:fontStyle\"))goog.asserts.assert(g.toUpperCase()in f.fontStyle,g.toUpperCase()+\" Should be in Cue.fontStyle values!\"),\na.fontStyle=f.fontStyle[g.toUpperCase()];(c=e.getStyleAttributeFromRegion_(c,d,\"tts:textDecoration\"))&&e.addTextDecoration_(a,c);(b=e.getStyleAttributeFromElement_(b,d,\"tts:textDecoration\"))&&e.addTextDecoration_(a,b)};\nshaka.text.TtmlTextParser.addTextDecoration_=function(a,b){for(var c=shaka.text.Cue,d=b.split(\" \"),e=0;e<d.length;e++)switch(d[e]){case \"underline\":0>a.textDecoration.indexOf(c.textDecoration.UNDERLINE)&&a.textDecoration.push(c.textDecoration.UNDERLINE);break;case \"noUnderline\":0<=a.textDecoration.indexOf(c.textDecoration.UNDERLINE)&&shaka.util.ArrayUtils.remove(a.textDecoration,c.textDecoration.UNDERLINE);break;case \"lineThrough\":0>a.textDecoration.indexOf(c.textDecoration.LINE_THROUGH)&&a.textDecoration.push(c.textDecoration.LINE_THROUGH);\nbreak;case \"noLineThrough\":0<=a.textDecoration.indexOf(c.textDecoration.LINE_THROUGH)&&shaka.util.ArrayUtils.remove(a.textDecoration,c.textDecoration.LINE_THROUGH);break;case \"overline\":0>a.textDecoration.indexOf(c.textDecoration.OVERLINE)&&a.textDecoration.push(c.textDecoration.OVERLINE);break;case \"noOverline\":0<=a.textDecoration.indexOf(c.textDecoration.OVERLINE)&&shaka.util.ArrayUtils.remove(a.textDecoration,c.textDecoration.OVERLINE)}};\nshaka.text.TtmlTextParser.getStyleAttribute_=function(a,b,c,d){var e=shaka.text.TtmlTextParser;return(a=e.getStyleAttributeFromElement_(a,c,d))?a:e.getStyleAttributeFromRegion_(b,c,d)};shaka.text.TtmlTextParser.getStyleAttributeFromRegion_=function(a,b,c){for(var d=shaka.text.TtmlTextParser.getLeafNodes_(a),e=0;e<d.length;e++){var f=d[e].getAttribute(c);if(f)return f}return(a=shaka.text.TtmlTextParser.getElementFromCollection_(a,\"style\",b))?a.getAttribute(c):null};\nshaka.text.TtmlTextParser.getStyleAttributeFromElement_=function(a,b,c){var d=shaka.text.TtmlTextParser.getElementFromCollection_;return(a=d(a,\"style\",b))?a.getAttribute(c):null};shaka.text.TtmlTextParser.getElementFromCollection_=function(a,b,c){if(!a||1>c.length)return null;var d=null;if(a=shaka.text.TtmlTextParser.getInheritedAttribute_(a,b))for(b=0;b<c.length;b++)if(c[b].getAttribute(\"xml:id\")==a){d=c[b];break}return d};\nshaka.text.TtmlTextParser.getInheritedAttribute_=function(a,b){for(var c=null;a&&!(c=a.getAttribute(b));){var d=a.parentNode;if(d instanceof Element)a=d;else break}return c};\nshaka.text.TtmlTextParser.parseTime_=function(a,b){var c=null,d=shaka.text.TtmlTextParser;d.timeColonFormatFrames_.test(a)?c=d.parseColonTimeWithFrames_(b,a):d.timeColonFormat_.test(a)?c=d.parseTimeFromRegex_(d.timeColonFormat_,a):d.timeColonFormatMilliseconds_.test(a)?c=d.parseTimeFromRegex_(d.timeColonFormatMilliseconds_,a):d.timeFramesFormat_.test(a)?c=d.parseFramesTime_(b,a):d.timeTickFormat_.test(a)?c=d.parseTickTime_(b,a):d.timeHMSFormat_.test(a)&&(c=d.parseTimeFromRegex_(d.timeHMSFormat_,a));\nreturn c};shaka.text.TtmlTextParser.parseFramesTime_=function(a,b){var c=shaka.text.TtmlTextParser.timeFramesFormat_.exec(b);return Number(c[1])/a.frameRate};shaka.text.TtmlTextParser.parseTickTime_=function(a,b){var c=shaka.text.TtmlTextParser.timeTickFormat_.exec(b);return Number(c[1])/a.tickRate};\nshaka.text.TtmlTextParser.parseColonTimeWithFrames_=function(a,b){var c=shaka.text.TtmlTextParser.timeColonFormatFrames_.exec(b),d=Number(c[1]),e=Number(c[2]),f=Number(c[3]),g=Number(c[4]);g+=(Number(c[5])||0)/a.subFrameRate;f+=g/a.frameRate;return f+60*e+3600*d};shaka.text.TtmlTextParser.parseTimeFromRegex_=function(a,b){var c=a.exec(b);return null==c||\"\"==c[0]?null:(Number(c[4])||0)/1E3+(Number(c[3])||0)+60*(Number(c[2])||0)+3600*(Number(c[1])||0)};\nshaka.text.TtmlTextParser.RateInfo_=function(a,b,c,d){this.frameRate=Number(a)||30;this.subFrameRate=Number(b)||1;this.tickRate=Number(d);0==this.tickRate&&(this.tickRate=a?this.frameRate*this.subFrameRate:1);c&&(a=/^(\\d+) (\\d+)$/g.exec(c))&&(this.frameRate*=a[1]/a[2])};shaka.text.TextEngine.registerParser(\"application/ttml+xml\",shaka.text.TtmlTextParser);shaka.text.Mp4TtmlParser=function(){this.parser_=new shaka.text.TtmlTextParser};\nshaka.text.Mp4TtmlParser.prototype.parseInit=function(a){var b=shaka.util.Mp4Parser,c=!1;(new b).box(\"moov\",b.children).box(\"trak\",b.children).box(\"mdia\",b.children).box(\"minf\",b.children).box(\"stbl\",b.children).fullBox(\"stsd\",b.sampleDescription).box(\"stpp\",function(a){c=!0;a.parser.stop()}).parse(a);if(!c)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_MP4_TTML);};\nshaka.text.Mp4TtmlParser.prototype.parseMedia=function(a,b){var c=shaka.util.Mp4Parser,d=!1,e=[];(new c).box(\"mdat\",c.allData(function(a){d=!0;e=e.concat(this.parser_.parseMedia(a,b))}.bind(this))).parse(a);if(!d)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_MP4_TTML);return e};shaka.text.TextEngine.registerParser('application/mp4; codecs=\"stpp\"',shaka.text.Mp4TtmlParser);\nshaka.text.TextEngine.registerParser('application/mp4; codecs=\"stpp.TTML.im1t\"',shaka.text.Mp4TtmlParser);shaka.text.VttTextParser=function(){};shaka.text.VttTextParser.prototype.parseInit=function(a){goog.asserts.assert(!1,\"VTT does not have init segments\")};\nshaka.text.VttTextParser.prototype.parseMedia=function(a,b){var c=shaka.text.VttTextParser,d=shaka.util.StringUtils.fromUTF8(a);d=d.replace(/\\r\\n|\\r(?=[^\\n]|$)/gm,\"\\n\");d=d.split(/\\n{2,}/m);if(!/^WEBVTT($|[ \\t\\n])/m.test(d[0]))throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_TEXT_HEADER);var e=b.segmentStart;if(null==e&&(e=0,0<=d[0].indexOf(\"X-TIMESTAMP-MAP\"))){var f=d[0].match(/LOCAL:((?:(\\d{1,}):)?(\\d{2}):(\\d{2})\\.(\\d{3}))/m),\ng=d[0].match(/MPEGTS:(\\d+)/m);f&&g&&(e=new shaka.util.TextParser(f[1]),e=shaka.text.VttTextParser.parseTime_(e),e=b.periodStart+(Number(g[1])/shaka.text.VttTextParser.MPEG_TIMESCALE_-e))}g=[];for(f=1;f<d.length;f++){var h=d[f].split(\"\\n\");(h=c.parseCue_(h,e))&&g.push(h)}return g};\nshaka.text.VttTextParser.parseCue_=function(a,b){if(1==a.length&&!a[0]||/^NOTE($|[ \\t])/.test(a[0])||\"STYLE\"==a[0])return null;var c=null;0>a[0].indexOf(\"--\\x3e\")&&(c=a[0],a.splice(0,1));var d=new shaka.util.TextParser(a[0]),e=shaka.text.VttTextParser.parseTime_(d),f=d.readRegex(/[ \\t]+--\\x3e[ \\t]+/g),g=shaka.text.VttTextParser.parseTime_(d);if(null==e||null==f||null==g)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_TEXT_CUE);\ne+=b;g+=b;f=a.slice(1).join(\"\\n\").trim();e=new shaka.text.Cue(e,g,f);d.skipWhitespace();for(g=d.readWord();g;)shaka.text.VttTextParser.parseSetting(e,g)||shaka.log.warning(\"VTT parser encountered an invalid VTT setting: \",g,\" The setting will be ignored.\"),d.skipWhitespace(),g=d.readWord();null!=c&&(e.id=c);return e};\nshaka.text.VttTextParser.parseSetting=function(a,b){var c=shaka.text.VttTextParser,d;if(d=/^align:(start|middle|center|end|left|right)$/.exec(b))c.setTextAlign_(a,d[1]);else if(d=/^vertical:(lr|rl)$/.exec(b))c.setVerticalWritingDirection_(a,d[1]);else if(d=/^size:([\\d.]+)%$/.exec(b))a.size=Number(d[1]);else if(d=/^position:([\\d.]+)%(?:,(line-left|line-right|center|start|end))?$/.exec(b))a.position=Number(d[1]),d[2]&&c.setPositionAlign_(a,d[2]);else return c.parsedLineValueAndInterpretation_(a,b);\nreturn!0};shaka.text.VttTextParser.setTextAlign_=function(a,b){var c=shaka.text.Cue;\"middle\"==b?a.textAlign=c.textAlign.CENTER:(goog.asserts.assert(b.toUpperCase()in c.textAlign,b.toUpperCase()+\" Should be in Cue.textAlign values!\"),a.textAlign=c.textAlign[b.toUpperCase()])};shaka.text.VttTextParser.setPositionAlign_=function(a,b){var c=shaka.text.Cue;a.positionAlign=\"line-left\"==b||\"start\"==b?c.positionAlign.LEFT:\"line-right\"==b||\"end\"==b?c.positionAlign.RIGHT:c.positionAlign.CENTER};\nshaka.text.VttTextParser.setVerticalWritingDirection_=function(a,b){var c=shaka.text.Cue;a.writingDirection=\"lr\"==b?c.writingDirection.VERTICAL_LEFT_TO_RIGHT:c.writingDirection.VERTICAL_RIGHT_TO_LEFT};\nshaka.text.VttTextParser.parsedLineValueAndInterpretation_=function(a,b){var c=shaka.text.Cue,d;if(d=/^line:([\\d.]+)%(?:,(start|end|center))?$/.exec(b))a.lineInterpretation=c.lineInterpretation.PERCENTAGE,a.line=Number(d[1]),d[2]&&(goog.asserts.assert(d[2].toUpperCase()in c.lineAlign,d[2].toUpperCase()+\" Should be in Cue.lineAlign values!\"),a.lineAlign=c.lineAlign[d[2].toUpperCase()]);else if(d=/^line:(-?\\d+)(?:,(start|end|center))?$/.exec(b))a.lineInterpretation=c.lineInterpretation.LINE_NUMBER,\na.line=Number(d[1]),d[2]&&(goog.asserts.assert(d[2].toUpperCase()in c.lineAlign,d[2].toUpperCase()+\" Should be in Cue.lineAlign values!\"),a.lineAlign=c.lineAlign[d[2].toUpperCase()]);else return!1;return!0};shaka.text.VttTextParser.parseTime_=function(a){a=a.readRegex(/(?:(\\d{1,}):)?(\\d{2}):(\\d{2})\\.(\\d{3})/g);if(null==a)return null;var b=Number(a[2]),c=Number(a[3]);return 59<b||59<c?null:Number(a[4])/1E3+c+60*b+3600*(Number(a[1])||0)};shaka.text.VttTextParser.MPEG_TIMESCALE_=9E4;\nshaka.text.TextEngine.registerParser(\"text/vtt\",shaka.text.VttTextParser);shaka.text.TextEngine.registerParser('text/vtt; codecs=\"vtt\"',shaka.text.VttTextParser);shaka.text.Mp4VttParser=function(){this.timescale_=null};\nshaka.text.Mp4VttParser.prototype.parseInit=function(a){var b=shaka.util.Mp4Parser,c=!1;(new b).box(\"moov\",b.children).box(\"trak\",b.children).box(\"mdia\",b.children).fullBox(\"mdhd\",function(a){goog.asserts.assert(0==a.version||1==a.version,\"MDHD version can only be 0 or 1\");0==a.version?(a.reader.skip(4),a.reader.skip(4),this.timescale_=a.reader.readUint32(),a.reader.skip(4)):(a.reader.skip(8),a.reader.skip(8),this.timescale_=a.reader.readUint32(),a.reader.skip(8));a.reader.skip(4)}.bind(this)).box(\"minf\",\nb.children).box(\"stbl\",b.children).fullBox(\"stsd\",b.sampleDescription).box(\"wvtt\",function(a){c=!0}).parse(a);if(!this.timescale_)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_MP4_VTT);if(!c)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_MP4_VTT);};\nshaka.text.Mp4VttParser.prototype.parseMedia=function(a,b){if(!this.timescale_)throw shaka.log.error(\"No init segment for MP4+VTT!\"),new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_MP4_VTT);var c=shaka.text.Mp4VttParser,d=shaka.util.Mp4Parser,e=0,f=[],g=[],h=[],k=!1,l=!1,m=!1,n=null;(new d).box(\"moof\",d.children).box(\"traf\",d.children).fullBox(\"tfdt\",function(a){k=!0;goog.asserts.assert(0==a.version||1==a.version,\"TFDT version can only be 0 or 1\");\ne=0==a.version?a.reader.readUint32():a.reader.readUint64()}).fullBox(\"tfhd\",function(a){goog.asserts.assert(null!=a.flags,\"A TFHD box should have a valid flags value\");n=c.parseTFHD_(a.flags,a.reader)}).fullBox(\"trun\",function(a){l=!0;goog.asserts.assert(null!=a.version,\"A TRUN box should have a valid version value\");goog.asserts.assert(null!=a.flags,\"A TRUN box should have a valid flags value\");f=c.parseTRUN_(a.version,a.flags,a.reader)}).box(\"vtte\",function(a){g.push(null)}).box(\"vttc\",d.allData(function(a){g.push(a)})).box(\"mdat\",\nfunction(a){m=!0;d.children(a)}).parse(a);if(!m&&!k&&!l)throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL,shaka.util.Error.Category.TEXT,shaka.util.Error.Code.INVALID_MP4_VTT);goog.asserts.assert(f.length==g.length,\"The number of presentations should equal the number of payloads\");for(var p=e,q=0;q<f.length;q++){var r=f[q],v=g[q],t=r.duration||n;t?(r=r.timeOffset?e+r.timeOffset:p,p=r+t,v&&h.push(shaka.text.Mp4VttParser.parseVTTC_(v,b.periodStart+r/this.timescale_,b.periodStart+p/this.timescale_))):\nshaka.log.error(\"WVTT sample duration unknown, and no default found!\")}return h.filter(shaka.util.Functional.isNotNull)};shaka.text.Mp4VttParser.parseTFHD_=function(a,b){b.skip(4);a&1&&b.skip(8);a&2&&b.skip(4);return a&8?b.readUint32():null};\nshaka.text.Mp4VttParser.parseTRUN_=function(a,b,c){var d=c.readUint32();b&1&&c.skip(4);b&4&&c.skip(4);for(var e=[],f=0;f<d;f++){var g={duration:null,timeOffset:null};b&256&&(g.duration=c.readUint32());b&512&&c.skip(4);b&1024&&c.skip(4);b&2048&&(g.timeOffset=0==a?c.readUint32():c.readInt32());e.push(g)}return e};\nshaka.text.Mp4VttParser.parseVTTC_=function(a,b,c){var d,e,f;(new shaka.util.Mp4Parser).box(\"payl\",shaka.util.Mp4Parser.allData(function(a){d=shaka.util.StringUtils.fromUTF8(a)})).box(\"iden\",shaka.util.Mp4Parser.allData(function(a){e=shaka.util.StringUtils.fromUTF8(a)})).box(\"sttg\",shaka.util.Mp4Parser.allData(function(a){f=shaka.util.StringUtils.fromUTF8(a)})).parse(a);return d?shaka.text.Mp4VttParser.assembleCue_(d,e,f,b,c):null};\nshaka.text.Mp4VttParser.assembleCue_=function(a,b,c,d,e){a=new shaka.text.Cue(d,e,a);b&&(a.id=b);if(c)for(b=new shaka.util.TextParser(c),c=b.readWord();c;)shaka.text.VttTextParser.parseSetting(a,c)||shaka.log.warning(\"VTT parser encountered an invalid VTT setting: \",c,\" The setting will be ignored.\"),b.skipWhitespace(),c=b.readWord();return a};shaka.text.TextEngine.registerParser('application/mp4; codecs=\"wvtt\"',shaka.text.Mp4VttParser);\n//# sourceMappingURL=shaka-player.compiled.debug.map\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///88\n");

/***/ })
/******/ ]);